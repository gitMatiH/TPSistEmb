
TPSistEmb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002760  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  0800286c  0800286c  0001286c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028c8  080028c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080028c8  080028c8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028c8  080028c8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028c8  080028c8  000128c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028cc  080028cc  000128cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080028d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2000000c  080028dc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  080028dc  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006fae  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cf0  00000000  00000000  00027026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000798  00000000  00000000  00028d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005b3  00000000  00000000  000294b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017474  00000000  00000000  00029a63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a33b  00000000  00000000  00040ed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000818c1  00000000  00000000  0004b212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001c34  00000000  00000000  000ccad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000ce708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002854 	.word	0x08002854

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002854 	.word	0x08002854

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <CountingHandler_init>:

#include "CountingHandler.h"
#include "cola.h"
#include "SendData.h"

void CountingHandler_init(uint16_t *pulseCount, bool *flagPulso){
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	6039      	str	r1, [r7, #0]
	*pulseCount = 0;
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	2200      	movs	r2, #0
 800016a:	801a      	strh	r2, [r3, #0]
	*flagPulso = 0;
 800016c:	683b      	ldr	r3, [r7, #0]
 800016e:	2200      	movs	r2, #0
 8000170:	701a      	strb	r2, [r3, #0]
}
 8000172:	bf00      	nop
 8000174:	370c      	adds	r7, #12
 8000176:	46bd      	mov	sp, r7
 8000178:	bc80      	pop	{r7}
 800017a:	4770      	bx	lr

0800017c <CountingHandler>:

void CountingHandler(uint16_t *pulseCount, bool *flagPulso){
 800017c:	b580      	push	{r7, lr}
 800017e:	b084      	sub	sp, #16
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
 8000184:	6039      	str	r1, [r7, #0]
					// tambien, si lo saco, podría quedar "enganchado", por la condicion de que es global y se podría justo
					// "enganchar" a agregar un pulso por ciclo. entonces no saldría de la condicion
	*
	*/ // Interprete mal!!!!

	byte = (uint8_t)*pulseCount;
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	881b      	ldrh	r3, [r3, #0]
 800018a:	73fb      	strb	r3, [r7, #15]
	Cola_AgregarDatoCola (&cola_tx, byte);
 800018c:	7bfb      	ldrb	r3, [r7, #15]
 800018e:	4619      	mov	r1, r3
 8000190:	4809      	ldr	r0, [pc, #36]	; (80001b8 <CountingHandler+0x3c>)
 8000192:	f000 faeb 	bl	800076c <Cola_AgregarDatoCola>
	byte = (uint8_t) ((uint16_t)(*pulseCount)>>8);
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	881b      	ldrh	r3, [r3, #0]
 800019a:	0a1b      	lsrs	r3, r3, #8
 800019c:	b29b      	uxth	r3, r3
 800019e:	73fb      	strb	r3, [r7, #15]
	Cola_AgregarDatoCola (&cola_tx, byte);
 80001a0:	7bfb      	ldrb	r3, [r7, #15]
 80001a2:	4619      	mov	r1, r3
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <CountingHandler+0x3c>)
 80001a6:	f000 fae1 	bl	800076c <Cola_AgregarDatoCola>

	*flagPulso = 0;
 80001aa:	683b      	ldr	r3, [r7, #0]
 80001ac:	2200      	movs	r2, #0
 80001ae:	701a      	strb	r2, [r3, #0]

}
 80001b0:	bf00      	nop
 80001b2:	3710      	adds	r7, #16
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bd80      	pop	{r7, pc}
 80001b8:	2000005c 	.word	0x2000005c

080001bc <SetFlag>:
estado_leds estadoLeds;

uint8_t flag;

void SetFlag(uint8_t value)
{
 80001bc:	b480      	push	{r7}
 80001be:	b083      	sub	sp, #12
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	4603      	mov	r3, r0
 80001c4:	71fb      	strb	r3, [r7, #7]
	flag = value;
 80001c6:	4a04      	ldr	r2, [pc, #16]	; (80001d8 <SetFlag+0x1c>)
 80001c8:	79fb      	ldrb	r3, [r7, #7]
 80001ca:	7013      	strb	r3, [r2, #0]
}
 80001cc:	bf00      	nop
 80001ce:	370c      	adds	r7, #12
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bc80      	pop	{r7}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	2000002d 	.word	0x2000002d

080001dc <GetFlag>:

uint8_t GetFlag(void)
{
 80001dc:	b480      	push	{r7}
 80001de:	af00      	add	r7, sp, #0
	return flag;
 80001e0:	4b02      	ldr	r3, [pc, #8]	; (80001ec <GetFlag+0x10>)
 80001e2:	781b      	ldrb	r3, [r3, #0]
}
 80001e4:	4618      	mov	r0, r3
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bc80      	pop	{r7}
 80001ea:	4770      	bx	lr
 80001ec:	2000002d 	.word	0x2000002d

080001f0 <LedHandler>:


void LedSequence_init(void);


void LedHandler(uint8_t* instruccion_ok){
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b082      	sub	sp, #8
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
	if(GetFlag()==0)
	{
		return;
	}
	*/
	switch(*instruccion_ok){
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	781b      	ldrb	r3, [r3, #0]
 80001fc:	3b31      	subs	r3, #49	; 0x31
 80001fe:	2b22      	cmp	r3, #34	; 0x22
 8000200:	f200 8090 	bhi.w	8000324 <LedHandler+0x134>
 8000204:	a201      	add	r2, pc, #4	; (adr r2, 800020c <LedHandler+0x1c>)
 8000206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800020a:	bf00      	nop
 800020c:	08000299 	.word	0x08000299
 8000210:	080002ab 	.word	0x080002ab
 8000214:	080002bd 	.word	0x080002bd
 8000218:	08000325 	.word	0x08000325
 800021c:	08000325 	.word	0x08000325
 8000220:	08000325 	.word	0x08000325
 8000224:	08000325 	.word	0x08000325
 8000228:	08000325 	.word	0x08000325
 800022c:	08000325 	.word	0x08000325
 8000230:	08000325 	.word	0x08000325
 8000234:	08000325 	.word	0x08000325
 8000238:	08000325 	.word	0x08000325
 800023c:	08000325 	.word	0x08000325
 8000240:	08000325 	.word	0x08000325
 8000244:	08000325 	.word	0x08000325
 8000248:	08000325 	.word	0x08000325
 800024c:	08000325 	.word	0x08000325
 8000250:	08000325 	.word	0x08000325
 8000254:	08000325 	.word	0x08000325
 8000258:	08000325 	.word	0x08000325
 800025c:	08000325 	.word	0x08000325
 8000260:	08000325 	.word	0x08000325
 8000264:	08000325 	.word	0x08000325
 8000268:	08000325 	.word	0x08000325
 800026c:	08000325 	.word	0x08000325
 8000270:	08000325 	.word	0x08000325
 8000274:	08000325 	.word	0x08000325
 8000278:	08000325 	.word	0x08000325
 800027c:	08000325 	.word	0x08000325
 8000280:	08000325 	.word	0x08000325
 8000284:	080002f3 	.word	0x080002f3
 8000288:	08000325 	.word	0x08000325
 800028c:	08000325 	.word	0x08000325
 8000290:	08000325 	.word	0x08000325
 8000294:	080002cf 	.word	0x080002cf

	case cmd_led1:
		//cambiar estado led 1
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000298:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800029c:	4825      	ldr	r0, [pc, #148]	; (8000334 <LedHandler+0x144>)
 800029e:	f001 f8e5 	bl	800146c <HAL_GPIO_TogglePin>
	    *instruccion_ok = 0;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	2200      	movs	r2, #0
 80002a6:	701a      	strb	r2, [r3, #0]
		break;
 80002a8:	e040      	b.n	800032c <LedHandler+0x13c>

	case cmd_led2:
		//cambiar estado led 2
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80002aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002ae:	4821      	ldr	r0, [pc, #132]	; (8000334 <LedHandler+0x144>)
 80002b0:	f001 f8dc 	bl	800146c <HAL_GPIO_TogglePin>
		*instruccion_ok = 0;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	2200      	movs	r2, #0
 80002b8:	701a      	strb	r2, [r3, #0]
		break;
 80002ba:	e037      	b.n	800032c <LedHandler+0x13c>

	case cmd_led3:
		//cambiar estado led 3
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 80002bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002c0:	481c      	ldr	r0, [pc, #112]	; (8000334 <LedHandler+0x144>)
 80002c2:	f001 f8d3 	bl	800146c <HAL_GPIO_TogglePin>
		*instruccion_ok = 0;
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	2200      	movs	r2, #0
 80002ca:	701a      	strb	r2, [r3, #0]
		break;
 80002cc:	e02e      	b.n	800032c <LedHandler+0x13c>

	case cmd_Secuencia:
		if (GetFlag()==0){
 80002ce:	f7ff ff85 	bl	80001dc <GetFlag>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d105      	bne.n	80002e4 <LedHandler+0xf4>
			//*primeraVez = 1;
			//bool primeraVez;	// capaz nos lo podemos ahorrar... no hace falta por el ledsequence_init
			//tiempo_inicial = HAL_GetTick();	//reemplaza a toda la estructura de tiempo inic asoc a flagprimeravez
			// va en LedSequence_init()
			//puedo usar ese para leer el tiempo inicial "seed
			LedSequence_init();
 80002d8:	f000 f82e 	bl	8000338 <LedSequence_init>
			//*flagSecuencia = 1;
			SetFlag(1);
 80002dc:	2001      	movs	r0, #1
 80002de:	f7ff ff6d 	bl	80001bc <SetFlag>
 80002e2:	e002      	b.n	80002ea <LedHandler+0xfa>
			//puedo usar ese para leer el tiempo inicial "seed
		}else{
			//*primeraVez = 0;//ESTE ES IMPORTANTE, PARA CUANDO RETORNE LA SECUENCIA SEGUN FLAG
			//ya no hace falta apagar primera vez pq ya no existe
			//*flagSecuencia = 0;
			SetFlag(0);
 80002e4:	2000      	movs	r0, #0
 80002e6:	f7ff ff69 	bl	80001bc <SetFlag>
		}
		*instruccion_ok = 0;
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	2200      	movs	r2, #0
 80002ee:	701a      	strb	r2, [r3, #0]
		break;
 80002f0:	e01c      	b.n	800032c <LedHandler+0x13c>

	case cmd_Apagado:
		//*primeraVez = 0;
		// ya no hace falta
		//*flagSecuencia = 0;// es reemplazado por setflag
		SetFlag(0);
 80002f2:	2000      	movs	r0, #0
 80002f4:	f7ff ff62 	bl	80001bc <SetFlag>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, LED_ESTADO_INACTIVO);
 80002f8:	2201      	movs	r2, #1
 80002fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002fe:	480d      	ldr	r0, [pc, #52]	; (8000334 <LedHandler+0x144>)
 8000300:	f001 f89c 	bl	800143c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, LED_ESTADO_INACTIVO);
 8000304:	2201      	movs	r2, #1
 8000306:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800030a:	480a      	ldr	r0, [pc, #40]	; (8000334 <LedHandler+0x144>)
 800030c:	f001 f896 	bl	800143c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, LED_ESTADO_INACTIVO);
 8000310:	2201      	movs	r2, #1
 8000312:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000316:	4807      	ldr	r0, [pc, #28]	; (8000334 <LedHandler+0x144>)
 8000318:	f001 f890 	bl	800143c <HAL_GPIO_WritePin>
		*instruccion_ok = 0;
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	2200      	movs	r2, #0
 8000320:	701a      	strb	r2, [r3, #0]
		break;
 8000322:	e003      	b.n	800032c <LedHandler+0x13c>

	default:
		// apagar todos los leds??? no, es para agarrar una instruccion no indizada
		*instruccion_ok = 0;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	2200      	movs	r2, #0
 8000328:	701a      	strb	r2, [r3, #0]
		break;
 800032a:	bf00      	nop

	}

}
 800032c:	bf00      	nop
 800032e:	3708      	adds	r7, #8
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	40010c00 	.word	0x40010c00

08000338 <LedSequence_init>:

void LedSequence_init(void){
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0

	tiempo_inicial = HAL_GetTick();
 800033c:	f000 fd32 	bl	8000da4 <HAL_GetTick>
 8000340:	4603      	mov	r3, r0
 8000342:	4a0c      	ldr	r2, [pc, #48]	; (8000374 <LedSequence_init+0x3c>)
 8000344:	6013      	str	r3, [r2, #0]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, LED_ESTADO_INACTIVO);
 8000346:	2201      	movs	r2, #1
 8000348:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800034c:	480a      	ldr	r0, [pc, #40]	; (8000378 <LedSequence_init+0x40>)
 800034e:	f001 f875 	bl	800143c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, LED_ESTADO_INACTIVO);
 8000352:	2201      	movs	r2, #1
 8000354:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000358:	4807      	ldr	r0, [pc, #28]	; (8000378 <LedSequence_init+0x40>)
 800035a:	f001 f86f 	bl	800143c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, LED_ESTADO_INACTIVO);
 800035e:	2201      	movs	r2, #1
 8000360:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000364:	4804      	ldr	r0, [pc, #16]	; (8000378 <LedSequence_init+0x40>)
 8000366:	f001 f869 	bl	800143c <HAL_GPIO_WritePin>

	estadoLeds = PRENDIDO_LED1;
 800036a:	4b04      	ldr	r3, [pc, #16]	; (800037c <LedSequence_init+0x44>)
 800036c:	2200      	movs	r2, #0
 800036e:	701a      	strb	r2, [r3, #0]

	return;
 8000370:	bf00      	nop
}
 8000372:	bd80      	pop	{r7, pc}
 8000374:	20000028 	.word	0x20000028
 8000378:	40010c00 	.word	0x40010c00
 800037c:	2000002c 	.word	0x2000002c

08000380 <LedSequence>:

void LedSequence(void){
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0

	uint32_t t_actual;

	t_actual = HAL_GetTick();
 8000386:	f000 fd0d 	bl	8000da4 <HAL_GetTick>
 800038a:	6078      	str	r0, [r7, #4]

	switch (estadoLeds){
 800038c:	4b39      	ldr	r3, [pc, #228]	; (8000474 <LedSequence+0xf4>)
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	2b03      	cmp	r3, #3
 8000392:	d86a      	bhi.n	800046a <LedSequence+0xea>
 8000394:	a201      	add	r2, pc, #4	; (adr r2, 800039c <LedSequence+0x1c>)
 8000396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800039a:	bf00      	nop
 800039c:	080003ad 	.word	0x080003ad
 80003a0:	080003d3 	.word	0x080003d3
 80003a4:	080003f9 	.word	0x080003f9
 80003a8:	0800041f 	.word	0x0800041f

	case PRENDIDO_LED1:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, LED_ESTADO_ACTIVO);
 80003ac:	2200      	movs	r2, #0
 80003ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003b2:	4831      	ldr	r0, [pc, #196]	; (8000478 <LedSequence+0xf8>)
 80003b4:	f001 f842 	bl	800143c <HAL_GPIO_WritePin>

		if(t_actual - tiempo_inicial > MAX_TIME_MS){
 80003b8:	4b30      	ldr	r3, [pc, #192]	; (800047c <LedSequence+0xfc>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	687a      	ldr	r2, [r7, #4]
 80003be:	1ad3      	subs	r3, r2, r3
 80003c0:	2b7d      	cmp	r3, #125	; 0x7d
 80003c2:	d94b      	bls.n	800045c <LedSequence+0xdc>
			tiempo_inicial = t_actual;
 80003c4:	4a2d      	ldr	r2, [pc, #180]	; (800047c <LedSequence+0xfc>)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	6013      	str	r3, [r2, #0]
			estadoLeds = PRENDIDO_LED2;
 80003ca:	4b2a      	ldr	r3, [pc, #168]	; (8000474 <LedSequence+0xf4>)
 80003cc:	2201      	movs	r2, #1
 80003ce:	701a      	strb	r2, [r3, #0]
		}
		break;
 80003d0:	e044      	b.n	800045c <LedSequence+0xdc>

	case PRENDIDO_LED2:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, LED_ESTADO_ACTIVO);
 80003d2:	2200      	movs	r2, #0
 80003d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003d8:	4827      	ldr	r0, [pc, #156]	; (8000478 <LedSequence+0xf8>)
 80003da:	f001 f82f 	bl	800143c <HAL_GPIO_WritePin>

		if(t_actual - tiempo_inicial > MAX_TIME_MS){
 80003de:	4b27      	ldr	r3, [pc, #156]	; (800047c <LedSequence+0xfc>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	687a      	ldr	r2, [r7, #4]
 80003e4:	1ad3      	subs	r3, r2, r3
 80003e6:	2b7d      	cmp	r3, #125	; 0x7d
 80003e8:	d93a      	bls.n	8000460 <LedSequence+0xe0>
			tiempo_inicial = t_actual;
 80003ea:	4a24      	ldr	r2, [pc, #144]	; (800047c <LedSequence+0xfc>)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	6013      	str	r3, [r2, #0]
			estadoLeds = PRENDIDO_LED3;
 80003f0:	4b20      	ldr	r3, [pc, #128]	; (8000474 <LedSequence+0xf4>)
 80003f2:	2202      	movs	r2, #2
 80003f4:	701a      	strb	r2, [r3, #0]
		}
		break;
 80003f6:	e033      	b.n	8000460 <LedSequence+0xe0>

	case PRENDIDO_LED3:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, LED_ESTADO_ACTIVO);
 80003f8:	2200      	movs	r2, #0
 80003fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003fe:	481e      	ldr	r0, [pc, #120]	; (8000478 <LedSequence+0xf8>)
 8000400:	f001 f81c 	bl	800143c <HAL_GPIO_WritePin>
		if(t_actual - tiempo_inicial > MAX_TIME_MS){
 8000404:	4b1d      	ldr	r3, [pc, #116]	; (800047c <LedSequence+0xfc>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	687a      	ldr	r2, [r7, #4]
 800040a:	1ad3      	subs	r3, r2, r3
 800040c:	2b7d      	cmp	r3, #125	; 0x7d
 800040e:	d929      	bls.n	8000464 <LedSequence+0xe4>
			tiempo_inicial = t_actual;
 8000410:	4a1a      	ldr	r2, [pc, #104]	; (800047c <LedSequence+0xfc>)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	6013      	str	r3, [r2, #0]
			estadoLeds = APAGADO_LEDS;
 8000416:	4b17      	ldr	r3, [pc, #92]	; (8000474 <LedSequence+0xf4>)
 8000418:	2203      	movs	r2, #3
 800041a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800041c:	e022      	b.n	8000464 <LedSequence+0xe4>

	case APAGADO_LEDS:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, LED_ESTADO_INACTIVO);
 800041e:	2201      	movs	r2, #1
 8000420:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000424:	4814      	ldr	r0, [pc, #80]	; (8000478 <LedSequence+0xf8>)
 8000426:	f001 f809 	bl	800143c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, LED_ESTADO_INACTIVO);
 800042a:	2201      	movs	r2, #1
 800042c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000430:	4811      	ldr	r0, [pc, #68]	; (8000478 <LedSequence+0xf8>)
 8000432:	f001 f803 	bl	800143c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, LED_ESTADO_INACTIVO);
 8000436:	2201      	movs	r2, #1
 8000438:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800043c:	480e      	ldr	r0, [pc, #56]	; (8000478 <LedSequence+0xf8>)
 800043e:	f000 fffd 	bl	800143c <HAL_GPIO_WritePin>

		if(t_actual - tiempo_inicial > MAX_TIME_MS){
 8000442:	4b0e      	ldr	r3, [pc, #56]	; (800047c <LedSequence+0xfc>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	687a      	ldr	r2, [r7, #4]
 8000448:	1ad3      	subs	r3, r2, r3
 800044a:	2b7d      	cmp	r3, #125	; 0x7d
 800044c:	d90c      	bls.n	8000468 <LedSequence+0xe8>
			tiempo_inicial = t_actual;
 800044e:	4a0b      	ldr	r2, [pc, #44]	; (800047c <LedSequence+0xfc>)
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	6013      	str	r3, [r2, #0]
			estadoLeds = PRENDIDO_LED1;
 8000454:	4b07      	ldr	r3, [pc, #28]	; (8000474 <LedSequence+0xf4>)
 8000456:	2200      	movs	r2, #0
 8000458:	701a      	strb	r2, [r3, #0]
		}
		break;
 800045a:	e005      	b.n	8000468 <LedSequence+0xe8>
		break;
 800045c:	bf00      	nop
 800045e:	e004      	b.n	800046a <LedSequence+0xea>
		break;
 8000460:	bf00      	nop
 8000462:	e002      	b.n	800046a <LedSequence+0xea>
		break;
 8000464:	bf00      	nop
 8000466:	e000      	b.n	800046a <LedSequence+0xea>
		break;
 8000468:	bf00      	nop
	}
	//no, no hace falta esto
	//primera vez hecha
	//SetFlag(0);
}
 800046a:	bf00      	nop
 800046c:	3708      	adds	r7, #8
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	2000002c 	.word	0x2000002c
 8000478:	40010c00 	.word	0x40010c00
 800047c:	20000028 	.word	0x20000028

08000480 <ProcessRxMsg_Init>:
enum_proceso estadoActual;

TColaDato_Typedef buffer_rx[RX_COLA_MAX_BUFFER];
Cola_BaseStructTypedef cola_rx;

void ProcessRxMsg_Init(void){
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
	estadoActual = OCIOSO;
 8000484:	4b04      	ldr	r3, [pc, #16]	; (8000498 <ProcessRxMsg_Init+0x18>)
 8000486:	2200      	movs	r2, #0
 8000488:	701a      	strb	r2, [r3, #0]
	Cola_InicializarCola(&cola_rx, buffer_rx, RX_COLA_MAX_BUFFER);
 800048a:	2206      	movs	r2, #6
 800048c:	4903      	ldr	r1, [pc, #12]	; (800049c <ProcessRxMsg_Init+0x1c>)
 800048e:	4804      	ldr	r0, [pc, #16]	; (80004a0 <ProcessRxMsg_Init+0x20>)
 8000490:	f000 f943 	bl	800071a <Cola_InicializarCola>

}
 8000494:	bf00      	nop
 8000496:	bd80      	pop	{r7, pc}
 8000498:	2000002e 	.word	0x2000002e
 800049c:	20000030 	.word	0x20000030
 80004a0:	20000038 	.word	0x20000038

080004a4 <ProcessRxMsg>:


void ProcessRxMsg(UART_HandleTypeDef * huart1, uint8_t * rx_data, Cola_BaseStructTypedef * colaTx, uint8_t *instruccion_ok){
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b088      	sub	sp, #32
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	60f8      	str	r0, [r7, #12]
 80004ac:	60b9      	str	r1, [r7, #8]
 80004ae:	607a      	str	r2, [r7, #4]
 80004b0:	603b      	str	r3, [r7, #0]

	uint8_t dato;
	uint32_t tiempoRecepcionActual, tiempoRecepcion0;

	switch(estadoActual){
 80004b2:	4b6c      	ldr	r3, [pc, #432]	; (8000664 <ProcessRxMsg+0x1c0>)
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	2b02      	cmp	r3, #2
 80004b8:	d07f      	beq.n	80005ba <ProcessRxMsg+0x116>
 80004ba:	2b02      	cmp	r3, #2
 80004bc:	f300 80cd 	bgt.w	800065a <ProcessRxMsg+0x1b6>
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d002      	beq.n	80004ca <ProcessRxMsg+0x26>
 80004c4:	2b01      	cmp	r3, #1
 80004c6:	d02b      	beq.n	8000520 <ProcessRxMsg+0x7c>
				instruccion_ok = 0;
				estadoActual = OCIOSO;
			}
		}
	}
}
 80004c8:	e0c7      	b.n	800065a <ProcessRxMsg+0x1b6>
		if (Cola_RetirarDatoCola (&cola_rx,&dato) != 0x00){
 80004ca:	f107 0317 	add.w	r3, r7, #23
 80004ce:	4619      	mov	r1, r3
 80004d0:	4865      	ldr	r0, [pc, #404]	; (8000668 <ProcessRxMsg+0x1c4>)
 80004d2:	f000 f97b 	bl	80007cc <Cola_RetirarDatoCola>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	f000 80bb 	beq.w	8000654 <ProcessRxMsg+0x1b0>
			if (dato == '1' || dato == '2' || dato == '3' || dato == 'S' || dato == 'O'){
 80004de:	7dfb      	ldrb	r3, [r7, #23]
 80004e0:	2b31      	cmp	r3, #49	; 0x31
 80004e2:	d00b      	beq.n	80004fc <ProcessRxMsg+0x58>
 80004e4:	7dfb      	ldrb	r3, [r7, #23]
 80004e6:	2b32      	cmp	r3, #50	; 0x32
 80004e8:	d008      	beq.n	80004fc <ProcessRxMsg+0x58>
 80004ea:	7dfb      	ldrb	r3, [r7, #23]
 80004ec:	2b33      	cmp	r3, #51	; 0x33
 80004ee:	d005      	beq.n	80004fc <ProcessRxMsg+0x58>
 80004f0:	7dfb      	ldrb	r3, [r7, #23]
 80004f2:	2b53      	cmp	r3, #83	; 0x53
 80004f4:	d002      	beq.n	80004fc <ProcessRxMsg+0x58>
 80004f6:	7dfb      	ldrb	r3, [r7, #23]
 80004f8:	2b4f      	cmp	r3, #79	; 0x4f
 80004fa:	d109      	bne.n	8000510 <ProcessRxMsg+0x6c>
				tiempoRecepcion0 = HAL_GetTick();
 80004fc:	f000 fc52 	bl	8000da4 <HAL_GetTick>
 8000500:	61b8      	str	r0, [r7, #24]
				*instruccion_ok = dato;
 8000502:	7dfa      	ldrb	r2, [r7, #23]
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	701a      	strb	r2, [r3, #0]
				estadoActual = CARACTER_VALIDO_1;
 8000508:	4b56      	ldr	r3, [pc, #344]	; (8000664 <ProcessRxMsg+0x1c0>)
 800050a:	2201      	movs	r2, #1
 800050c:	701a      	strb	r2, [r3, #0]
		break;
 800050e:	e0a1      	b.n	8000654 <ProcessRxMsg+0x1b0>
				*instruccion_ok = 0;
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	2200      	movs	r2, #0
 8000514:	701a      	strb	r2, [r3, #0]
				enviarACola(MSG_ERROR,colaTx);
 8000516:	6879      	ldr	r1, [r7, #4]
 8000518:	4854      	ldr	r0, [pc, #336]	; (800066c <ProcessRxMsg+0x1c8>)
 800051a:	f000 f8db 	bl	80006d4 <enviarACola>
		break;
 800051e:	e099      	b.n	8000654 <ProcessRxMsg+0x1b0>
		if (Cola_RetirarDatoCola (&cola_rx,&dato) != COLA_COLA_VACIA){
 8000520:	f107 0317 	add.w	r3, r7, #23
 8000524:	4619      	mov	r1, r3
 8000526:	4850      	ldr	r0, [pc, #320]	; (8000668 <ProcessRxMsg+0x1c4>)
 8000528:	f000 f950 	bl	80007cc <Cola_RetirarDatoCola>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	f000 8092 	beq.w	8000658 <ProcessRxMsg+0x1b4>
			tiempoRecepcionActual = HAL_GetTick();
 8000534:	f000 fc36 	bl	8000da4 <HAL_GetTick>
 8000538:	61f8      	str	r0, [r7, #28]
			if (dato == COLA_COLA_VACIA) {
 800053a:	7dfb      	ldrb	r3, [r7, #23]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d114      	bne.n	800056a <ProcessRxMsg+0xc6>
				if(tiempoRecepcionActual - tiempoRecepcion0 < TMAX){
 8000540:	69fa      	ldr	r2, [r7, #28]
 8000542:	69bb      	ldr	r3, [r7, #24]
 8000544:	1ad3      	subs	r3, r2, r3
 8000546:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800054a:	d203      	bcs.n	8000554 <ProcessRxMsg+0xb0>
					estadoActual = CARACTER_VALIDO_2;
 800054c:	4b45      	ldr	r3, [pc, #276]	; (8000664 <ProcessRxMsg+0x1c0>)
 800054e:	2202      	movs	r2, #2
 8000550:	701a      	strb	r2, [r3, #0]
		break;
 8000552:	e081      	b.n	8000658 <ProcessRxMsg+0x1b4>
					enviarACola(MSG_TIMEOUT,colaTx);
 8000554:	6879      	ldr	r1, [r7, #4]
 8000556:	4846      	ldr	r0, [pc, #280]	; (8000670 <ProcessRxMsg+0x1cc>)
 8000558:	f000 f8bc 	bl	80006d4 <enviarACola>
					*instruccion_ok = 0;
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	2200      	movs	r2, #0
 8000560:	701a      	strb	r2, [r3, #0]
					estadoActual = OCIOSO;
 8000562:	4b40      	ldr	r3, [pc, #256]	; (8000664 <ProcessRxMsg+0x1c0>)
 8000564:	2200      	movs	r2, #0
 8000566:	701a      	strb	r2, [r3, #0]
		break;
 8000568:	e076      	b.n	8000658 <ProcessRxMsg+0x1b4>
			}else if(dato == 1 || dato == 2 || dato == 3 || dato == 'S' || dato == 'O'){
 800056a:	7dfb      	ldrb	r3, [r7, #23]
 800056c:	2b01      	cmp	r3, #1
 800056e:	d00b      	beq.n	8000588 <ProcessRxMsg+0xe4>
 8000570:	7dfb      	ldrb	r3, [r7, #23]
 8000572:	2b02      	cmp	r3, #2
 8000574:	d008      	beq.n	8000588 <ProcessRxMsg+0xe4>
 8000576:	7dfb      	ldrb	r3, [r7, #23]
 8000578:	2b03      	cmp	r3, #3
 800057a:	d005      	beq.n	8000588 <ProcessRxMsg+0xe4>
 800057c:	7dfb      	ldrb	r3, [r7, #23]
 800057e:	2b53      	cmp	r3, #83	; 0x53
 8000580:	d002      	beq.n	8000588 <ProcessRxMsg+0xe4>
 8000582:	7dfb      	ldrb	r3, [r7, #23]
 8000584:	2b4f      	cmp	r3, #79	; 0x4f
 8000586:	d10d      	bne.n	80005a4 <ProcessRxMsg+0x100>
				enviarACola(MSG_ERROR,colaTx);
 8000588:	6879      	ldr	r1, [r7, #4]
 800058a:	4838      	ldr	r0, [pc, #224]	; (800066c <ProcessRxMsg+0x1c8>)
 800058c:	f000 f8a2 	bl	80006d4 <enviarACola>
				tiempoRecepcion0 = HAL_GetTick();
 8000590:	f000 fc08 	bl	8000da4 <HAL_GetTick>
 8000594:	61b8      	str	r0, [r7, #24]
				*instruccion_ok = dato;
 8000596:	7dfa      	ldrb	r2, [r7, #23]
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	701a      	strb	r2, [r3, #0]
				estadoActual = CARACTER_VALIDO_1;
 800059c:	4b31      	ldr	r3, [pc, #196]	; (8000664 <ProcessRxMsg+0x1c0>)
 800059e:	2201      	movs	r2, #1
 80005a0:	701a      	strb	r2, [r3, #0]
		break;
 80005a2:	e059      	b.n	8000658 <ProcessRxMsg+0x1b4>
				enviarACola(MSG_ERROR,colaTx);
 80005a4:	6879      	ldr	r1, [r7, #4]
 80005a6:	4831      	ldr	r0, [pc, #196]	; (800066c <ProcessRxMsg+0x1c8>)
 80005a8:	f000 f894 	bl	80006d4 <enviarACola>
				*instruccion_ok = 0;
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	2200      	movs	r2, #0
 80005b0:	701a      	strb	r2, [r3, #0]
				estadoActual = OCIOSO;
 80005b2:	4b2c      	ldr	r3, [pc, #176]	; (8000664 <ProcessRxMsg+0x1c0>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	701a      	strb	r2, [r3, #0]
		break;
 80005b8:	e04e      	b.n	8000658 <ProcessRxMsg+0x1b4>
		if (Cola_RetirarDatoCola (&cola_rx, &dato) != COLA_COLA_VACIA){
 80005ba:	f107 0317 	add.w	r3, r7, #23
 80005be:	4619      	mov	r1, r3
 80005c0:	4829      	ldr	r0, [pc, #164]	; (8000668 <ProcessRxMsg+0x1c4>)
 80005c2:	f000 f903 	bl	80007cc <Cola_RetirarDatoCola>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d046      	beq.n	800065a <ProcessRxMsg+0x1b6>
			tiempoRecepcionActual = HAL_GetTick();
 80005cc:	f000 fbea 	bl	8000da4 <HAL_GetTick>
 80005d0:	61f8      	str	r0, [r7, #28]
			if (dato == 0x0A){
 80005d2:	7dfb      	ldrb	r3, [r7, #23]
 80005d4:	2b0a      	cmp	r3, #10
 80005d6:	d117      	bne.n	8000608 <ProcessRxMsg+0x164>
				if(tiempoRecepcionActual - tiempoRecepcion0 < TMAX){
 80005d8:	69fa      	ldr	r2, [r7, #28]
 80005da:	69bb      	ldr	r3, [r7, #24]
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005e2:	d207      	bcs.n	80005f4 <ProcessRxMsg+0x150>
					enviarACola(MSG_OK,colaTx);
 80005e4:	6879      	ldr	r1, [r7, #4]
 80005e6:	4823      	ldr	r0, [pc, #140]	; (8000674 <ProcessRxMsg+0x1d0>)
 80005e8:	f000 f874 	bl	80006d4 <enviarACola>
					estadoActual = OCIOSO;
 80005ec:	4b1d      	ldr	r3, [pc, #116]	; (8000664 <ProcessRxMsg+0x1c0>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	701a      	strb	r2, [r3, #0]
}
 80005f2:	e032      	b.n	800065a <ProcessRxMsg+0x1b6>
					enviarACola(MSG_TIMEOUT,colaTx);
 80005f4:	6879      	ldr	r1, [r7, #4]
 80005f6:	481e      	ldr	r0, [pc, #120]	; (8000670 <ProcessRxMsg+0x1cc>)
 80005f8:	f000 f86c 	bl	80006d4 <enviarACola>
					instruccion_ok = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	603b      	str	r3, [r7, #0]
					estadoActual = OCIOSO;
 8000600:	4b18      	ldr	r3, [pc, #96]	; (8000664 <ProcessRxMsg+0x1c0>)
 8000602:	2200      	movs	r2, #0
 8000604:	701a      	strb	r2, [r3, #0]
}
 8000606:	e028      	b.n	800065a <ProcessRxMsg+0x1b6>
			}else if(dato == 1 || dato == 2 || dato == 3 || dato == 'S' || dato == 'O'){
 8000608:	7dfb      	ldrb	r3, [r7, #23]
 800060a:	2b01      	cmp	r3, #1
 800060c:	d00b      	beq.n	8000626 <ProcessRxMsg+0x182>
 800060e:	7dfb      	ldrb	r3, [r7, #23]
 8000610:	2b02      	cmp	r3, #2
 8000612:	d008      	beq.n	8000626 <ProcessRxMsg+0x182>
 8000614:	7dfb      	ldrb	r3, [r7, #23]
 8000616:	2b03      	cmp	r3, #3
 8000618:	d005      	beq.n	8000626 <ProcessRxMsg+0x182>
 800061a:	7dfb      	ldrb	r3, [r7, #23]
 800061c:	2b53      	cmp	r3, #83	; 0x53
 800061e:	d002      	beq.n	8000626 <ProcessRxMsg+0x182>
 8000620:	7dfb      	ldrb	r3, [r7, #23]
 8000622:	2b4f      	cmp	r3, #79	; 0x4f
 8000624:	d10c      	bne.n	8000640 <ProcessRxMsg+0x19c>
				enviarACola(MSG_ERROR,colaTx);
 8000626:	6879      	ldr	r1, [r7, #4]
 8000628:	4810      	ldr	r0, [pc, #64]	; (800066c <ProcessRxMsg+0x1c8>)
 800062a:	f000 f853 	bl	80006d4 <enviarACola>
				tiempoRecepcion0 = HAL_GetTick();	//cambios
 800062e:	f000 fbb9 	bl	8000da4 <HAL_GetTick>
 8000632:	61b8      	str	r0, [r7, #24]
				instruccion_ok = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	603b      	str	r3, [r7, #0]
				estadoActual = CARACTER_VALIDO_1;
 8000638:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <ProcessRxMsg+0x1c0>)
 800063a:	2201      	movs	r2, #1
 800063c:	701a      	strb	r2, [r3, #0]
 800063e:	e00c      	b.n	800065a <ProcessRxMsg+0x1b6>
				enviarACola(MSG_ERROR,colaTx);
 8000640:	6879      	ldr	r1, [r7, #4]
 8000642:	480a      	ldr	r0, [pc, #40]	; (800066c <ProcessRxMsg+0x1c8>)
 8000644:	f000 f846 	bl	80006d4 <enviarACola>
				instruccion_ok = 0;
 8000648:	2300      	movs	r3, #0
 800064a:	603b      	str	r3, [r7, #0]
				estadoActual = OCIOSO;
 800064c:	4b05      	ldr	r3, [pc, #20]	; (8000664 <ProcessRxMsg+0x1c0>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
}
 8000652:	e002      	b.n	800065a <ProcessRxMsg+0x1b6>
		break;
 8000654:	bf00      	nop
 8000656:	e000      	b.n	800065a <ProcessRxMsg+0x1b6>
		break;
 8000658:	bf00      	nop
}
 800065a:	bf00      	nop
 800065c:	3720      	adds	r7, #32
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	2000002e 	.word	0x2000002e
 8000668:	20000038 	.word	0x20000038
 800066c:	0800286c 	.word	0x0800286c
 8000670:	08002874 	.word	0x08002874
 8000674:	08002880 	.word	0x08002880

08000678 <SendData>:
TColaDato_Typedef buffer_tx[TX_COLA_MAX_BUFFER];
Cola_BaseStructTypedef cola_tx;

TColaDato_Typedef bufferOut[TX_COLA_MAX_BUFFER];

void SendData(UART_HandleTypeDef * huart, Cola_BaseStructTypedef * colaTx){
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	6039      	str	r1, [r7, #0]

	uint8_t dato;
	uint8_t i;
	//HAL_StatusTypeDef estados;
	uint8_t cantidad = Cola_CantidadEnCola(colaTx);
 8000682:	6838      	ldr	r0, [r7, #0]
 8000684:	f000 f866 	bl	8000754 <Cola_CantidadEnCola>
 8000688:	4603      	mov	r3, r0
 800068a:	73bb      	strb	r3, [r7, #14]
	if (cantidad>0){
 800068c:	7bbb      	ldrb	r3, [r7, #14]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d01a      	beq.n	80006c8 <SendData+0x50>
		for(i=0;i<cantidad;i++){
 8000692:	2300      	movs	r3, #0
 8000694:	73fb      	strb	r3, [r7, #15]
 8000696:	e00c      	b.n	80006b2 <SendData+0x3a>
				Cola_RetirarDatoCola(colaTx, &dato);
 8000698:	f107 030d 	add.w	r3, r7, #13
 800069c:	4619      	mov	r1, r3
 800069e:	6838      	ldr	r0, [r7, #0]
 80006a0:	f000 f894 	bl	80007cc <Cola_RetirarDatoCola>
				bufferOut[i] = dato;
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	7b79      	ldrb	r1, [r7, #13]
 80006a8:	4a09      	ldr	r2, [pc, #36]	; (80006d0 <SendData+0x58>)
 80006aa:	54d1      	strb	r1, [r2, r3]
		for(i=0;i<cantidad;i++){
 80006ac:	7bfb      	ldrb	r3, [r7, #15]
 80006ae:	3301      	adds	r3, #1
 80006b0:	73fb      	strb	r3, [r7, #15]
 80006b2:	7bfa      	ldrb	r2, [r7, #15]
 80006b4:	7bbb      	ldrb	r3, [r7, #14]
 80006b6:	429a      	cmp	r2, r3
 80006b8:	d3ee      	bcc.n	8000698 <SendData+0x20>

			}
		HAL_UART_Transmit_IT(huart, &(bufferOut[0]), cantidad);
 80006ba:	7bbb      	ldrb	r3, [r7, #14]
 80006bc:	b29b      	uxth	r3, r3
 80006be:	461a      	mov	r2, r3
 80006c0:	4903      	ldr	r1, [pc, #12]	; (80006d0 <SendData+0x58>)
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f001 fbfd 	bl	8001ec2 <HAL_UART_Transmit_IT>

			//( Cola_RetirarDatoCola(colaTx, &dato) != 0x00){
			//estados = HAL_UART_Transmit_IT(huart, &dato, 1);
			//HAL_UART_Transmit_IT(huart, &dato, 1);
	}
}
 80006c8:	bf00      	nop
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	2000006c 	.word	0x2000006c

080006d4 <enviarACola>:

//pasar esta funcion a send data, poner aca el include senddata.c (.h)
//poner en senddata la cola de tx y el buffer (perteneciente a la cola)


void enviarACola(char* cadena, Cola_BaseStructTypedef* colaTx){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	6039      	str	r1, [r7, #0]
//encapsular en enviarACola(MSG_ERROR,cola_tx);
//tal vez que sea bloqueante (que no lo pueda interrumpir otro proceso de llenado de cola)
	uint8_t i;
	uint8_t longitud = strlen(cadena);
 80006de:	6878      	ldr	r0, [r7, #4]
 80006e0:	f7ff fd34 	bl	800014c <strlen>
 80006e4:	4603      	mov	r3, r0
 80006e6:	73bb      	strb	r3, [r7, #14]
	if (longitud > 0){
 80006e8:	7bbb      	ldrb	r3, [r7, #14]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d011      	beq.n	8000712 <enviarACola+0x3e>
		for (i = 0; i<longitud; i++){
 80006ee:	2300      	movs	r3, #0
 80006f0:	73fb      	strb	r3, [r7, #15]
 80006f2:	e00a      	b.n	800070a <enviarACola+0x36>
			Cola_AgregarDatoCola (colaTx, cadena[i]);
 80006f4:	7bfb      	ldrb	r3, [r7, #15]
 80006f6:	687a      	ldr	r2, [r7, #4]
 80006f8:	4413      	add	r3, r2
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	4619      	mov	r1, r3
 80006fe:	6838      	ldr	r0, [r7, #0]
 8000700:	f000 f834 	bl	800076c <Cola_AgregarDatoCola>
		for (i = 0; i<longitud; i++){
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	3301      	adds	r3, #1
 8000708:	73fb      	strb	r3, [r7, #15]
 800070a:	7bfa      	ldrb	r2, [r7, #15]
 800070c:	7bbb      	ldrb	r3, [r7, #14]
 800070e:	429a      	cmp	r2, r3
 8000710:	d3f0      	bcc.n	80006f4 <enviarACola+0x20>
												// y metida al array "bytes"
	for (i = 0; i<longitud; i++){
		Cola_AgregarDatoCola (colaTx, bytes[i]);
	}
	*/
}
 8000712:	bf00      	nop
 8000714:	3710      	adds	r7, #16
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}

0800071a <Cola_InicializarCola>:
 * \details Se inicializa la estructura apuntada por s del tipo @ref Cola_BaseStructTypedef,
 * en particular se carga el puntero al buffer y la longitud de la cola.
 *
 */
void Cola_InicializarCola (Cola_BaseStructTypedef *s,TColaDato_Typedef *buf ,uint16_t Long)
{
 800071a:	b480      	push	{r7}
 800071c:	b085      	sub	sp, #20
 800071e:	af00      	add	r7, sp, #0
 8000720:	60f8      	str	r0, [r7, #12]
 8000722:	60b9      	str	r1, [r7, #8]
 8000724:	4613      	mov	r3, r2
 8000726:	80fb      	strh	r3, [r7, #6]
	s -> LongitudCola 	= Long;
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	88fa      	ldrh	r2, [r7, #6]
 800072c:	81da      	strh	r2, [r3, #14]
	s->CantidadCola 	= 0;
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	2200      	movs	r2, #0
 8000732:	819a      	strh	r2, [r3, #12]
	s->InicioCola		= buf;
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	68ba      	ldr	r2, [r7, #8]
 8000738:	601a      	str	r2, [r3, #0]
	s->EntradaCola 		= s->InicioCola;
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	605a      	str	r2, [r3, #4]
	s->SalidaCola 		= s->InicioCola;
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	609a      	str	r2, [r3, #8]
	return;
 800074a:	bf00      	nop
}
 800074c:	3714      	adds	r7, #20
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr

08000754 <Cola_CantidadEnCola>:
 * \param s Puntero a estructura del tipo @ref Cola_BaseStructTypedef.
 * \retval Devuelve la cantidad de datos en la cola.
 */

TColaDato_Typedef	Cola_CantidadEnCola(Cola_BaseStructTypedef *s)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
    return (s->CantidadCola);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	899b      	ldrh	r3, [r3, #12]
 8000760:	b2db      	uxtb	r3, r3
}
 8000762:	4618      	mov	r0, r3
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr

0800076c <Cola_AgregarDatoCola>:
  * 	- COLA_COLA_LLENA: Si la cola est� llena y no fue posible agregar el dato.
  * 	- COLA_COLA_OK: La operaci�n fue satisfactoria, el dato se agreg� a la cola.
  */

TColaStatus_Typedef	Cola_AgregarDatoCola (Cola_BaseStructTypedef *s,TColaDato_Typedef dato)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	460b      	mov	r3, r1
 8000776:	70fb      	strb	r3, [r7, #3]
	if( s->CantidadCola == s->LongitudCola)	// Condici�n de cola llena
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	899a      	ldrh	r2, [r3, #12]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	89db      	ldrh	r3, [r3, #14]
 8000780:	429a      	cmp	r2, r3
 8000782:	d101      	bne.n	8000788 <Cola_AgregarDatoCola+0x1c>
	{
		return COLA_COLA_LLENA;
 8000784:	2301      	movs	r3, #1
 8000786:	e01c      	b.n	80007c2 <Cola_AgregarDatoCola+0x56>
	}
	else
	{
		*(s->EntradaCola) = dato;			// Agrego el dato a la cola en la ubicacion del puntero EntradaCola
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	78fa      	ldrb	r2, [r7, #3]
 800078e:	701a      	strb	r2, [r3, #0]
		(s->EntradaCola)++;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	1c5a      	adds	r2, r3, #1
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	605a      	str	r2, [r3, #4]


		if ((s->EntradaCola) == (s->InicioCola + s->LongitudCola))	// Se incrementa el puntero de entrada y se pregunta si lleg� a la �ltima posici�n reservada de memoria
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	685a      	ldr	r2, [r3, #4]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	6879      	ldr	r1, [r7, #4]
 80007a4:	89c9      	ldrh	r1, [r1, #14]
 80007a6:	440b      	add	r3, r1
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d103      	bne.n	80007b4 <Cola_AgregarDatoCola+0x48>
		{
			s->EntradaCola = s->InicioCola;								// Si lleg� al final de la memoria reservada, comienza desde el principio (cola circular)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	605a      	str	r2, [r3, #4]
		}
		s->CantidadCola ++;				// Incremento el contador de datos en la cola
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	899b      	ldrh	r3, [r3, #12]
 80007b8:	3301      	adds	r3, #1
 80007ba:	b29a      	uxth	r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	819a      	strh	r2, [r3, #12]
		return COLA_OK;
 80007c0:	2302      	movs	r3, #2
	}
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr

080007cc <Cola_RetirarDatoCola>:
  *  - COLA_OK: Si fue factible retirar el dato.
  *  - COLA_VACIA: Si el no hay datos a retirar.
  */

TColaStatus_Typedef	Cola_RetirarDatoCola (Cola_BaseStructTypedef *s,TColaDato_Typedef *dato)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	6039      	str	r1, [r7, #0]
	if(s->CantidadCola)													// Ingresa si hay datos en la cola
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	899b      	ldrh	r3, [r3, #12]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d01e      	beq.n	800081c <Cola_RetirarDatoCola+0x50>
	{
		*dato = *(s->SalidaCola);											// Retiro el dato correspondiente a la ubicacion de salidaCola
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	689b      	ldr	r3, [r3, #8]
 80007e2:	781a      	ldrb	r2, [r3, #0]
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	701a      	strb	r2, [r3, #0]
		(s->SalidaCola)++;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	689b      	ldr	r3, [r3, #8]
 80007ec:	1c5a      	adds	r2, r3, #1
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	609a      	str	r2, [r3, #8]

		if ((s->SalidaCola) == (s->InicioCola + s->LongitudCola))	// Verifica que el puntero no est� al final de la cola
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	689a      	ldr	r2, [r3, #8]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	6879      	ldr	r1, [r7, #4]
 80007fc:	89c9      	ldrh	r1, [r1, #14]
 80007fe:	440b      	add	r3, r1
 8000800:	429a      	cmp	r2, r3
 8000802:	d103      	bne.n	800080c <Cola_RetirarDatoCola+0x40>
		{
			s->SalidaCola = s->InicioCola;								// Si es asi, la inicializa al principio (Cola circular)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	609a      	str	r2, [r3, #8]
		}
		s->CantidadCola --;												// Decremento la cantidad de datos en la cola
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	899b      	ldrh	r3, [r3, #12]
 8000810:	3b01      	subs	r3, #1
 8000812:	b29a      	uxth	r2, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	819a      	strh	r2, [r3, #12]
		return COLA_OK;
 8000818:	2302      	movs	r3, #2
 800081a:	e000      	b.n	800081e <Cola_RetirarDatoCola+0x52>
	}
	else
	{
		return COLA_COLA_VACIA;
 800081c:	2300      	movs	r3, #0
	}
}
 800081e:	4618      	mov	r0, r3
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr

08000828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800082c:	f000 fa62 	bl	8000cf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000830:	f000 f84e 	bl	80008d0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  Cola_InicializarCola(&cola_tx, buffer_tx, MAX_BUFFER);
 8000834:	220a      	movs	r2, #10
 8000836:	491e      	ldr	r1, [pc, #120]	; (80008b0 <main+0x88>)
 8000838:	481e      	ldr	r0, [pc, #120]	; (80008b4 <main+0x8c>)
 800083a:	f7ff ff6e 	bl	800071a <Cola_InicializarCola>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083e:	f000 f8ad 	bl	800099c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000842:	f000 f881 	bl	8000948 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ProcessRxMsg_Init();
 8000846:	f7ff fe1b 	bl	8000480 <ProcessRxMsg_Init>
  LedSequence_init();
 800084a:	f7ff fd75 	bl	8000338 <LedSequence_init>
  CountingHandler_init(&pulseCount, &flagPulso);
 800084e:	491a      	ldr	r1, [pc, #104]	; (80008b8 <main+0x90>)
 8000850:	481a      	ldr	r0, [pc, #104]	; (80008bc <main+0x94>)
 8000852:	f7ff fc83 	bl	800015c <CountingHandler_init>
  HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8000856:	2201      	movs	r2, #1
 8000858:	4919      	ldr	r1, [pc, #100]	; (80008c0 <main+0x98>)
 800085a:	481a      	ldr	r0, [pc, #104]	; (80008c4 <main+0x9c>)
 800085c:	f001 fb75 	bl	8001f4a <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart1, (uint8_t *)MENSAJE_BIENVENIDA, strlen(MENSAJE_BIENVENIDA), 1000);
 8000860:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000864:	2219      	movs	r2, #25
 8000866:	4918      	ldr	r1, [pc, #96]	; (80008c8 <main+0xa0>)
 8000868:	4816      	ldr	r0, [pc, #88]	; (80008c4 <main+0x9c>)
 800086a:	f001 fa98 	bl	8001d9e <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  instruccion_ok = 0;
 800086e:	4b17      	ldr	r3, [pc, #92]	; (80008cc <main+0xa4>)
 8000870:	2200      	movs	r2, #0
 8000872:	701a      	strb	r2, [r3, #0]
 // while (1)
	//  ProcessRxMsg(&huart1, &rx_data, &cola_tx, &instruccion_ok);
  while (1)
  {
	  ProcessRxMsg(&huart1, &rx_data, &cola_tx, &instruccion_ok);
 8000874:	4b15      	ldr	r3, [pc, #84]	; (80008cc <main+0xa4>)
 8000876:	4a0f      	ldr	r2, [pc, #60]	; (80008b4 <main+0x8c>)
 8000878:	4911      	ldr	r1, [pc, #68]	; (80008c0 <main+0x98>)
 800087a:	4812      	ldr	r0, [pc, #72]	; (80008c4 <main+0x9c>)
 800087c:	f7ff fe12 	bl	80004a4 <ProcessRxMsg>

	  LedHandler(&instruccion_ok);
 8000880:	4812      	ldr	r0, [pc, #72]	; (80008cc <main+0xa4>)
 8000882:	f7ff fcb5 	bl	80001f0 <LedHandler>
	  if (GetFlag()==1){
 8000886:	f7ff fca9 	bl	80001dc <GetFlag>
 800088a:	4603      	mov	r3, r0
 800088c:	2b01      	cmp	r3, #1
 800088e:	d101      	bne.n	8000894 <main+0x6c>
		  LedSequence();
 8000890:	f7ff fd76 	bl	8000380 <LedSequence>
	  }

	  SendData(&huart1, &cola_tx);
 8000894:	4907      	ldr	r1, [pc, #28]	; (80008b4 <main+0x8c>)
 8000896:	480b      	ldr	r0, [pc, #44]	; (80008c4 <main+0x9c>)
 8000898:	f7ff feee 	bl	8000678 <SendData>

	  if (flagPulso == 1){
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <main+0x90>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d0e7      	beq.n	8000874 <main+0x4c>
		  CountingHandler(&pulseCount, &flagPulso);
 80008a4:	4904      	ldr	r1, [pc, #16]	; (80008b8 <main+0x90>)
 80008a6:	4805      	ldr	r0, [pc, #20]	; (80008bc <main+0x94>)
 80008a8:	f7ff fc68 	bl	800017c <CountingHandler>
	  ProcessRxMsg(&huart1, &rx_data, &cola_tx, &instruccion_ok);
 80008ac:	e7e2      	b.n	8000874 <main+0x4c>
 80008ae:	bf00      	nop
 80008b0:	20000048 	.word	0x20000048
 80008b4:	2000005c 	.word	0x2000005c
 80008b8:	200000d2 	.word	0x200000d2
 80008bc:	200000d0 	.word	0x200000d0
 80008c0:	200000c4 	.word	0x200000c4
 80008c4:	20000080 	.word	0x20000080
 80008c8:	08002884 	.word	0x08002884
 80008cc:	200000c5 	.word	0x200000c5

080008d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b090      	sub	sp, #64	; 0x40
 80008d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d6:	f107 0318 	add.w	r3, r7, #24
 80008da:	2228      	movs	r2, #40	; 0x28
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f001 ff8c 	bl	80027fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
 80008f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008f2:	2302      	movs	r3, #2
 80008f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008f6:	2301      	movs	r3, #1
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008fa:	2310      	movs	r3, #16
 80008fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008fe:	2300      	movs	r3, #0
 8000900:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000902:	f107 0318 	add.w	r3, r7, #24
 8000906:	4618      	mov	r0, r3
 8000908:	f000 fde2 	bl	80014d0 <HAL_RCC_OscConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000912:	f000 f8a5 	bl	8000a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000916:	230f      	movs	r3, #15
 8000918:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800091a:	2300      	movs	r3, #0
 800091c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	2100      	movs	r1, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f001 f850 	bl	80019d4 <HAL_RCC_ClockConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800093a:	f000 f891 	bl	8000a60 <Error_Handler>
  }
}
 800093e:	bf00      	nop
 8000940:	3740      	adds	r7, #64	; 0x40
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
	...

08000948 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800094c:	4b11      	ldr	r3, [pc, #68]	; (8000994 <MX_USART1_UART_Init+0x4c>)
 800094e:	4a12      	ldr	r2, [pc, #72]	; (8000998 <MX_USART1_UART_Init+0x50>)
 8000950:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <MX_USART1_UART_Init+0x4c>)
 8000954:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000958:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <MX_USART1_UART_Init+0x4c>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000960:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <MX_USART1_UART_Init+0x4c>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <MX_USART1_UART_Init+0x4c>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800096c:	4b09      	ldr	r3, [pc, #36]	; (8000994 <MX_USART1_UART_Init+0x4c>)
 800096e:	220c      	movs	r2, #12
 8000970:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000972:	4b08      	ldr	r3, [pc, #32]	; (8000994 <MX_USART1_UART_Init+0x4c>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <MX_USART1_UART_Init+0x4c>)
 800097a:	2200      	movs	r2, #0
 800097c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800097e:	4805      	ldr	r0, [pc, #20]	; (8000994 <MX_USART1_UART_Init+0x4c>)
 8000980:	f001 f9c0 	bl	8001d04 <HAL_UART_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800098a:	f000 f869 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000080 	.word	0x20000080
 8000998:	40013800 	.word	0x40013800

0800099c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b088      	sub	sp, #32
 80009a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a2:	f107 0310 	add.w	r3, r7, #16
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b0:	4b28      	ldr	r3, [pc, #160]	; (8000a54 <MX_GPIO_Init+0xb8>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	4a27      	ldr	r2, [pc, #156]	; (8000a54 <MX_GPIO_Init+0xb8>)
 80009b6:	f043 0320 	orr.w	r3, r3, #32
 80009ba:	6193      	str	r3, [r2, #24]
 80009bc:	4b25      	ldr	r3, [pc, #148]	; (8000a54 <MX_GPIO_Init+0xb8>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	f003 0320 	and.w	r3, r3, #32
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c8:	4b22      	ldr	r3, [pc, #136]	; (8000a54 <MX_GPIO_Init+0xb8>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	4a21      	ldr	r2, [pc, #132]	; (8000a54 <MX_GPIO_Init+0xb8>)
 80009ce:	f043 0308 	orr.w	r3, r3, #8
 80009d2:	6193      	str	r3, [r2, #24]
 80009d4:	4b1f      	ldr	r3, [pc, #124]	; (8000a54 <MX_GPIO_Init+0xb8>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	f003 0308 	and.w	r3, r3, #8
 80009dc:	60bb      	str	r3, [r7, #8]
 80009de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e0:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <MX_GPIO_Init+0xb8>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	4a1b      	ldr	r2, [pc, #108]	; (8000a54 <MX_GPIO_Init+0xb8>)
 80009e6:	f043 0304 	orr.w	r3, r3, #4
 80009ea:	6193      	str	r3, [r2, #24]
 80009ec:	4b19      	ldr	r3, [pc, #100]	; (8000a54 <MX_GPIO_Init+0xb8>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	f003 0304 	and.w	r3, r3, #4
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 80009f8:	2201      	movs	r2, #1
 80009fa:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80009fe:	4816      	ldr	r0, [pc, #88]	; (8000a58 <MX_GPIO_Init+0xbc>)
 8000a00:	f000 fd1c 	bl	800143c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a04:	2302      	movs	r3, #2
 8000a06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a08:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <MX_GPIO_Init+0xc0>)
 8000a0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a10:	f107 0310 	add.w	r3, r7, #16
 8000a14:	4619      	mov	r1, r3
 8000a16:	4810      	ldr	r0, [pc, #64]	; (8000a58 <MX_GPIO_Init+0xbc>)
 8000a18:	f000 fb8c 	bl	8001134 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a1c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000a20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a22:	2301      	movs	r3, #1
 8000a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2e:	f107 0310 	add.w	r3, r7, #16
 8000a32:	4619      	mov	r1, r3
 8000a34:	4808      	ldr	r0, [pc, #32]	; (8000a58 <MX_GPIO_Init+0xbc>)
 8000a36:	f000 fb7d 	bl	8001134 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	2007      	movs	r0, #7
 8000a40:	f000 fa91 	bl	8000f66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000a44:	2007      	movs	r0, #7
 8000a46:	f000 faaa 	bl	8000f9e <HAL_NVIC_EnableIRQ>
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);

/* USER CODE END MX_GPIO_Init_2 */
}
 8000a4a:	bf00      	nop
 8000a4c:	3720      	adds	r7, #32
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40021000 	.word	0x40021000
 8000a58:	40010c00 	.word	0x40010c00
 8000a5c:	10210000 	.word	0x10210000

08000a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a64:	b672      	cpsid	i
}
 8000a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <Error_Handler+0x8>
	...

08000a6c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	80fb      	strh	r3, [r7, #6]

  milisegundosActuales = HAL_GetTick();
 8000a76:	f000 f995 	bl	8000da4 <HAL_GetTick>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	4a0e      	ldr	r2, [pc, #56]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000a7e:	6013      	str	r3, [r2, #0]
  if (GPIO_Pin == GPIO_PIN_1 && (milisegundosActuales - milisegundosDebounce > 200))
 8000a80:	88fb      	ldrh	r3, [r7, #6]
 8000a82:	2b02      	cmp	r3, #2
 8000a84:	d113      	bne.n	8000aae <HAL_GPIO_EXTI_Callback+0x42>
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <HAL_GPIO_EXTI_Callback+0x50>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	1ad3      	subs	r3, r2, r3
 8000a90:	2bc8      	cmp	r3, #200	; 0xc8
 8000a92:	d90c      	bls.n	8000aae <HAL_GPIO_EXTI_Callback+0x42>
  {
	pulseCount = pulseCount +1;
 8000a94:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000a96:	881b      	ldrh	r3, [r3, #0]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000a9e:	801a      	strh	r2, [r3, #0]
	flagPulso = 1;
 8000aa0:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x58>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	701a      	strb	r2, [r3, #0]
    milisegundosDebounce = milisegundosActuales;
 8000aa6:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a04      	ldr	r2, [pc, #16]	; (8000abc <HAL_GPIO_EXTI_Callback+0x50>)
 8000aac:	6013      	str	r3, [r2, #0]
  }

}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	200000cc 	.word	0x200000cc
 8000abc:	200000c8 	.word	0x200000c8
 8000ac0:	200000d0 	.word	0x200000d0
 8000ac4:	200000d2 	.word	0x200000d2

08000ac8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]

	TColaDato_Typedef dato;
	dato = rx_data;
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <HAL_UART_RxCpltCallback+0x2c>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	73fb      	strb	r3, [r7, #15]
	Cola_AgregarDatoCola (&cola_rx, dato);
 8000ad6:	7bfb      	ldrb	r3, [r7, #15]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4807      	ldr	r0, [pc, #28]	; (8000af8 <HAL_UART_RxCpltCallback+0x30>)
 8000adc:	f7ff fe46 	bl	800076c <Cola_AgregarDatoCola>
	HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	4904      	ldr	r1, [pc, #16]	; (8000af4 <HAL_UART_RxCpltCallback+0x2c>)
 8000ae4:	4805      	ldr	r0, [pc, #20]	; (8000afc <HAL_UART_RxCpltCallback+0x34>)
 8000ae6:	f001 fa30 	bl	8001f4a <HAL_UART_Receive_IT>
}
 8000aea:	bf00      	nop
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	200000c4 	.word	0x200000c4
 8000af8:	20000038 	.word	0x20000038
 8000afc:	20000080 	.word	0x20000080

08000b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b06:	4b19      	ldr	r3, [pc, #100]	; (8000b6c <HAL_MspInit+0x6c>)
 8000b08:	699b      	ldr	r3, [r3, #24]
 8000b0a:	4a18      	ldr	r2, [pc, #96]	; (8000b6c <HAL_MspInit+0x6c>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	6193      	str	r3, [r2, #24]
 8000b12:	4b16      	ldr	r3, [pc, #88]	; (8000b6c <HAL_MspInit+0x6c>)
 8000b14:	699b      	ldr	r3, [r3, #24]
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1e:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <HAL_MspInit+0x6c>)
 8000b20:	69db      	ldr	r3, [r3, #28]
 8000b22:	4a12      	ldr	r2, [pc, #72]	; (8000b6c <HAL_MspInit+0x6c>)
 8000b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b28:	61d3      	str	r3, [r2, #28]
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <HAL_MspInit+0x6c>)
 8000b2c:	69db      	ldr	r3, [r3, #28]
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2100      	movs	r1, #0
 8000b3a:	2005      	movs	r0, #5
 8000b3c:	f000 fa13 	bl	8000f66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000b40:	2005      	movs	r0, #5
 8000b42:	f000 fa2c 	bl	8000f9e <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b46:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <HAL_MspInit+0x70>)
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <HAL_MspInit+0x70>)
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b62:	bf00      	nop
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	40010000 	.word	0x40010000

08000b74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b088      	sub	sp, #32
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 0310 	add.w	r3, r7, #16
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a20      	ldr	r2, [pc, #128]	; (8000c10 <HAL_UART_MspInit+0x9c>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d139      	bne.n	8000c08 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b94:	4b1f      	ldr	r3, [pc, #124]	; (8000c14 <HAL_UART_MspInit+0xa0>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	4a1e      	ldr	r2, [pc, #120]	; (8000c14 <HAL_UART_MspInit+0xa0>)
 8000b9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b9e:	6193      	str	r3, [r2, #24]
 8000ba0:	4b1c      	ldr	r3, [pc, #112]	; (8000c14 <HAL_UART_MspInit+0xa0>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bac:	4b19      	ldr	r3, [pc, #100]	; (8000c14 <HAL_UART_MspInit+0xa0>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	4a18      	ldr	r2, [pc, #96]	; (8000c14 <HAL_UART_MspInit+0xa0>)
 8000bb2:	f043 0304 	orr.w	r3, r3, #4
 8000bb6:	6193      	str	r3, [r2, #24]
 8000bb8:	4b16      	ldr	r3, [pc, #88]	; (8000c14 <HAL_UART_MspInit+0xa0>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	f003 0304 	and.w	r3, r3, #4
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bc8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd2:	f107 0310 	add.w	r3, r7, #16
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	480f      	ldr	r0, [pc, #60]	; (8000c18 <HAL_UART_MspInit+0xa4>)
 8000bda:	f000 faab 	bl	8001134 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000be2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bec:	f107 0310 	add.w	r3, r7, #16
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4809      	ldr	r0, [pc, #36]	; (8000c18 <HAL_UART_MspInit+0xa4>)
 8000bf4:	f000 fa9e 	bl	8001134 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	2025      	movs	r0, #37	; 0x25
 8000bfe:	f000 f9b2 	bl	8000f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c02:	2025      	movs	r0, #37	; 0x25
 8000c04:	f000 f9cb 	bl	8000f9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c08:	bf00      	nop
 8000c0a:	3720      	adds	r7, #32
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40013800 	.word	0x40013800
 8000c14:	40021000 	.word	0x40021000
 8000c18:	40010800 	.word	0x40010800

08000c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <NMI_Handler+0x4>

08000c22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c26:	e7fe      	b.n	8000c26 <HardFault_Handler+0x4>

08000c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <MemManage_Handler+0x4>

08000c2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <BusFault_Handler+0x4>

08000c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <UsageFault_Handler+0x4>

08000c3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr

08000c46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bc80      	pop	{r7}
 8000c50:	4770      	bx	lr

08000c52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr

08000c5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c62:	f000 f88d 	bl	8000d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr
	...

08000c78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c7c:	4802      	ldr	r0, [pc, #8]	; (8000c88 <USART1_IRQHandler+0x10>)
 8000c7e:	f001 f995 	bl	8001fac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000080 	.word	0x20000080

08000c8c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000c90:	2002      	movs	r0, #2
 8000c92:	f000 fc05 	bl	80014a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc80      	pop	{r7}
 8000ca4:	4770      	bx	lr
	...

08000ca8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ca8:	480c      	ldr	r0, [pc, #48]	; (8000cdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000caa:	490d      	ldr	r1, [pc, #52]	; (8000ce0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cac:	4a0d      	ldr	r2, [pc, #52]	; (8000ce4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb0:	e002      	b.n	8000cb8 <LoopCopyDataInit>

08000cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb6:	3304      	adds	r3, #4

08000cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cbc:	d3f9      	bcc.n	8000cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cbe:	4a0a      	ldr	r2, [pc, #40]	; (8000ce8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cc0:	4c0a      	ldr	r4, [pc, #40]	; (8000cec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc4:	e001      	b.n	8000cca <LoopFillZerobss>

08000cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc8:	3204      	adds	r2, #4

08000cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ccc:	d3fb      	bcc.n	8000cc6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000cce:	f7ff ffe4 	bl	8000c9a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cd2:	f001 fd9b 	bl	800280c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cd6:	f7ff fda7 	bl	8000828 <main>
  bx lr
 8000cda:	4770      	bx	lr
  ldr r0, =_sdata
 8000cdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ce4:	080028d0 	.word	0x080028d0
  ldr r2, =_sbss
 8000ce8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cec:	200000d8 	.word	0x200000d8

08000cf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cf0:	e7fe      	b.n	8000cf0 <ADC1_2_IRQHandler>
	...

08000cf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <HAL_Init+0x28>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a07      	ldr	r2, [pc, #28]	; (8000d1c <HAL_Init+0x28>)
 8000cfe:	f043 0310 	orr.w	r3, r3, #16
 8000d02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d04:	2003      	movs	r0, #3
 8000d06:	f000 f923 	bl	8000f50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d0a:	200f      	movs	r0, #15
 8000d0c:	f000 f808 	bl	8000d20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d10:	f7ff fef6 	bl	8000b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40022000 	.word	0x40022000

08000d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d28:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <HAL_InitTick+0x54>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <HAL_InitTick+0x58>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	4619      	mov	r1, r3
 8000d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 f93b 	bl	8000fba <HAL_SYSTICK_Config>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e00e      	b.n	8000d6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2b0f      	cmp	r3, #15
 8000d52:	d80a      	bhi.n	8000d6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d54:	2200      	movs	r2, #0
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	f04f 30ff 	mov.w	r0, #4294967295
 8000d5c:	f000 f903 	bl	8000f66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d60:	4a06      	ldr	r2, [pc, #24]	; (8000d7c <HAL_InitTick+0x5c>)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d66:	2300      	movs	r3, #0
 8000d68:	e000      	b.n	8000d6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000000 	.word	0x20000000
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	20000004 	.word	0x20000004

08000d80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d84:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <HAL_IncTick+0x1c>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <HAL_IncTick+0x20>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4413      	add	r3, r2
 8000d90:	4a03      	ldr	r2, [pc, #12]	; (8000da0 <HAL_IncTick+0x20>)
 8000d92:	6013      	str	r3, [r2, #0]
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr
 8000d9c:	20000008 	.word	0x20000008
 8000da0:	200000d4 	.word	0x200000d4

08000da4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return uwTick;
 8000da8:	4b02      	ldr	r3, [pc, #8]	; (8000db4 <HAL_GetTick+0x10>)
 8000daa:	681b      	ldr	r3, [r3, #0]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr
 8000db4:	200000d4 	.word	0x200000d4

08000db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dea:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	60d3      	str	r3, [r2, #12]
}
 8000df0:	bf00      	nop
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e04:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <__NVIC_GetPriorityGrouping+0x18>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	0a1b      	lsrs	r3, r3, #8
 8000e0a:	f003 0307 	and.w	r3, r3, #7
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	db0b      	blt.n	8000e46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	f003 021f 	and.w	r2, r3, #31
 8000e34:	4906      	ldr	r1, [pc, #24]	; (8000e50 <__NVIC_EnableIRQ+0x34>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	095b      	lsrs	r3, r3, #5
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr
 8000e50:	e000e100 	.word	0xe000e100

08000e54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	6039      	str	r1, [r7, #0]
 8000e5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	db0a      	blt.n	8000e7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	490c      	ldr	r1, [pc, #48]	; (8000ea0 <__NVIC_SetPriority+0x4c>)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	0112      	lsls	r2, r2, #4
 8000e74:	b2d2      	uxtb	r2, r2
 8000e76:	440b      	add	r3, r1
 8000e78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e7c:	e00a      	b.n	8000e94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	4908      	ldr	r1, [pc, #32]	; (8000ea4 <__NVIC_SetPriority+0x50>)
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	f003 030f 	and.w	r3, r3, #15
 8000e8a:	3b04      	subs	r3, #4
 8000e8c:	0112      	lsls	r2, r2, #4
 8000e8e:	b2d2      	uxtb	r2, r2
 8000e90:	440b      	add	r3, r1
 8000e92:	761a      	strb	r2, [r3, #24]
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000e100 	.word	0xe000e100
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b089      	sub	sp, #36	; 0x24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	f1c3 0307 	rsb	r3, r3, #7
 8000ec2:	2b04      	cmp	r3, #4
 8000ec4:	bf28      	it	cs
 8000ec6:	2304      	movcs	r3, #4
 8000ec8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3304      	adds	r3, #4
 8000ece:	2b06      	cmp	r3, #6
 8000ed0:	d902      	bls.n	8000ed8 <NVIC_EncodePriority+0x30>
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3b03      	subs	r3, #3
 8000ed6:	e000      	b.n	8000eda <NVIC_EncodePriority+0x32>
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000edc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43da      	mvns	r2, r3
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	401a      	ands	r2, r3
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8000efa:	43d9      	mvns	r1, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f00:	4313      	orrs	r3, r2
         );
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3724      	adds	r7, #36	; 0x24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr

08000f0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f1c:	d301      	bcc.n	8000f22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e00f      	b.n	8000f42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f22:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <SysTick_Config+0x40>)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f2a:	210f      	movs	r1, #15
 8000f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f30:	f7ff ff90 	bl	8000e54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <SysTick_Config+0x40>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f3a:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <SysTick_Config+0x40>)
 8000f3c:	2207      	movs	r2, #7
 8000f3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	e000e010 	.word	0xe000e010

08000f50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff ff2d 	bl	8000db8 <__NVIC_SetPriorityGrouping>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b086      	sub	sp, #24
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	60b9      	str	r1, [r7, #8]
 8000f70:	607a      	str	r2, [r7, #4]
 8000f72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f78:	f7ff ff42 	bl	8000e00 <__NVIC_GetPriorityGrouping>
 8000f7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	68b9      	ldr	r1, [r7, #8]
 8000f82:	6978      	ldr	r0, [r7, #20]
 8000f84:	f7ff ff90 	bl	8000ea8 <NVIC_EncodePriority>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8e:	4611      	mov	r1, r2
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff5f 	bl	8000e54 <__NVIC_SetPriority>
}
 8000f96:	bf00      	nop
 8000f98:	3718      	adds	r7, #24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ff35 	bl	8000e1c <__NVIC_EnableIRQ>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff ffa2 	bl	8000f0c <SysTick_Config>
 8000fc8:	4603      	mov	r3, r0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	b085      	sub	sp, #20
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d008      	beq.n	8000ffa <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2204      	movs	r2, #4
 8000fec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e020      	b.n	800103c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f022 020e 	bic.w	r2, r2, #14
 8001008:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f022 0201 	bic.w	r2, r2, #1
 8001018:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001022:	2101      	movs	r1, #1
 8001024:	fa01 f202 	lsl.w	r2, r1, r2
 8001028:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2201      	movs	r2, #1
 800102e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800103a:	7bfb      	ldrb	r3, [r7, #15]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr
	...

08001048 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001050:	2300      	movs	r3, #0
 8001052:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800105a:	2b02      	cmp	r3, #2
 800105c:	d005      	beq.n	800106a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2204      	movs	r2, #4
 8001062:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	73fb      	strb	r3, [r7, #15]
 8001068:	e051      	b.n	800110e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f022 020e 	bic.w	r2, r2, #14
 8001078:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f022 0201 	bic.w	r2, r2, #1
 8001088:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a22      	ldr	r2, [pc, #136]	; (8001118 <HAL_DMA_Abort_IT+0xd0>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d029      	beq.n	80010e8 <HAL_DMA_Abort_IT+0xa0>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a20      	ldr	r2, [pc, #128]	; (800111c <HAL_DMA_Abort_IT+0xd4>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d022      	beq.n	80010e4 <HAL_DMA_Abort_IT+0x9c>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a1f      	ldr	r2, [pc, #124]	; (8001120 <HAL_DMA_Abort_IT+0xd8>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d01a      	beq.n	80010de <HAL_DMA_Abort_IT+0x96>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a1d      	ldr	r2, [pc, #116]	; (8001124 <HAL_DMA_Abort_IT+0xdc>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d012      	beq.n	80010d8 <HAL_DMA_Abort_IT+0x90>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a1c      	ldr	r2, [pc, #112]	; (8001128 <HAL_DMA_Abort_IT+0xe0>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d00a      	beq.n	80010d2 <HAL_DMA_Abort_IT+0x8a>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a1a      	ldr	r2, [pc, #104]	; (800112c <HAL_DMA_Abort_IT+0xe4>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d102      	bne.n	80010cc <HAL_DMA_Abort_IT+0x84>
 80010c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80010ca:	e00e      	b.n	80010ea <HAL_DMA_Abort_IT+0xa2>
 80010cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010d0:	e00b      	b.n	80010ea <HAL_DMA_Abort_IT+0xa2>
 80010d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010d6:	e008      	b.n	80010ea <HAL_DMA_Abort_IT+0xa2>
 80010d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010dc:	e005      	b.n	80010ea <HAL_DMA_Abort_IT+0xa2>
 80010de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010e2:	e002      	b.n	80010ea <HAL_DMA_Abort_IT+0xa2>
 80010e4:	2310      	movs	r3, #16
 80010e6:	e000      	b.n	80010ea <HAL_DMA_Abort_IT+0xa2>
 80010e8:	2301      	movs	r3, #1
 80010ea:	4a11      	ldr	r2, [pc, #68]	; (8001130 <HAL_DMA_Abort_IT+0xe8>)
 80010ec:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2201      	movs	r2, #1
 80010f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	4798      	blx	r3
    } 
  }
  return status;
 800110e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40020008 	.word	0x40020008
 800111c:	4002001c 	.word	0x4002001c
 8001120:	40020030 	.word	0x40020030
 8001124:	40020044 	.word	0x40020044
 8001128:	40020058 	.word	0x40020058
 800112c:	4002006c 	.word	0x4002006c
 8001130:	40020000 	.word	0x40020000

08001134 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001134:	b480      	push	{r7}
 8001136:	b08b      	sub	sp, #44	; 0x2c
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800113e:	2300      	movs	r3, #0
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001142:	2300      	movs	r3, #0
 8001144:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001146:	e169      	b.n	800141c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001148:	2201      	movs	r2, #1
 800114a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	69fa      	ldr	r2, [r7, #28]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	429a      	cmp	r2, r3
 8001162:	f040 8158 	bne.w	8001416 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	4a9a      	ldr	r2, [pc, #616]	; (80013d4 <HAL_GPIO_Init+0x2a0>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d05e      	beq.n	800122e <HAL_GPIO_Init+0xfa>
 8001170:	4a98      	ldr	r2, [pc, #608]	; (80013d4 <HAL_GPIO_Init+0x2a0>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d875      	bhi.n	8001262 <HAL_GPIO_Init+0x12e>
 8001176:	4a98      	ldr	r2, [pc, #608]	; (80013d8 <HAL_GPIO_Init+0x2a4>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d058      	beq.n	800122e <HAL_GPIO_Init+0xfa>
 800117c:	4a96      	ldr	r2, [pc, #600]	; (80013d8 <HAL_GPIO_Init+0x2a4>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d86f      	bhi.n	8001262 <HAL_GPIO_Init+0x12e>
 8001182:	4a96      	ldr	r2, [pc, #600]	; (80013dc <HAL_GPIO_Init+0x2a8>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d052      	beq.n	800122e <HAL_GPIO_Init+0xfa>
 8001188:	4a94      	ldr	r2, [pc, #592]	; (80013dc <HAL_GPIO_Init+0x2a8>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d869      	bhi.n	8001262 <HAL_GPIO_Init+0x12e>
 800118e:	4a94      	ldr	r2, [pc, #592]	; (80013e0 <HAL_GPIO_Init+0x2ac>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d04c      	beq.n	800122e <HAL_GPIO_Init+0xfa>
 8001194:	4a92      	ldr	r2, [pc, #584]	; (80013e0 <HAL_GPIO_Init+0x2ac>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d863      	bhi.n	8001262 <HAL_GPIO_Init+0x12e>
 800119a:	4a92      	ldr	r2, [pc, #584]	; (80013e4 <HAL_GPIO_Init+0x2b0>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d046      	beq.n	800122e <HAL_GPIO_Init+0xfa>
 80011a0:	4a90      	ldr	r2, [pc, #576]	; (80013e4 <HAL_GPIO_Init+0x2b0>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d85d      	bhi.n	8001262 <HAL_GPIO_Init+0x12e>
 80011a6:	2b12      	cmp	r3, #18
 80011a8:	d82a      	bhi.n	8001200 <HAL_GPIO_Init+0xcc>
 80011aa:	2b12      	cmp	r3, #18
 80011ac:	d859      	bhi.n	8001262 <HAL_GPIO_Init+0x12e>
 80011ae:	a201      	add	r2, pc, #4	; (adr r2, 80011b4 <HAL_GPIO_Init+0x80>)
 80011b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b4:	0800122f 	.word	0x0800122f
 80011b8:	08001209 	.word	0x08001209
 80011bc:	0800121b 	.word	0x0800121b
 80011c0:	0800125d 	.word	0x0800125d
 80011c4:	08001263 	.word	0x08001263
 80011c8:	08001263 	.word	0x08001263
 80011cc:	08001263 	.word	0x08001263
 80011d0:	08001263 	.word	0x08001263
 80011d4:	08001263 	.word	0x08001263
 80011d8:	08001263 	.word	0x08001263
 80011dc:	08001263 	.word	0x08001263
 80011e0:	08001263 	.word	0x08001263
 80011e4:	08001263 	.word	0x08001263
 80011e8:	08001263 	.word	0x08001263
 80011ec:	08001263 	.word	0x08001263
 80011f0:	08001263 	.word	0x08001263
 80011f4:	08001263 	.word	0x08001263
 80011f8:	08001211 	.word	0x08001211
 80011fc:	08001225 	.word	0x08001225
 8001200:	4a79      	ldr	r2, [pc, #484]	; (80013e8 <HAL_GPIO_Init+0x2b4>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d013      	beq.n	800122e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001206:	e02c      	b.n	8001262 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	623b      	str	r3, [r7, #32]
          break;
 800120e:	e029      	b.n	8001264 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	3304      	adds	r3, #4
 8001216:	623b      	str	r3, [r7, #32]
          break;
 8001218:	e024      	b.n	8001264 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	3308      	adds	r3, #8
 8001220:	623b      	str	r3, [r7, #32]
          break;
 8001222:	e01f      	b.n	8001264 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	330c      	adds	r3, #12
 800122a:	623b      	str	r3, [r7, #32]
          break;
 800122c:	e01a      	b.n	8001264 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d102      	bne.n	800123c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001236:	2304      	movs	r3, #4
 8001238:	623b      	str	r3, [r7, #32]
          break;
 800123a:	e013      	b.n	8001264 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d105      	bne.n	8001250 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001244:	2308      	movs	r3, #8
 8001246:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	69fa      	ldr	r2, [r7, #28]
 800124c:	611a      	str	r2, [r3, #16]
          break;
 800124e:	e009      	b.n	8001264 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001250:	2308      	movs	r3, #8
 8001252:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	69fa      	ldr	r2, [r7, #28]
 8001258:	615a      	str	r2, [r3, #20]
          break;
 800125a:	e003      	b.n	8001264 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800125c:	2300      	movs	r3, #0
 800125e:	623b      	str	r3, [r7, #32]
          break;
 8001260:	e000      	b.n	8001264 <HAL_GPIO_Init+0x130>
          break;
 8001262:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	2bff      	cmp	r3, #255	; 0xff
 8001268:	d801      	bhi.n	800126e <HAL_GPIO_Init+0x13a>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	e001      	b.n	8001272 <HAL_GPIO_Init+0x13e>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	3304      	adds	r3, #4
 8001272:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	2bff      	cmp	r3, #255	; 0xff
 8001278:	d802      	bhi.n	8001280 <HAL_GPIO_Init+0x14c>
 800127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	e002      	b.n	8001286 <HAL_GPIO_Init+0x152>
 8001280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001282:	3b08      	subs	r3, #8
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	210f      	movs	r1, #15
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	fa01 f303 	lsl.w	r3, r1, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	401a      	ands	r2, r3
 8001298:	6a39      	ldr	r1, [r7, #32]
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	fa01 f303 	lsl.w	r3, r1, r3
 80012a0:	431a      	orrs	r2, r3
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 80b1 	beq.w	8001416 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012b4:	4b4d      	ldr	r3, [pc, #308]	; (80013ec <HAL_GPIO_Init+0x2b8>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	4a4c      	ldr	r2, [pc, #304]	; (80013ec <HAL_GPIO_Init+0x2b8>)
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	6193      	str	r3, [r2, #24]
 80012c0:	4b4a      	ldr	r3, [pc, #296]	; (80013ec <HAL_GPIO_Init+0x2b8>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012cc:	4a48      	ldr	r2, [pc, #288]	; (80013f0 <HAL_GPIO_Init+0x2bc>)
 80012ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d0:	089b      	lsrs	r3, r3, #2
 80012d2:	3302      	adds	r3, #2
 80012d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012dc:	f003 0303 	and.w	r3, r3, #3
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	220f      	movs	r2, #15
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	4013      	ands	r3, r2
 80012ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a40      	ldr	r2, [pc, #256]	; (80013f4 <HAL_GPIO_Init+0x2c0>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d013      	beq.n	8001320 <HAL_GPIO_Init+0x1ec>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a3f      	ldr	r2, [pc, #252]	; (80013f8 <HAL_GPIO_Init+0x2c4>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d00d      	beq.n	800131c <HAL_GPIO_Init+0x1e8>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a3e      	ldr	r2, [pc, #248]	; (80013fc <HAL_GPIO_Init+0x2c8>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d007      	beq.n	8001318 <HAL_GPIO_Init+0x1e4>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a3d      	ldr	r2, [pc, #244]	; (8001400 <HAL_GPIO_Init+0x2cc>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d101      	bne.n	8001314 <HAL_GPIO_Init+0x1e0>
 8001310:	2303      	movs	r3, #3
 8001312:	e006      	b.n	8001322 <HAL_GPIO_Init+0x1ee>
 8001314:	2304      	movs	r3, #4
 8001316:	e004      	b.n	8001322 <HAL_GPIO_Init+0x1ee>
 8001318:	2302      	movs	r3, #2
 800131a:	e002      	b.n	8001322 <HAL_GPIO_Init+0x1ee>
 800131c:	2301      	movs	r3, #1
 800131e:	e000      	b.n	8001322 <HAL_GPIO_Init+0x1ee>
 8001320:	2300      	movs	r3, #0
 8001322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001324:	f002 0203 	and.w	r2, r2, #3
 8001328:	0092      	lsls	r2, r2, #2
 800132a:	4093      	lsls	r3, r2
 800132c:	68fa      	ldr	r2, [r7, #12]
 800132e:	4313      	orrs	r3, r2
 8001330:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001332:	492f      	ldr	r1, [pc, #188]	; (80013f0 <HAL_GPIO_Init+0x2bc>)
 8001334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001336:	089b      	lsrs	r3, r3, #2
 8001338:	3302      	adds	r3, #2
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d006      	beq.n	800135a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800134c:	4b2d      	ldr	r3, [pc, #180]	; (8001404 <HAL_GPIO_Init+0x2d0>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	492c      	ldr	r1, [pc, #176]	; (8001404 <HAL_GPIO_Init+0x2d0>)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	4313      	orrs	r3, r2
 8001356:	600b      	str	r3, [r1, #0]
 8001358:	e006      	b.n	8001368 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800135a:	4b2a      	ldr	r3, [pc, #168]	; (8001404 <HAL_GPIO_Init+0x2d0>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	43db      	mvns	r3, r3
 8001362:	4928      	ldr	r1, [pc, #160]	; (8001404 <HAL_GPIO_Init+0x2d0>)
 8001364:	4013      	ands	r3, r2
 8001366:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d006      	beq.n	8001382 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001374:	4b23      	ldr	r3, [pc, #140]	; (8001404 <HAL_GPIO_Init+0x2d0>)
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	4922      	ldr	r1, [pc, #136]	; (8001404 <HAL_GPIO_Init+0x2d0>)
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	4313      	orrs	r3, r2
 800137e:	604b      	str	r3, [r1, #4]
 8001380:	e006      	b.n	8001390 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001382:	4b20      	ldr	r3, [pc, #128]	; (8001404 <HAL_GPIO_Init+0x2d0>)
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	43db      	mvns	r3, r3
 800138a:	491e      	ldr	r1, [pc, #120]	; (8001404 <HAL_GPIO_Init+0x2d0>)
 800138c:	4013      	ands	r3, r2
 800138e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d006      	beq.n	80013aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800139c:	4b19      	ldr	r3, [pc, #100]	; (8001404 <HAL_GPIO_Init+0x2d0>)
 800139e:	689a      	ldr	r2, [r3, #8]
 80013a0:	4918      	ldr	r1, [pc, #96]	; (8001404 <HAL_GPIO_Init+0x2d0>)
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	608b      	str	r3, [r1, #8]
 80013a8:	e006      	b.n	80013b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013aa:	4b16      	ldr	r3, [pc, #88]	; (8001404 <HAL_GPIO_Init+0x2d0>)
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	43db      	mvns	r3, r3
 80013b2:	4914      	ldr	r1, [pc, #80]	; (8001404 <HAL_GPIO_Init+0x2d0>)
 80013b4:	4013      	ands	r3, r2
 80013b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d021      	beq.n	8001408 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013c4:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <HAL_GPIO_Init+0x2d0>)
 80013c6:	68da      	ldr	r2, [r3, #12]
 80013c8:	490e      	ldr	r1, [pc, #56]	; (8001404 <HAL_GPIO_Init+0x2d0>)
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	60cb      	str	r3, [r1, #12]
 80013d0:	e021      	b.n	8001416 <HAL_GPIO_Init+0x2e2>
 80013d2:	bf00      	nop
 80013d4:	10320000 	.word	0x10320000
 80013d8:	10310000 	.word	0x10310000
 80013dc:	10220000 	.word	0x10220000
 80013e0:	10210000 	.word	0x10210000
 80013e4:	10120000 	.word	0x10120000
 80013e8:	10110000 	.word	0x10110000
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40010000 	.word	0x40010000
 80013f4:	40010800 	.word	0x40010800
 80013f8:	40010c00 	.word	0x40010c00
 80013fc:	40011000 	.word	0x40011000
 8001400:	40011400 	.word	0x40011400
 8001404:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001408:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <HAL_GPIO_Init+0x304>)
 800140a:	68da      	ldr	r2, [r3, #12]
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	43db      	mvns	r3, r3
 8001410:	4909      	ldr	r1, [pc, #36]	; (8001438 <HAL_GPIO_Init+0x304>)
 8001412:	4013      	ands	r3, r2
 8001414:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	3301      	adds	r3, #1
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	fa22 f303 	lsr.w	r3, r2, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	f47f ae8e 	bne.w	8001148 <HAL_GPIO_Init+0x14>
  }
}
 800142c:	bf00      	nop
 800142e:	bf00      	nop
 8001430:	372c      	adds	r7, #44	; 0x2c
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr
 8001438:	40010400 	.word	0x40010400

0800143c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	807b      	strh	r3, [r7, #2]
 8001448:	4613      	mov	r3, r2
 800144a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800144c:	787b      	ldrb	r3, [r7, #1]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001452:	887a      	ldrh	r2, [r7, #2]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001458:	e003      	b.n	8001462 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800145a:	887b      	ldrh	r3, [r7, #2]
 800145c:	041a      	lsls	r2, r3, #16
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	611a      	str	r2, [r3, #16]
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr

0800146c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	460b      	mov	r3, r1
 8001476:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800147e:	887a      	ldrh	r2, [r7, #2]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4013      	ands	r3, r2
 8001484:	041a      	lsls	r2, r3, #16
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	43d9      	mvns	r1, r3
 800148a:	887b      	ldrh	r3, [r7, #2]
 800148c:	400b      	ands	r3, r1
 800148e:	431a      	orrs	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	611a      	str	r2, [r3, #16]
}
 8001494:	bf00      	nop
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr
	...

080014a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014aa:	4b08      	ldr	r3, [pc, #32]	; (80014cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014ac:	695a      	ldr	r2, [r3, #20]
 80014ae:	88fb      	ldrh	r3, [r7, #6]
 80014b0:	4013      	ands	r3, r2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d006      	beq.n	80014c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014b6:	4a05      	ldr	r2, [pc, #20]	; (80014cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014b8:	88fb      	ldrh	r3, [r7, #6]
 80014ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014bc:	88fb      	ldrh	r3, [r7, #6]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fad4 	bl	8000a6c <HAL_GPIO_EXTI_Callback>
  }
}
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40010400 	.word	0x40010400

080014d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d101      	bne.n	80014e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e272      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f000 8087 	beq.w	80015fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014f0:	4b92      	ldr	r3, [pc, #584]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f003 030c 	and.w	r3, r3, #12
 80014f8:	2b04      	cmp	r3, #4
 80014fa:	d00c      	beq.n	8001516 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014fc:	4b8f      	ldr	r3, [pc, #572]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 030c 	and.w	r3, r3, #12
 8001504:	2b08      	cmp	r3, #8
 8001506:	d112      	bne.n	800152e <HAL_RCC_OscConfig+0x5e>
 8001508:	4b8c      	ldr	r3, [pc, #560]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001514:	d10b      	bne.n	800152e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001516:	4b89      	ldr	r3, [pc, #548]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d06c      	beq.n	80015fc <HAL_RCC_OscConfig+0x12c>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d168      	bne.n	80015fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e24c      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001536:	d106      	bne.n	8001546 <HAL_RCC_OscConfig+0x76>
 8001538:	4b80      	ldr	r3, [pc, #512]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a7f      	ldr	r2, [pc, #508]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 800153e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	e02e      	b.n	80015a4 <HAL_RCC_OscConfig+0xd4>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d10c      	bne.n	8001568 <HAL_RCC_OscConfig+0x98>
 800154e:	4b7b      	ldr	r3, [pc, #492]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a7a      	ldr	r2, [pc, #488]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001554:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	4b78      	ldr	r3, [pc, #480]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a77      	ldr	r2, [pc, #476]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001560:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	e01d      	b.n	80015a4 <HAL_RCC_OscConfig+0xd4>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001570:	d10c      	bne.n	800158c <HAL_RCC_OscConfig+0xbc>
 8001572:	4b72      	ldr	r3, [pc, #456]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a71      	ldr	r2, [pc, #452]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001578:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800157c:	6013      	str	r3, [r2, #0]
 800157e:	4b6f      	ldr	r3, [pc, #444]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a6e      	ldr	r2, [pc, #440]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	e00b      	b.n	80015a4 <HAL_RCC_OscConfig+0xd4>
 800158c:	4b6b      	ldr	r3, [pc, #428]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a6a      	ldr	r2, [pc, #424]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001596:	6013      	str	r3, [r2, #0]
 8001598:	4b68      	ldr	r3, [pc, #416]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a67      	ldr	r2, [pc, #412]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 800159e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d013      	beq.n	80015d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ac:	f7ff fbfa 	bl	8000da4 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b4:	f7ff fbf6 	bl	8000da4 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b64      	cmp	r3, #100	; 0x64
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e200      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c6:	4b5d      	ldr	r3, [pc, #372]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d0f0      	beq.n	80015b4 <HAL_RCC_OscConfig+0xe4>
 80015d2:	e014      	b.n	80015fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d4:	f7ff fbe6 	bl	8000da4 <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015dc:	f7ff fbe2 	bl	8000da4 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b64      	cmp	r3, #100	; 0x64
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e1ec      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ee:	4b53      	ldr	r3, [pc, #332]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1f0      	bne.n	80015dc <HAL_RCC_OscConfig+0x10c>
 80015fa:	e000      	b.n	80015fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d063      	beq.n	80016d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800160a:	4b4c      	ldr	r3, [pc, #304]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f003 030c 	and.w	r3, r3, #12
 8001612:	2b00      	cmp	r3, #0
 8001614:	d00b      	beq.n	800162e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001616:	4b49      	ldr	r3, [pc, #292]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f003 030c 	and.w	r3, r3, #12
 800161e:	2b08      	cmp	r3, #8
 8001620:	d11c      	bne.n	800165c <HAL_RCC_OscConfig+0x18c>
 8001622:	4b46      	ldr	r3, [pc, #280]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d116      	bne.n	800165c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800162e:	4b43      	ldr	r3, [pc, #268]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d005      	beq.n	8001646 <HAL_RCC_OscConfig+0x176>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	691b      	ldr	r3, [r3, #16]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d001      	beq.n	8001646 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e1c0      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001646:	4b3d      	ldr	r3, [pc, #244]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	4939      	ldr	r1, [pc, #228]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001656:	4313      	orrs	r3, r2
 8001658:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800165a:	e03a      	b.n	80016d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d020      	beq.n	80016a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001664:	4b36      	ldr	r3, [pc, #216]	; (8001740 <HAL_RCC_OscConfig+0x270>)
 8001666:	2201      	movs	r2, #1
 8001668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166a:	f7ff fb9b 	bl	8000da4 <HAL_GetTick>
 800166e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001670:	e008      	b.n	8001684 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001672:	f7ff fb97 	bl	8000da4 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e1a1      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001684:	4b2d      	ldr	r3, [pc, #180]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d0f0      	beq.n	8001672 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001690:	4b2a      	ldr	r3, [pc, #168]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	695b      	ldr	r3, [r3, #20]
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	4927      	ldr	r1, [pc, #156]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 80016a0:	4313      	orrs	r3, r2
 80016a2:	600b      	str	r3, [r1, #0]
 80016a4:	e015      	b.n	80016d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016a6:	4b26      	ldr	r3, [pc, #152]	; (8001740 <HAL_RCC_OscConfig+0x270>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ac:	f7ff fb7a 	bl	8000da4 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016b4:	f7ff fb76 	bl	8000da4 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e180      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016c6:	4b1d      	ldr	r3, [pc, #116]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1f0      	bne.n	80016b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0308 	and.w	r3, r3, #8
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d03a      	beq.n	8001754 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d019      	beq.n	800171a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016e6:	4b17      	ldr	r3, [pc, #92]	; (8001744 <HAL_RCC_OscConfig+0x274>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ec:	f7ff fb5a 	bl	8000da4 <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016f4:	f7ff fb56 	bl	8000da4 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e160      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001706:	4b0d      	ldr	r3, [pc, #52]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0f0      	beq.n	80016f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001712:	2001      	movs	r0, #1
 8001714:	f000 fad8 	bl	8001cc8 <RCC_Delay>
 8001718:	e01c      	b.n	8001754 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <HAL_RCC_OscConfig+0x274>)
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001720:	f7ff fb40 	bl	8000da4 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001726:	e00f      	b.n	8001748 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001728:	f7ff fb3c 	bl	8000da4 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d908      	bls.n	8001748 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e146      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
 800173a:	bf00      	nop
 800173c:	40021000 	.word	0x40021000
 8001740:	42420000 	.word	0x42420000
 8001744:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001748:	4b92      	ldr	r3, [pc, #584]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 800174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1e9      	bne.n	8001728 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	2b00      	cmp	r3, #0
 800175e:	f000 80a6 	beq.w	80018ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001762:	2300      	movs	r3, #0
 8001764:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001766:	4b8b      	ldr	r3, [pc, #556]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d10d      	bne.n	800178e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001772:	4b88      	ldr	r3, [pc, #544]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	4a87      	ldr	r2, [pc, #540]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 8001778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800177c:	61d3      	str	r3, [r2, #28]
 800177e:	4b85      	ldr	r3, [pc, #532]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800178a:	2301      	movs	r3, #1
 800178c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800178e:	4b82      	ldr	r3, [pc, #520]	; (8001998 <HAL_RCC_OscConfig+0x4c8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001796:	2b00      	cmp	r3, #0
 8001798:	d118      	bne.n	80017cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800179a:	4b7f      	ldr	r3, [pc, #508]	; (8001998 <HAL_RCC_OscConfig+0x4c8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a7e      	ldr	r2, [pc, #504]	; (8001998 <HAL_RCC_OscConfig+0x4c8>)
 80017a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017a6:	f7ff fafd 	bl	8000da4 <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ac:	e008      	b.n	80017c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ae:	f7ff faf9 	bl	8000da4 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b64      	cmp	r3, #100	; 0x64
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e103      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c0:	4b75      	ldr	r3, [pc, #468]	; (8001998 <HAL_RCC_OscConfig+0x4c8>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d0f0      	beq.n	80017ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d106      	bne.n	80017e2 <HAL_RCC_OscConfig+0x312>
 80017d4:	4b6f      	ldr	r3, [pc, #444]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	4a6e      	ldr	r2, [pc, #440]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	6213      	str	r3, [r2, #32]
 80017e0:	e02d      	b.n	800183e <HAL_RCC_OscConfig+0x36e>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d10c      	bne.n	8001804 <HAL_RCC_OscConfig+0x334>
 80017ea:	4b6a      	ldr	r3, [pc, #424]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 80017ec:	6a1b      	ldr	r3, [r3, #32]
 80017ee:	4a69      	ldr	r2, [pc, #420]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 80017f0:	f023 0301 	bic.w	r3, r3, #1
 80017f4:	6213      	str	r3, [r2, #32]
 80017f6:	4b67      	ldr	r3, [pc, #412]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 80017f8:	6a1b      	ldr	r3, [r3, #32]
 80017fa:	4a66      	ldr	r2, [pc, #408]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 80017fc:	f023 0304 	bic.w	r3, r3, #4
 8001800:	6213      	str	r3, [r2, #32]
 8001802:	e01c      	b.n	800183e <HAL_RCC_OscConfig+0x36e>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	2b05      	cmp	r3, #5
 800180a:	d10c      	bne.n	8001826 <HAL_RCC_OscConfig+0x356>
 800180c:	4b61      	ldr	r3, [pc, #388]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 800180e:	6a1b      	ldr	r3, [r3, #32]
 8001810:	4a60      	ldr	r2, [pc, #384]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 8001812:	f043 0304 	orr.w	r3, r3, #4
 8001816:	6213      	str	r3, [r2, #32]
 8001818:	4b5e      	ldr	r3, [pc, #376]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	4a5d      	ldr	r2, [pc, #372]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	6213      	str	r3, [r2, #32]
 8001824:	e00b      	b.n	800183e <HAL_RCC_OscConfig+0x36e>
 8001826:	4b5b      	ldr	r3, [pc, #364]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	4a5a      	ldr	r2, [pc, #360]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 800182c:	f023 0301 	bic.w	r3, r3, #1
 8001830:	6213      	str	r3, [r2, #32]
 8001832:	4b58      	ldr	r3, [pc, #352]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 8001834:	6a1b      	ldr	r3, [r3, #32]
 8001836:	4a57      	ldr	r2, [pc, #348]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 8001838:	f023 0304 	bic.w	r3, r3, #4
 800183c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d015      	beq.n	8001872 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001846:	f7ff faad 	bl	8000da4 <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800184c:	e00a      	b.n	8001864 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800184e:	f7ff faa9 	bl	8000da4 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	f241 3288 	movw	r2, #5000	; 0x1388
 800185c:	4293      	cmp	r3, r2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e0b1      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001864:	4b4b      	ldr	r3, [pc, #300]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0ee      	beq.n	800184e <HAL_RCC_OscConfig+0x37e>
 8001870:	e014      	b.n	800189c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001872:	f7ff fa97 	bl	8000da4 <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001878:	e00a      	b.n	8001890 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800187a:	f7ff fa93 	bl	8000da4 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	f241 3288 	movw	r2, #5000	; 0x1388
 8001888:	4293      	cmp	r3, r2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e09b      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001890:	4b40      	ldr	r3, [pc, #256]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 8001892:	6a1b      	ldr	r3, [r3, #32]
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1ee      	bne.n	800187a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800189c:	7dfb      	ldrb	r3, [r7, #23]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d105      	bne.n	80018ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018a2:	4b3c      	ldr	r3, [pc, #240]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	4a3b      	ldr	r2, [pc, #236]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 80018a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f000 8087 	beq.w	80019c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018b8:	4b36      	ldr	r3, [pc, #216]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 030c 	and.w	r3, r3, #12
 80018c0:	2b08      	cmp	r3, #8
 80018c2:	d061      	beq.n	8001988 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	69db      	ldr	r3, [r3, #28]
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d146      	bne.n	800195a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018cc:	4b33      	ldr	r3, [pc, #204]	; (800199c <HAL_RCC_OscConfig+0x4cc>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d2:	f7ff fa67 	bl	8000da4 <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d8:	e008      	b.n	80018ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018da:	f7ff fa63 	bl	8000da4 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e06d      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ec:	4b29      	ldr	r3, [pc, #164]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1f0      	bne.n	80018da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001900:	d108      	bne.n	8001914 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001902:	4b24      	ldr	r3, [pc, #144]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	4921      	ldr	r1, [pc, #132]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 8001910:	4313      	orrs	r3, r2
 8001912:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001914:	4b1f      	ldr	r3, [pc, #124]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a19      	ldr	r1, [r3, #32]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001924:	430b      	orrs	r3, r1
 8001926:	491b      	ldr	r1, [pc, #108]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 8001928:	4313      	orrs	r3, r2
 800192a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800192c:	4b1b      	ldr	r3, [pc, #108]	; (800199c <HAL_RCC_OscConfig+0x4cc>)
 800192e:	2201      	movs	r2, #1
 8001930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001932:	f7ff fa37 	bl	8000da4 <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800193a:	f7ff fa33 	bl	8000da4 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e03d      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800194c:	4b11      	ldr	r3, [pc, #68]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0f0      	beq.n	800193a <HAL_RCC_OscConfig+0x46a>
 8001958:	e035      	b.n	80019c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195a:	4b10      	ldr	r3, [pc, #64]	; (800199c <HAL_RCC_OscConfig+0x4cc>)
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001960:	f7ff fa20 	bl	8000da4 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001968:	f7ff fa1c 	bl	8000da4 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e026      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800197a:	4b06      	ldr	r3, [pc, #24]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1f0      	bne.n	8001968 <HAL_RCC_OscConfig+0x498>
 8001986:	e01e      	b.n	80019c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	69db      	ldr	r3, [r3, #28]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d107      	bne.n	80019a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e019      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
 8001994:	40021000 	.word	0x40021000
 8001998:	40007000 	.word	0x40007000
 800199c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019a0:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <HAL_RCC_OscConfig+0x500>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d106      	bne.n	80019c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019be:	429a      	cmp	r2, r3
 80019c0:	d001      	beq.n	80019c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e000      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40021000 	.word	0x40021000

080019d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e0d0      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019e8:	4b6a      	ldr	r3, [pc, #424]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0307 	and.w	r3, r3, #7
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d910      	bls.n	8001a18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f6:	4b67      	ldr	r3, [pc, #412]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f023 0207 	bic.w	r2, r3, #7
 80019fe:	4965      	ldr	r1, [pc, #404]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a06:	4b63      	ldr	r3, [pc, #396]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d001      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e0b8      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d020      	beq.n	8001a66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d005      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a30:	4b59      	ldr	r3, [pc, #356]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	4a58      	ldr	r2, [pc, #352]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001a36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0308 	and.w	r3, r3, #8
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d005      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a48:	4b53      	ldr	r3, [pc, #332]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	4a52      	ldr	r2, [pc, #328]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a54:	4b50      	ldr	r3, [pc, #320]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	494d      	ldr	r1, [pc, #308]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d040      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d107      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7a:	4b47      	ldr	r3, [pc, #284]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d115      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e07f      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d107      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a92:	4b41      	ldr	r3, [pc, #260]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d109      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e073      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa2:	4b3d      	ldr	r3, [pc, #244]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e06b      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ab2:	4b39      	ldr	r3, [pc, #228]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f023 0203 	bic.w	r2, r3, #3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	4936      	ldr	r1, [pc, #216]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ac4:	f7ff f96e 	bl	8000da4 <HAL_GetTick>
 8001ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aca:	e00a      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001acc:	f7ff f96a 	bl	8000da4 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e053      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae2:	4b2d      	ldr	r3, [pc, #180]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f003 020c 	and.w	r2, r3, #12
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d1eb      	bne.n	8001acc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001af4:	4b27      	ldr	r3, [pc, #156]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d210      	bcs.n	8001b24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b02:	4b24      	ldr	r3, [pc, #144]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f023 0207 	bic.w	r2, r3, #7
 8001b0a:	4922      	ldr	r1, [pc, #136]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b12:	4b20      	ldr	r3, [pc, #128]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d001      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e032      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d008      	beq.n	8001b42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b30:	4b19      	ldr	r3, [pc, #100]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	4916      	ldr	r1, [pc, #88]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0308 	and.w	r3, r3, #8
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d009      	beq.n	8001b62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b4e:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	490e      	ldr	r1, [pc, #56]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b62:	f000 f821 	bl	8001ba8 <HAL_RCC_GetSysClockFreq>
 8001b66:	4602      	mov	r2, r0
 8001b68:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	091b      	lsrs	r3, r3, #4
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	490a      	ldr	r1, [pc, #40]	; (8001b9c <HAL_RCC_ClockConfig+0x1c8>)
 8001b74:	5ccb      	ldrb	r3, [r1, r3]
 8001b76:	fa22 f303 	lsr.w	r3, r2, r3
 8001b7a:	4a09      	ldr	r2, [pc, #36]	; (8001ba0 <HAL_RCC_ClockConfig+0x1cc>)
 8001b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b7e:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <HAL_RCC_ClockConfig+0x1d0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff f8cc 	bl	8000d20 <HAL_InitTick>

  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40022000 	.word	0x40022000
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	080028b0 	.word	0x080028b0
 8001ba0:	20000000 	.word	0x20000000
 8001ba4:	20000004 	.word	0x20000004

08001ba8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ba8:	b490      	push	{r4, r7}
 8001baa:	b08a      	sub	sp, #40	; 0x28
 8001bac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001bae:	4b29      	ldr	r3, [pc, #164]	; (8001c54 <HAL_RCC_GetSysClockFreq+0xac>)
 8001bb0:	1d3c      	adds	r4, r7, #4
 8001bb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001bb8:	f240 2301 	movw	r3, #513	; 0x201
 8001bbc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61fb      	str	r3, [r7, #28]
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61bb      	str	r3, [r7, #24]
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bd2:	4b21      	ldr	r3, [pc, #132]	; (8001c58 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	d002      	beq.n	8001be8 <HAL_RCC_GetSysClockFreq+0x40>
 8001be2:	2b08      	cmp	r3, #8
 8001be4:	d003      	beq.n	8001bee <HAL_RCC_GetSysClockFreq+0x46>
 8001be6:	e02b      	b.n	8001c40 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001be8:	4b1c      	ldr	r3, [pc, #112]	; (8001c5c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001bea:	623b      	str	r3, [r7, #32]
      break;
 8001bec:	e02b      	b.n	8001c46 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	0c9b      	lsrs	r3, r3, #18
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	3328      	adds	r3, #40	; 0x28
 8001bf8:	443b      	add	r3, r7
 8001bfa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001bfe:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d012      	beq.n	8001c30 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c0a:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	0c5b      	lsrs	r3, r3, #17
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	3328      	adds	r3, #40	; 0x28
 8001c16:	443b      	add	r3, r7
 8001c18:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c1c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	4a0e      	ldr	r2, [pc, #56]	; (8001c5c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c22:	fb03 f202 	mul.w	r2, r3, r2
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c2e:	e004      	b.n	8001c3a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	4a0b      	ldr	r2, [pc, #44]	; (8001c60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c34:	fb02 f303 	mul.w	r3, r2, r3
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	623b      	str	r3, [r7, #32]
      break;
 8001c3e:	e002      	b.n	8001c46 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c40:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c42:	623b      	str	r3, [r7, #32]
      break;
 8001c44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c46:	6a3b      	ldr	r3, [r7, #32]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3728      	adds	r7, #40	; 0x28
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc90      	pop	{r4, r7}
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	080028a0 	.word	0x080028a0
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	007a1200 	.word	0x007a1200
 8001c60:	003d0900 	.word	0x003d0900

08001c64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c68:	4b02      	ldr	r3, [pc, #8]	; (8001c74 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr
 8001c74:	20000000 	.word	0x20000000

08001c78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c7c:	f7ff fff2 	bl	8001c64 <HAL_RCC_GetHCLKFreq>
 8001c80:	4602      	mov	r2, r0
 8001c82:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	0a1b      	lsrs	r3, r3, #8
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	4903      	ldr	r1, [pc, #12]	; (8001c9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c8e:	5ccb      	ldrb	r3, [r1, r3]
 8001c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	080028c0 	.word	0x080028c0

08001ca0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ca4:	f7ff ffde 	bl	8001c64 <HAL_RCC_GetHCLKFreq>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	0adb      	lsrs	r3, r3, #11
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	4903      	ldr	r1, [pc, #12]	; (8001cc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cb6:	5ccb      	ldrb	r3, [r1, r3]
 8001cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	080028c0 	.word	0x080028c0

08001cc8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001cd0:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <RCC_Delay+0x34>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a0a      	ldr	r2, [pc, #40]	; (8001d00 <RCC_Delay+0x38>)
 8001cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cda:	0a5b      	lsrs	r3, r3, #9
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	fb02 f303 	mul.w	r3, r2, r3
 8001ce2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ce4:	bf00      	nop
  }
  while (Delay --);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	1e5a      	subs	r2, r3, #1
 8001cea:	60fa      	str	r2, [r7, #12]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1f9      	bne.n	8001ce4 <RCC_Delay+0x1c>
}
 8001cf0:	bf00      	nop
 8001cf2:	bf00      	nop
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr
 8001cfc:	20000000 	.word	0x20000000
 8001d00:	10624dd3 	.word	0x10624dd3

08001d04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e03f      	b.n	8001d96 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d106      	bne.n	8001d30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7fe ff22 	bl	8000b74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2224      	movs	r2, #36	; 0x24
 8001d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68da      	ldr	r2, [r3, #12]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 fcc9 	bl	80026e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	691a      	ldr	r2, [r3, #16]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	695a      	ldr	r2, [r3, #20]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68da      	ldr	r2, [r3, #12]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2220      	movs	r2, #32
 8001d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2220      	movs	r2, #32
 8001d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b08a      	sub	sp, #40	; 0x28
 8001da2:	af02      	add	r7, sp, #8
 8001da4:	60f8      	str	r0, [r7, #12]
 8001da6:	60b9      	str	r1, [r7, #8]
 8001da8:	603b      	str	r3, [r7, #0]
 8001daa:	4613      	mov	r3, r2
 8001dac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b20      	cmp	r3, #32
 8001dbc:	d17c      	bne.n	8001eb8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d002      	beq.n	8001dca <HAL_UART_Transmit+0x2c>
 8001dc4:	88fb      	ldrh	r3, [r7, #6]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e075      	b.n	8001eba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d101      	bne.n	8001ddc <HAL_UART_Transmit+0x3e>
 8001dd8:	2302      	movs	r3, #2
 8001dda:	e06e      	b.n	8001eba <HAL_UART_Transmit+0x11c>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2221      	movs	r2, #33	; 0x21
 8001dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001df2:	f7fe ffd7 	bl	8000da4 <HAL_GetTick>
 8001df6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	88fa      	ldrh	r2, [r7, #6]
 8001dfc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	88fa      	ldrh	r2, [r7, #6]
 8001e02:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e0c:	d108      	bne.n	8001e20 <HAL_UART_Transmit+0x82>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d104      	bne.n	8001e20 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	61bb      	str	r3, [r7, #24]
 8001e1e:	e003      	b.n	8001e28 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001e30:	e02a      	b.n	8001e88 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2180      	movs	r1, #128	; 0x80
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f000 fa7c 	bl	800233a <UART_WaitOnFlagUntilTimeout>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e036      	b.n	8001eba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10b      	bne.n	8001e6a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	881b      	ldrh	r3, [r3, #0]
 8001e56:	461a      	mov	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e60:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	3302      	adds	r3, #2
 8001e66:	61bb      	str	r3, [r7, #24]
 8001e68:	e007      	b.n	8001e7a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	781a      	ldrb	r2, [r3, #0]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	3301      	adds	r3, #1
 8001e78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	3b01      	subs	r3, #1
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1cf      	bne.n	8001e32 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	9300      	str	r3, [sp, #0]
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	2140      	movs	r1, #64	; 0x40
 8001e9c:	68f8      	ldr	r0, [r7, #12]
 8001e9e:	f000 fa4c 	bl	800233a <UART_WaitOnFlagUntilTimeout>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e006      	b.n	8001eba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2220      	movs	r2, #32
 8001eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	e000      	b.n	8001eba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001eb8:	2302      	movs	r3, #2
  }
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3720      	adds	r7, #32
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b085      	sub	sp, #20
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	60f8      	str	r0, [r7, #12]
 8001eca:	60b9      	str	r1, [r7, #8]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b20      	cmp	r3, #32
 8001eda:	d130      	bne.n	8001f3e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d002      	beq.n	8001ee8 <HAL_UART_Transmit_IT+0x26>
 8001ee2:	88fb      	ldrh	r3, [r7, #6]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e029      	b.n	8001f40 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d101      	bne.n	8001efa <HAL_UART_Transmit_IT+0x38>
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	e022      	b.n	8001f40 <HAL_UART_Transmit_IT+0x7e>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	68ba      	ldr	r2, [r7, #8]
 8001f06:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	88fa      	ldrh	r2, [r7, #6]
 8001f0c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	88fa      	ldrh	r2, [r7, #6]
 8001f12:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2200      	movs	r2, #0
 8001f18:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2221      	movs	r2, #33	; 0x21
 8001f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f38:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	e000      	b.n	8001f40 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001f3e:	2302      	movs	r3, #2
  }
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bc80      	pop	{r7}
 8001f48:	4770      	bx	lr

08001f4a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b084      	sub	sp, #16
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	60f8      	str	r0, [r7, #12]
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	4613      	mov	r3, r2
 8001f56:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b20      	cmp	r3, #32
 8001f62:	d11d      	bne.n	8001fa0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d002      	beq.n	8001f70 <HAL_UART_Receive_IT+0x26>
 8001f6a:	88fb      	ldrh	r3, [r7, #6]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e016      	b.n	8001fa2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d101      	bne.n	8001f82 <HAL_UART_Receive_IT+0x38>
 8001f7e:	2302      	movs	r3, #2
 8001f80:	e00f      	b.n	8001fa2 <HAL_UART_Receive_IT+0x58>
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8001f90:	88fb      	ldrh	r3, [r7, #6]
 8001f92:	461a      	mov	r2, r3
 8001f94:	68b9      	ldr	r1, [r7, #8]
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f000 fa19 	bl	80023ce <UART_Start_Receive_IT>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	e000      	b.n	8001fa2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001fa0:	2302      	movs	r3, #2
  }
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
	...

08001fac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08a      	sub	sp, #40	; 0x28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10d      	bne.n	8001ffe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	f003 0320 	and.w	r3, r3, #32
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d008      	beq.n	8001ffe <HAL_UART_IRQHandler+0x52>
 8001fec:	6a3b      	ldr	r3, [r7, #32]
 8001fee:	f003 0320 	and.w	r3, r3, #32
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 fac9 	bl	800258e <UART_Receive_IT>
      return;
 8001ffc:	e17b      	b.n	80022f6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	2b00      	cmp	r3, #0
 8002002:	f000 80b1 	beq.w	8002168 <HAL_UART_IRQHandler+0x1bc>
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b00      	cmp	r3, #0
 800200e:	d105      	bne.n	800201c <HAL_UART_IRQHandler+0x70>
 8002010:	6a3b      	ldr	r3, [r7, #32]
 8002012:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002016:	2b00      	cmp	r3, #0
 8002018:	f000 80a6 	beq.w	8002168 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00a      	beq.n	800203c <HAL_UART_IRQHandler+0x90>
 8002026:	6a3b      	ldr	r3, [r7, #32]
 8002028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202c:	2b00      	cmp	r3, #0
 800202e:	d005      	beq.n	800203c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	f043 0201 	orr.w	r2, r3, #1
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	f003 0304 	and.w	r3, r3, #4
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00a      	beq.n	800205c <HAL_UART_IRQHandler+0xb0>
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	2b00      	cmp	r3, #0
 800204e:	d005      	beq.n	800205c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002054:	f043 0202 	orr.w	r2, r3, #2
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00a      	beq.n	800207c <HAL_UART_IRQHandler+0xd0>
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b00      	cmp	r3, #0
 800206e:	d005      	beq.n	800207c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002074:	f043 0204 	orr.w	r2, r3, #4
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00f      	beq.n	80020a6 <HAL_UART_IRQHandler+0xfa>
 8002086:	6a3b      	ldr	r3, [r7, #32]
 8002088:	f003 0320 	and.w	r3, r3, #32
 800208c:	2b00      	cmp	r3, #0
 800208e:	d104      	bne.n	800209a <HAL_UART_IRQHandler+0xee>
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	d005      	beq.n	80020a6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	f043 0208 	orr.w	r2, r3, #8
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f000 811e 	beq.w	80022ec <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	f003 0320 	and.w	r3, r3, #32
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d007      	beq.n	80020ca <HAL_UART_IRQHandler+0x11e>
 80020ba:	6a3b      	ldr	r3, [r7, #32]
 80020bc:	f003 0320 	and.w	r3, r3, #32
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d002      	beq.n	80020ca <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 fa62 	bl	800258e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	695b      	ldr	r3, [r3, #20]
 80020d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	bf14      	ite	ne
 80020d8:	2301      	movne	r3, #1
 80020da:	2300      	moveq	r3, #0
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	f003 0308 	and.w	r3, r3, #8
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d102      	bne.n	80020f2 <HAL_UART_IRQHandler+0x146>
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d031      	beq.n	8002156 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f9a4 	bl	8002440 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002102:	2b00      	cmp	r3, #0
 8002104:	d023      	beq.n	800214e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	695a      	ldr	r2, [r3, #20]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002114:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211a:	2b00      	cmp	r3, #0
 800211c:	d013      	beq.n	8002146 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002122:	4a76      	ldr	r2, [pc, #472]	; (80022fc <HAL_UART_IRQHandler+0x350>)
 8002124:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212a:	4618      	mov	r0, r3
 800212c:	f7fe ff8c 	bl	8001048 <HAL_DMA_Abort_IT>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d016      	beq.n	8002164 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002140:	4610      	mov	r0, r2
 8002142:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002144:	e00e      	b.n	8002164 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f8e3 	bl	8002312 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800214c:	e00a      	b.n	8002164 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f8df 	bl	8002312 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002154:	e006      	b.n	8002164 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f8db 	bl	8002312 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002162:	e0c3      	b.n	80022ec <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002164:	bf00      	nop
    return;
 8002166:	e0c1      	b.n	80022ec <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216c:	2b01      	cmp	r3, #1
 800216e:	f040 80a1 	bne.w	80022b4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	f003 0310 	and.w	r3, r3, #16
 8002178:	2b00      	cmp	r3, #0
 800217a:	f000 809b 	beq.w	80022b4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800217e:	6a3b      	ldr	r3, [r7, #32]
 8002180:	f003 0310 	and.w	r3, r3, #16
 8002184:	2b00      	cmp	r3, #0
 8002186:	f000 8095 	beq.w	80022b4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800218a:	2300      	movs	r3, #0
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d04e      	beq.n	800224c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80021b8:	8a3b      	ldrh	r3, [r7, #16]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f000 8098 	beq.w	80022f0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80021c4:	8a3a      	ldrh	r2, [r7, #16]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	f080 8092 	bcs.w	80022f0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	8a3a      	ldrh	r2, [r7, #16]
 80021d0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	2b20      	cmp	r3, #32
 80021da:	d02b      	beq.n	8002234 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68da      	ldr	r2, [r3, #12]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021ea:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	695a      	ldr	r2, [r3, #20]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0201 	bic.w	r2, r2, #1
 80021fa:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	695a      	ldr	r2, [r3, #20]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800220a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2220      	movs	r2, #32
 8002210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0210 	bic.w	r2, r2, #16
 8002228:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800222e:	4618      	mov	r0, r3
 8002230:	f7fe fecf 	bl	8000fd2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800223c:	b29b      	uxth	r3, r3
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	b29b      	uxth	r3, r3
 8002242:	4619      	mov	r1, r3
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 f86d 	bl	8002324 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800224a:	e051      	b.n	80022f0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002254:	b29b      	uxth	r3, r3
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800225e:	b29b      	uxth	r3, r3
 8002260:	2b00      	cmp	r3, #0
 8002262:	d047      	beq.n	80022f4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002264:	8a7b      	ldrh	r3, [r7, #18]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d044      	beq.n	80022f4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68da      	ldr	r2, [r3, #12]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002278:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	695a      	ldr	r2, [r3, #20]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 0201 	bic.w	r2, r2, #1
 8002288:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2220      	movs	r2, #32
 800228e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f022 0210 	bic.w	r2, r2, #16
 80022a6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80022a8:	8a7b      	ldrh	r3, [r7, #18]
 80022aa:	4619      	mov	r1, r3
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 f839 	bl	8002324 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80022b2:	e01f      	b.n	80022f4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d008      	beq.n	80022d0 <HAL_UART_IRQHandler+0x324>
 80022be:	6a3b      	ldr	r3, [r7, #32]
 80022c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d003      	beq.n	80022d0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 f8f9 	bl	80024c0 <UART_Transmit_IT>
    return;
 80022ce:	e012      	b.n	80022f6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00d      	beq.n	80022f6 <HAL_UART_IRQHandler+0x34a>
 80022da:	6a3b      	ldr	r3, [r7, #32]
 80022dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d008      	beq.n	80022f6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f000 f93a 	bl	800255e <UART_EndTransmit_IT>
    return;
 80022ea:	e004      	b.n	80022f6 <HAL_UART_IRQHandler+0x34a>
    return;
 80022ec:	bf00      	nop
 80022ee:	e002      	b.n	80022f6 <HAL_UART_IRQHandler+0x34a>
      return;
 80022f0:	bf00      	nop
 80022f2:	e000      	b.n	80022f6 <HAL_UART_IRQHandler+0x34a>
      return;
 80022f4:	bf00      	nop
  }
}
 80022f6:	3728      	adds	r7, #40	; 0x28
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	08002499 	.word	0x08002499

08002300 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr

08002312 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr

08002324 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr

0800233a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b084      	sub	sp, #16
 800233e:	af00      	add	r7, sp, #0
 8002340:	60f8      	str	r0, [r7, #12]
 8002342:	60b9      	str	r1, [r7, #8]
 8002344:	603b      	str	r3, [r7, #0]
 8002346:	4613      	mov	r3, r2
 8002348:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800234a:	e02c      	b.n	80023a6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002352:	d028      	beq.n	80023a6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d007      	beq.n	800236a <UART_WaitOnFlagUntilTimeout+0x30>
 800235a:	f7fe fd23 	bl	8000da4 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	429a      	cmp	r2, r3
 8002368:	d21d      	bcs.n	80023a6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68da      	ldr	r2, [r3, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002378:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	695a      	ldr	r2, [r3, #20]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 0201 	bic.w	r2, r2, #1
 8002388:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2220      	movs	r2, #32
 800238e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2220      	movs	r2, #32
 8002396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e00f      	b.n	80023c6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	4013      	ands	r3, r2
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	bf0c      	ite	eq
 80023b6:	2301      	moveq	r3, #1
 80023b8:	2300      	movne	r3, #0
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	461a      	mov	r2, r3
 80023be:	79fb      	ldrb	r3, [r7, #7]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d0c3      	beq.n	800234c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b085      	sub	sp, #20
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	60f8      	str	r0, [r7, #12]
 80023d6:	60b9      	str	r1, [r7, #8]
 80023d8:	4613      	mov	r3, r2
 80023da:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	88fa      	ldrh	r2, [r7, #6]
 80023e6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	88fa      	ldrh	r2, [r7, #6]
 80023ec:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2222      	movs	r2, #34	; 0x22
 80023f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68da      	ldr	r2, [r3, #12]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002412:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	695a      	ldr	r2, [r3, #20]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0201 	orr.w	r2, r2, #1
 8002422:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0220 	orr.w	r2, r2, #32
 8002432:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr

08002440 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68da      	ldr	r2, [r3, #12]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002456:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	695a      	ldr	r2, [r3, #20]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 0201 	bic.w	r2, r2, #1
 8002466:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246c:	2b01      	cmp	r3, #1
 800246e:	d107      	bne.n	8002480 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68da      	ldr	r2, [r3, #12]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0210 	bic.w	r2, r2, #16
 800247e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2220      	movs	r2, #32
 8002484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr

08002498 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f7ff ff2d 	bl	8002312 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80024b8:	bf00      	nop
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b21      	cmp	r3, #33	; 0x21
 80024d2:	d13e      	bne.n	8002552 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024dc:	d114      	bne.n	8002508 <UART_Transmit_IT+0x48>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d110      	bne.n	8002508 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	461a      	mov	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024fa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	1c9a      	adds	r2, r3, #2
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	621a      	str	r2, [r3, #32]
 8002506:	e008      	b.n	800251a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	1c59      	adds	r1, r3, #1
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	6211      	str	r1, [r2, #32]
 8002512:	781a      	ldrb	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800251e:	b29b      	uxth	r3, r3
 8002520:	3b01      	subs	r3, #1
 8002522:	b29b      	uxth	r3, r3
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	4619      	mov	r1, r3
 8002528:	84d1      	strh	r1, [r2, #38]	; 0x26
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10f      	bne.n	800254e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68da      	ldr	r2, [r3, #12]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800253c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68da      	ldr	r2, [r3, #12]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800254c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800254e:	2300      	movs	r3, #0
 8002550:	e000      	b.n	8002554 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002552:	2302      	movs	r3, #2
  }
}
 8002554:	4618      	mov	r0, r3
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr

0800255e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b082      	sub	sp, #8
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68da      	ldr	r2, [r3, #12]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002574:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2220      	movs	r2, #32
 800257a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7ff febe 	bl	8002300 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b086      	sub	sp, #24
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b22      	cmp	r3, #34	; 0x22
 80025a0:	f040 8099 	bne.w	80026d6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ac:	d117      	bne.n	80025de <UART_Receive_IT+0x50>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d113      	bne.n	80025de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025be:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d6:	1c9a      	adds	r2, r3, #2
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	629a      	str	r2, [r3, #40]	; 0x28
 80025dc:	e026      	b.n	800262c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025f0:	d007      	beq.n	8002602 <UART_Receive_IT+0x74>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10a      	bne.n	8002610 <UART_Receive_IT+0x82>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d106      	bne.n	8002610 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	b2da      	uxtb	r2, r3
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	701a      	strb	r2, [r3, #0]
 800260e:	e008      	b.n	8002622 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	b2db      	uxtb	r3, r3
 8002618:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800261c:	b2da      	uxtb	r2, r3
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002626:	1c5a      	adds	r2, r3, #1
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002630:	b29b      	uxth	r3, r3
 8002632:	3b01      	subs	r3, #1
 8002634:	b29b      	uxth	r3, r3
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	4619      	mov	r1, r3
 800263a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800263c:	2b00      	cmp	r3, #0
 800263e:	d148      	bne.n	80026d2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68da      	ldr	r2, [r3, #12]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0220 	bic.w	r2, r2, #32
 800264e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68da      	ldr	r2, [r3, #12]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800265e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	695a      	ldr	r2, [r3, #20]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0201 	bic.w	r2, r2, #1
 800266e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2220      	movs	r2, #32
 8002674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267c:	2b01      	cmp	r3, #1
 800267e:	d123      	bne.n	80026c8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68da      	ldr	r2, [r3, #12]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 0210 	bic.w	r2, r2, #16
 8002694:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0310 	and.w	r3, r3, #16
 80026a0:	2b10      	cmp	r3, #16
 80026a2:	d10a      	bne.n	80026ba <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80026a4:	2300      	movs	r3, #0
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80026be:	4619      	mov	r1, r3
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7ff fe2f 	bl	8002324 <HAL_UARTEx_RxEventCallback>
 80026c6:	e002      	b.n	80026ce <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f7fe f9fd 	bl	8000ac8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80026ce:	2300      	movs	r3, #0
 80026d0:	e002      	b.n	80026d8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80026d2:	2300      	movs	r3, #0
 80026d4:	e000      	b.n	80026d8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80026d6:	2302      	movs	r3, #2
  }
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3718      	adds	r7, #24
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	4313      	orrs	r3, r2
 800270e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800271a:	f023 030c 	bic.w	r3, r3, #12
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6812      	ldr	r2, [r2, #0]
 8002722:	68b9      	ldr	r1, [r7, #8]
 8002724:	430b      	orrs	r3, r1
 8002726:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	699a      	ldr	r2, [r3, #24]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a2c      	ldr	r2, [pc, #176]	; (80027f4 <UART_SetConfig+0x114>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d103      	bne.n	8002750 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002748:	f7ff faaa 	bl	8001ca0 <HAL_RCC_GetPCLK2Freq>
 800274c:	60f8      	str	r0, [r7, #12]
 800274e:	e002      	b.n	8002756 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002750:	f7ff fa92 	bl	8001c78 <HAL_RCC_GetPCLK1Freq>
 8002754:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	4613      	mov	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	009a      	lsls	r2, r3, #2
 8002760:	441a      	add	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	fbb2 f3f3 	udiv	r3, r2, r3
 800276c:	4a22      	ldr	r2, [pc, #136]	; (80027f8 <UART_SetConfig+0x118>)
 800276e:	fba2 2303 	umull	r2, r3, r2, r3
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	0119      	lsls	r1, r3, #4
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	4613      	mov	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	009a      	lsls	r2, r3, #2
 8002780:	441a      	add	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	fbb2 f2f3 	udiv	r2, r2, r3
 800278c:	4b1a      	ldr	r3, [pc, #104]	; (80027f8 <UART_SetConfig+0x118>)
 800278e:	fba3 0302 	umull	r0, r3, r3, r2
 8002792:	095b      	lsrs	r3, r3, #5
 8002794:	2064      	movs	r0, #100	; 0x64
 8002796:	fb00 f303 	mul.w	r3, r0, r3
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	011b      	lsls	r3, r3, #4
 800279e:	3332      	adds	r3, #50	; 0x32
 80027a0:	4a15      	ldr	r2, [pc, #84]	; (80027f8 <UART_SetConfig+0x118>)
 80027a2:	fba2 2303 	umull	r2, r3, r2, r3
 80027a6:	095b      	lsrs	r3, r3, #5
 80027a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027ac:	4419      	add	r1, r3
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	4613      	mov	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	009a      	lsls	r2, r3, #2
 80027b8:	441a      	add	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80027c4:	4b0c      	ldr	r3, [pc, #48]	; (80027f8 <UART_SetConfig+0x118>)
 80027c6:	fba3 0302 	umull	r0, r3, r3, r2
 80027ca:	095b      	lsrs	r3, r3, #5
 80027cc:	2064      	movs	r0, #100	; 0x64
 80027ce:	fb00 f303 	mul.w	r3, r0, r3
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	011b      	lsls	r3, r3, #4
 80027d6:	3332      	adds	r3, #50	; 0x32
 80027d8:	4a07      	ldr	r2, [pc, #28]	; (80027f8 <UART_SetConfig+0x118>)
 80027da:	fba2 2303 	umull	r2, r3, r2, r3
 80027de:	095b      	lsrs	r3, r3, #5
 80027e0:	f003 020f 	and.w	r2, r3, #15
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	440a      	add	r2, r1
 80027ea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80027ec:	bf00      	nop
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40013800 	.word	0x40013800
 80027f8:	51eb851f 	.word	0x51eb851f

080027fc <memset>:
 80027fc:	4603      	mov	r3, r0
 80027fe:	4402      	add	r2, r0
 8002800:	4293      	cmp	r3, r2
 8002802:	d100      	bne.n	8002806 <memset+0xa>
 8002804:	4770      	bx	lr
 8002806:	f803 1b01 	strb.w	r1, [r3], #1
 800280a:	e7f9      	b.n	8002800 <memset+0x4>

0800280c <__libc_init_array>:
 800280c:	b570      	push	{r4, r5, r6, lr}
 800280e:	2600      	movs	r6, #0
 8002810:	4d0c      	ldr	r5, [pc, #48]	; (8002844 <__libc_init_array+0x38>)
 8002812:	4c0d      	ldr	r4, [pc, #52]	; (8002848 <__libc_init_array+0x3c>)
 8002814:	1b64      	subs	r4, r4, r5
 8002816:	10a4      	asrs	r4, r4, #2
 8002818:	42a6      	cmp	r6, r4
 800281a:	d109      	bne.n	8002830 <__libc_init_array+0x24>
 800281c:	f000 f81a 	bl	8002854 <_init>
 8002820:	2600      	movs	r6, #0
 8002822:	4d0a      	ldr	r5, [pc, #40]	; (800284c <__libc_init_array+0x40>)
 8002824:	4c0a      	ldr	r4, [pc, #40]	; (8002850 <__libc_init_array+0x44>)
 8002826:	1b64      	subs	r4, r4, r5
 8002828:	10a4      	asrs	r4, r4, #2
 800282a:	42a6      	cmp	r6, r4
 800282c:	d105      	bne.n	800283a <__libc_init_array+0x2e>
 800282e:	bd70      	pop	{r4, r5, r6, pc}
 8002830:	f855 3b04 	ldr.w	r3, [r5], #4
 8002834:	4798      	blx	r3
 8002836:	3601      	adds	r6, #1
 8002838:	e7ee      	b.n	8002818 <__libc_init_array+0xc>
 800283a:	f855 3b04 	ldr.w	r3, [r5], #4
 800283e:	4798      	blx	r3
 8002840:	3601      	adds	r6, #1
 8002842:	e7f2      	b.n	800282a <__libc_init_array+0x1e>
 8002844:	080028c8 	.word	0x080028c8
 8002848:	080028c8 	.word	0x080028c8
 800284c:	080028c8 	.word	0x080028c8
 8002850:	080028cc 	.word	0x080028cc

08002854 <_init>:
 8002854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002856:	bf00      	nop
 8002858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800285a:	bc08      	pop	{r3}
 800285c:	469e      	mov	lr, r3
 800285e:	4770      	bx	lr

08002860 <_fini>:
 8002860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002862:	bf00      	nop
 8002864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002866:	bc08      	pop	{r3}
 8002868:	469e      	mov	lr, r3
 800286a:	4770      	bx	lr
