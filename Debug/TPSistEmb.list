
TPSistEmb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002614  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08002720  08002720  00012720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800277c  0800277c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800277c  0800277c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800277c  0800277c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800277c  0800277c  0001277c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002780  08002780  00012780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002784  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001038  20000010  08002794  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001048  08002794  00021048  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   000071e1  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bb0  00000000  00000000  0002725d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000768  00000000  00000000  00028e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000590  00000000  00000000  00029578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017664  00000000  00000000  00029b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a65a  00000000  00000000  0004116c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008186d  00000000  00000000  0004b7c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001bac  00000000  00000000  000cd034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000cebe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08002708 	.word	0x08002708

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08002708 	.word	0x08002708

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <CountingHandler>:
 */
#include "main.h"
#include "CountingHandler.h"


void CountingHandler(uint16_t* pulseCount, uint16_t* contador, UART_HandleTypeDef * huart, Cola_BaseStructTypedef * colaTx){
 800015c:	b480      	push	{r7}
 800015e:	b087      	sub	sp, #28
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	60b9      	str	r1, [r7, #8]
 8000166:	607a      	str	r2, [r7, #4]
 8000168:	603b      	str	r3, [r7, #0]

	int i, pc;
	pc = *pulseCount;
 800016a:	68fb      	ldr	r3, [r7, #12]
 800016c:	881b      	ldrh	r3, [r3, #0]
 800016e:	613b      	str	r3, [r7, #16]
	*pulseCount = 0;	// asi si lo interrumpe la callback puede seguir contando y no se crea condicion de carrera en el for
 8000170:	68fb      	ldr	r3, [r7, #12]
 8000172:	2200      	movs	r2, #0
 8000174:	801a      	strh	r2, [r3, #0]

	for(i=0; i<pc; i++){
 8000176:	2300      	movs	r3, #0
 8000178:	617b      	str	r3, [r7, #20]
 800017a:	e008      	b.n	800018e <CountingHandler+0x32>
		*contador = *contador +1;
 800017c:	68bb      	ldr	r3, [r7, #8]
 800017e:	881b      	ldrh	r3, [r3, #0]
 8000180:	3301      	adds	r3, #1
 8000182:	b29a      	uxth	r2, r3
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	801a      	strh	r2, [r3, #0]
	for(i=0; i<pc; i++){
 8000188:	697b      	ldr	r3, [r7, #20]
 800018a:	3301      	adds	r3, #1
 800018c:	617b      	str	r3, [r7, #20]
 800018e:	697a      	ldr	r2, [r7, #20]
 8000190:	693b      	ldr	r3, [r7, #16]
 8000192:	429a      	cmp	r2, r3
 8000194:	dbf2      	blt.n	800017c <CountingHandler+0x20>
		//Â¿Como le agregamos un uint16??
		//Cola_AgregarDatoCola(huart, dato)
	}

}
 8000196:	bf00      	nop
 8000198:	bf00      	nop
 800019a:	371c      	adds	r7, #28
 800019c:	46bd      	mov	sp, r7
 800019e:	bc80      	pop	{r7}
 80001a0:	4770      	bx	lr
	...

080001a4 <LedHandler>:
 	//led[num_led].GPIOx = ledx->GPIOx;
 	//led[num_led].Pin = ledx->Pin;
}
*/

void LedHandler(uint8_t* instruccion_ack, bool* flagSecuencia, bool* primeraVez){
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b084      	sub	sp, #16
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	60f8      	str	r0, [r7, #12]
 80001ac:	60b9      	str	r1, [r7, #8]
 80001ae:	607a      	str	r2, [r7, #4]

	switch(*instruccion_ack){
 80001b0:	68fb      	ldr	r3, [r7, #12]
 80001b2:	781b      	ldrb	r3, [r3, #0]
 80001b4:	3b31      	subs	r3, #49	; 0x31
 80001b6:	2b22      	cmp	r3, #34	; 0x22
 80001b8:	f200 8099 	bhi.w	80002ee <LedHandler+0x14a>
 80001bc:	a201      	add	r2, pc, #4	; (adr r2, 80001c4 <LedHandler+0x20>)
 80001be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001c2:	bf00      	nop
 80001c4:	08000251 	.word	0x08000251
 80001c8:	08000263 	.word	0x08000263
 80001cc:	08000275 	.word	0x08000275
 80001d0:	080002ef 	.word	0x080002ef
 80001d4:	080002ef 	.word	0x080002ef
 80001d8:	080002ef 	.word	0x080002ef
 80001dc:	080002ef 	.word	0x080002ef
 80001e0:	080002ef 	.word	0x080002ef
 80001e4:	080002ef 	.word	0x080002ef
 80001e8:	080002ef 	.word	0x080002ef
 80001ec:	080002ef 	.word	0x080002ef
 80001f0:	080002ef 	.word	0x080002ef
 80001f4:	080002ef 	.word	0x080002ef
 80001f8:	080002ef 	.word	0x080002ef
 80001fc:	080002ef 	.word	0x080002ef
 8000200:	080002ef 	.word	0x080002ef
 8000204:	080002ef 	.word	0x080002ef
 8000208:	080002ef 	.word	0x080002ef
 800020c:	080002ef 	.word	0x080002ef
 8000210:	080002ef 	.word	0x080002ef
 8000214:	080002ef 	.word	0x080002ef
 8000218:	080002ef 	.word	0x080002ef
 800021c:	080002ef 	.word	0x080002ef
 8000220:	080002ef 	.word	0x080002ef
 8000224:	080002ef 	.word	0x080002ef
 8000228:	080002ef 	.word	0x080002ef
 800022c:	080002ef 	.word	0x080002ef
 8000230:	080002ef 	.word	0x080002ef
 8000234:	080002ef 	.word	0x080002ef
 8000238:	080002ef 	.word	0x080002ef
 800023c:	080002b7 	.word	0x080002b7
 8000240:	080002ef 	.word	0x080002ef
 8000244:	080002ef 	.word	0x080002ef
 8000248:	080002ef 	.word	0x080002ef
 800024c:	08000287 	.word	0x08000287

	case (cmd_led1):
		//cambiar estado led 1
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000250:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000254:	4828      	ldr	r0, [pc, #160]	; (80002f8 <LedHandler+0x154>)
 8000256:	f001 f8ab 	bl	80013b0 <HAL_GPIO_TogglePin>
	    *instruccion_ack = 0;
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	2200      	movs	r2, #0
 800025e:	701a      	strb	r2, [r3, #0]
		break;
 8000260:	e045      	b.n	80002ee <LedHandler+0x14a>

	case (cmd_led2):
		//cambiar estado led 2
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000262:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000266:	4824      	ldr	r0, [pc, #144]	; (80002f8 <LedHandler+0x154>)
 8000268:	f001 f8a2 	bl	80013b0 <HAL_GPIO_TogglePin>
		*instruccion_ack = 0;
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	2200      	movs	r2, #0
 8000270:	701a      	strb	r2, [r3, #0]
		break;
 8000272:	e03c      	b.n	80002ee <LedHandler+0x14a>

	case (cmd_led3):
		//cambiar estado led 3
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 8000274:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000278:	481f      	ldr	r0, [pc, #124]	; (80002f8 <LedHandler+0x154>)
 800027a:	f001 f899 	bl	80013b0 <HAL_GPIO_TogglePin>
		*instruccion_ack = 0;
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	2200      	movs	r2, #0
 8000282:	701a      	strb	r2, [r3, #0]
		break;
 8000284:	e033      	b.n	80002ee <LedHandler+0x14a>

	case (cmd_Secuencia):
		if (*flagSecuencia == 0){
 8000286:	68bb      	ldr	r3, [r7, #8]
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	f083 0301 	eor.w	r3, r3, #1
 800028e:	b2db      	uxtb	r3, r3
 8000290:	2b00      	cmp	r3, #0
 8000292:	d006      	beq.n	80002a2 <LedHandler+0xfe>
			*primeraVez = 1;
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	2201      	movs	r2, #1
 8000298:	701a      	strb	r2, [r3, #0]
			*flagSecuencia = 1;
 800029a:	68bb      	ldr	r3, [r7, #8]
 800029c:	2201      	movs	r2, #1
 800029e:	701a      	strb	r2, [r3, #0]
 80002a0:	e005      	b.n	80002ae <LedHandler+0x10a>
		}else{
			*primeraVez = 0;//ESTE ES IMPORTANTE, PARA CUANDO RETORNE LA SECUENCIA SEGUN FLAG
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	2200      	movs	r2, #0
 80002a6:	701a      	strb	r2, [r3, #0]
			*flagSecuencia = 0;
 80002a8:	68bb      	ldr	r3, [r7, #8]
 80002aa:	2200      	movs	r2, #0
 80002ac:	701a      	strb	r2, [r3, #0]
		}
		*instruccion_ack = 0;
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	2200      	movs	r2, #0
 80002b2:	701a      	strb	r2, [r3, #0]
		break;
 80002b4:	e01b      	b.n	80002ee <LedHandler+0x14a>

	case (cmd_Apagado):
		*primeraVez = 0;
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	2200      	movs	r2, #0
 80002ba:	701a      	strb	r2, [r3, #0]
		*flagSecuencia = 0;//??
 80002bc:	68bb      	ldr	r3, [r7, #8]
 80002be:	2200      	movs	r2, #0
 80002c0:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80002c2:	2200      	movs	r2, #0
 80002c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002c8:	480b      	ldr	r0, [pc, #44]	; (80002f8 <LedHandler+0x154>)
 80002ca:	f001 f859 	bl	8001380 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80002ce:	2200      	movs	r2, #0
 80002d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002d4:	4808      	ldr	r0, [pc, #32]	; (80002f8 <LedHandler+0x154>)
 80002d6:	f001 f853 	bl	8001380 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80002da:	2200      	movs	r2, #0
 80002dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002e0:	4805      	ldr	r0, [pc, #20]	; (80002f8 <LedHandler+0x154>)
 80002e2:	f001 f84d 	bl	8001380 <HAL_GPIO_WritePin>
		*instruccion_ack = 0;
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	2200      	movs	r2, #0
 80002ea:	701a      	strb	r2, [r3, #0]
		break;
 80002ec:	bf00      	nop


	}

}
 80002ee:	bf00      	nop
 80002f0:	3710      	adds	r7, #16
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	40010c00 	.word	0x40010c00

080002fc <LedSequence>:


void LedSequence(int * pEstadoLeds, bool* primeraVez){
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	6039      	str	r1, [r7, #0]

	estado_leds estadoLeds = *pEstadoLeds;
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	73fb      	strb	r3, [r7, #15]
	uint32_t t_actual;
	static uint32_t t_evento;

	if (*primeraVez == 1){
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d01c      	beq.n	800034e <LedSequence+0x52>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000314:	2200      	movs	r2, #0
 8000316:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800031a:	4846      	ldr	r0, [pc, #280]	; (8000434 <LedSequence+0x138>)
 800031c:	f001 f830 	bl	8001380 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000320:	2200      	movs	r2, #0
 8000322:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000326:	4843      	ldr	r0, [pc, #268]	; (8000434 <LedSequence+0x138>)
 8000328:	f001 f82a 	bl	8001380 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800032c:	2200      	movs	r2, #0
 800032e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000332:	4840      	ldr	r0, [pc, #256]	; (8000434 <LedSequence+0x138>)
 8000334:	f001 f824 	bl	8001380 <HAL_GPIO_WritePin>
		estadoLeds = PRENDIDO_LED1;
 8000338:	2300      	movs	r3, #0
 800033a:	73fb      	strb	r3, [r7, #15]
		t_evento = HAL_GetTick();
 800033c:	f000 fcd4 	bl	8000ce8 <HAL_GetTick>
 8000340:	4603      	mov	r3, r0
 8000342:	4a3d      	ldr	r2, [pc, #244]	; (8000438 <LedSequence+0x13c>)
 8000344:	6013      	str	r3, [r2, #0]
		t_actual = t_evento;
 8000346:	4b3c      	ldr	r3, [pc, #240]	; (8000438 <LedSequence+0x13c>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	60bb      	str	r3, [r7, #8]
 800034c:	e002      	b.n	8000354 <LedSequence+0x58>
	}else{t_actual = HAL_GetTick();}
 800034e:	f000 fccb 	bl	8000ce8 <HAL_GetTick>
 8000352:	60b8      	str	r0, [r7, #8]

	switch (estadoLeds){
 8000354:	7bfb      	ldrb	r3, [r7, #15]
 8000356:	2b03      	cmp	r3, #3
 8000358:	d865      	bhi.n	8000426 <LedSequence+0x12a>
 800035a:	a201      	add	r2, pc, #4	; (adr r2, 8000360 <LedSequence+0x64>)
 800035c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000360:	08000371 	.word	0x08000371
 8000364:	08000395 	.word	0x08000395
 8000368:	080003b9 	.word	0x080003b9
 800036c:	080003dd 	.word	0x080003dd

	case PRENDIDO_LED1:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000370:	2201      	movs	r2, #1
 8000372:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000376:	482f      	ldr	r0, [pc, #188]	; (8000434 <LedSequence+0x138>)
 8000378:	f001 f802 	bl	8001380 <HAL_GPIO_WritePin>

		if(t_actual - t_evento > MAX_TIME_MS){
 800037c:	4b2e      	ldr	r3, [pc, #184]	; (8000438 <LedSequence+0x13c>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	68ba      	ldr	r2, [r7, #8]
 8000382:	1ad3      	subs	r3, r2, r3
 8000384:	2b7d      	cmp	r3, #125	; 0x7d
 8000386:	d947      	bls.n	8000418 <LedSequence+0x11c>
			t_evento = t_actual;
 8000388:	4a2b      	ldr	r2, [pc, #172]	; (8000438 <LedSequence+0x13c>)
 800038a:	68bb      	ldr	r3, [r7, #8]
 800038c:	6013      	str	r3, [r2, #0]
			estadoLeds = PRENDIDO_LED2;
 800038e:	2301      	movs	r3, #1
 8000390:	73fb      	strb	r3, [r7, #15]
		}
		break;
 8000392:	e041      	b.n	8000418 <LedSequence+0x11c>

	case PRENDIDO_LED2:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000394:	2201      	movs	r2, #1
 8000396:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800039a:	4826      	ldr	r0, [pc, #152]	; (8000434 <LedSequence+0x138>)
 800039c:	f000 fff0 	bl	8001380 <HAL_GPIO_WritePin>

		if(t_actual - t_evento > MAX_TIME_MS){
 80003a0:	4b25      	ldr	r3, [pc, #148]	; (8000438 <LedSequence+0x13c>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	68ba      	ldr	r2, [r7, #8]
 80003a6:	1ad3      	subs	r3, r2, r3
 80003a8:	2b7d      	cmp	r3, #125	; 0x7d
 80003aa:	d937      	bls.n	800041c <LedSequence+0x120>
			t_evento = t_actual;
 80003ac:	4a22      	ldr	r2, [pc, #136]	; (8000438 <LedSequence+0x13c>)
 80003ae:	68bb      	ldr	r3, [r7, #8]
 80003b0:	6013      	str	r3, [r2, #0]
			estadoLeds = PRENDIDO_LED3;
 80003b2:	2302      	movs	r3, #2
 80003b4:	73fb      	strb	r3, [r7, #15]
		}
		break;
 80003b6:	e031      	b.n	800041c <LedSequence+0x120>

	case PRENDIDO_LED3:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80003b8:	2201      	movs	r2, #1
 80003ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003be:	481d      	ldr	r0, [pc, #116]	; (8000434 <LedSequence+0x138>)
 80003c0:	f000 ffde 	bl	8001380 <HAL_GPIO_WritePin>
		if(t_actual - t_evento > MAX_TIME_MS){
 80003c4:	4b1c      	ldr	r3, [pc, #112]	; (8000438 <LedSequence+0x13c>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	68ba      	ldr	r2, [r7, #8]
 80003ca:	1ad3      	subs	r3, r2, r3
 80003cc:	2b7d      	cmp	r3, #125	; 0x7d
 80003ce:	d927      	bls.n	8000420 <LedSequence+0x124>
			t_evento = t_actual;
 80003d0:	4a19      	ldr	r2, [pc, #100]	; (8000438 <LedSequence+0x13c>)
 80003d2:	68bb      	ldr	r3, [r7, #8]
 80003d4:	6013      	str	r3, [r2, #0]
			estadoLeds = APAGADO_LEDS;
 80003d6:	2303      	movs	r3, #3
 80003d8:	73fb      	strb	r3, [r7, #15]
		}
		break;
 80003da:	e021      	b.n	8000420 <LedSequence+0x124>

	case APAGADO_LEDS:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80003dc:	2200      	movs	r2, #0
 80003de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003e2:	4814      	ldr	r0, [pc, #80]	; (8000434 <LedSequence+0x138>)
 80003e4:	f000 ffcc 	bl	8001380 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80003e8:	2200      	movs	r2, #0
 80003ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003ee:	4811      	ldr	r0, [pc, #68]	; (8000434 <LedSequence+0x138>)
 80003f0:	f000 ffc6 	bl	8001380 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80003f4:	2200      	movs	r2, #0
 80003f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003fa:	480e      	ldr	r0, [pc, #56]	; (8000434 <LedSequence+0x138>)
 80003fc:	f000 ffc0 	bl	8001380 <HAL_GPIO_WritePin>

		if(t_actual - t_evento > MAX_TIME_MS){
 8000400:	4b0d      	ldr	r3, [pc, #52]	; (8000438 <LedSequence+0x13c>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	68ba      	ldr	r2, [r7, #8]
 8000406:	1ad3      	subs	r3, r2, r3
 8000408:	2b7d      	cmp	r3, #125	; 0x7d
 800040a:	d90b      	bls.n	8000424 <LedSequence+0x128>
			t_evento = t_actual;
 800040c:	4a0a      	ldr	r2, [pc, #40]	; (8000438 <LedSequence+0x13c>)
 800040e:	68bb      	ldr	r3, [r7, #8]
 8000410:	6013      	str	r3, [r2, #0]
			estadoLeds = PRENDIDO_LED1;
 8000412:	2300      	movs	r3, #0
 8000414:	73fb      	strb	r3, [r7, #15]
		}
		break;
 8000416:	e005      	b.n	8000424 <LedSequence+0x128>
		break;
 8000418:	bf00      	nop
 800041a:	e004      	b.n	8000426 <LedSequence+0x12a>
		break;
 800041c:	bf00      	nop
 800041e:	e002      	b.n	8000426 <LedSequence+0x12a>
		break;
 8000420:	bf00      	nop
 8000422:	e000      	b.n	8000426 <LedSequence+0x12a>
		break;
 8000424:	bf00      	nop
	}

	primeraVez = 0;
 8000426:	2300      	movs	r3, #0
 8000428:	603b      	str	r3, [r7, #0]

}
 800042a:	bf00      	nop
 800042c:	3710      	adds	r7, #16
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	40010c00 	.word	0x40010c00
 8000438:	2000002c 	.word	0x2000002c

0800043c <ProcessRxMsg>:

#include "main.h"
#include "ProcessRxMsg.h"


void ProcessRxMsg(UART_HandleTypeDef * huart1, uint8_t * rx_data, Cola_BaseStructTypedef * colaRx, Cola_BaseStructTypedef * colaTx, uint8_t *instruccion_ack, int* pEstadoActual){
 800043c:	b580      	push	{r7, lr}
 800043e:	b08a      	sub	sp, #40	; 0x28
 8000440:	af00      	add	r7, sp, #0
 8000442:	60f8      	str	r0, [r7, #12]
 8000444:	60b9      	str	r1, [r7, #8]
 8000446:	607a      	str	r2, [r7, #4]
 8000448:	603b      	str	r3, [r7, #0]

	int estadoActual = *pEstadoActual;
 800044a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	627b      	str	r3, [r7, #36]	; 0x24
	// recepcionDatosFlag
	// maquina de estado:
	// en realidad desacolar(cola) = caracter
	// estadoActual depende de caracter

	switch(estadoActual){
 8000450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000452:	2b02      	cmp	r3, #2
 8000454:	d078      	beq.n	8000548 <ProcessRxMsg+0x10c>
 8000456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000458:	2b02      	cmp	r3, #2
 800045a:	f300 80c7 	bgt.w	80005ec <ProcessRxMsg+0x1b0>
 800045e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000460:	2b00      	cmp	r3, #0
 8000462:	d003      	beq.n	800046c <ProcessRxMsg+0x30>
 8000464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000466:	2b01      	cmp	r3, #1
 8000468:	d028      	beq.n	80004bc <ProcessRxMsg+0x80>

			*pEstadoActual = estadoActual;
			//devuelve (por referencia) 1, 2, 3 S o O.
	}

}
 800046a:	e0bf      	b.n	80005ec <ProcessRxMsg+0x1b0>
				if (Cola_RetirarDatoCola (colaRx,&dato) != 0x00){
 800046c:	f107 0313 	add.w	r3, r7, #19
 8000470:	4619      	mov	r1, r3
 8000472:	6878      	ldr	r0, [r7, #4]
 8000474:	f000 f97e 	bl	8000774 <Cola_RetirarDatoCola>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	f000 80b3 	beq.w	80005e6 <ProcessRxMsg+0x1aa>
					if (dato == 1 || dato == 2 || dato == 3 || dato == 'S' || dato == 'O'){
 8000480:	7cfb      	ldrb	r3, [r7, #19]
 8000482:	2b01      	cmp	r3, #1
 8000484:	d00b      	beq.n	800049e <ProcessRxMsg+0x62>
 8000486:	7cfb      	ldrb	r3, [r7, #19]
 8000488:	2b02      	cmp	r3, #2
 800048a:	d008      	beq.n	800049e <ProcessRxMsg+0x62>
 800048c:	7cfb      	ldrb	r3, [r7, #19]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d005      	beq.n	800049e <ProcessRxMsg+0x62>
 8000492:	7cfb      	ldrb	r3, [r7, #19]
 8000494:	2b53      	cmp	r3, #83	; 0x53
 8000496:	d002      	beq.n	800049e <ProcessRxMsg+0x62>
 8000498:	7cfb      	ldrb	r3, [r7, #19]
 800049a:	2b4f      	cmp	r3, #79	; 0x4f
 800049c:	d107      	bne.n	80004ae <ProcessRxMsg+0x72>
						tiempoRecepcion0 = HAL_GetTick();
 800049e:	f000 fc23 	bl	8000ce8 <HAL_GetTick>
 80004a2:	6178      	str	r0, [r7, #20]
						instruccion = dato;
 80004a4:	7cfb      	ldrb	r3, [r7, #19]
 80004a6:	77fb      	strb	r3, [r7, #31]
						estadoActual = CARACTER_VALIDO_1;
 80004a8:	2301      	movs	r3, #1
 80004aa:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 80004ac:	e09b      	b.n	80005e6 <ProcessRxMsg+0x1aa>
						instruccion = 0;
 80004ae:	2300      	movs	r3, #0
 80004b0:	77fb      	strb	r3, [r7, #31]
						enviarACola(MSG_ERROR,colaTx);
 80004b2:	6839      	ldr	r1, [r7, #0]
 80004b4:	484f      	ldr	r0, [pc, #316]	; (80005f4 <ProcessRxMsg+0x1b8>)
 80004b6:	f000 f8a3 	bl	8000600 <enviarACola>
				break;
 80004ba:	e094      	b.n	80005e6 <ProcessRxMsg+0x1aa>
			if (Cola_RetirarDatoCola (colaRx,&dato) != 0x00){
 80004bc:	f107 0313 	add.w	r3, r7, #19
 80004c0:	4619      	mov	r1, r3
 80004c2:	6878      	ldr	r0, [r7, #4]
 80004c4:	f000 f956 	bl	8000774 <Cola_RetirarDatoCola>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f000 808d 	beq.w	80005ea <ProcessRxMsg+0x1ae>
				tiempoRecepcionActual = HAL_GetTick();
 80004d0:	f000 fc0a 	bl	8000ce8 <HAL_GetTick>
 80004d4:	6238      	str	r0, [r7, #32]
				if (dato == 0x0D) {
 80004d6:	7cfb      	ldrb	r3, [r7, #19]
 80004d8:	2b0d      	cmp	r3, #13
 80004da:	d111      	bne.n	8000500 <ProcessRxMsg+0xc4>
					if(tiempoRecepcionActual - tiempoRecepcion0 < TMAX){
 80004dc:	6a3a      	ldr	r2, [r7, #32]
 80004de:	697b      	ldr	r3, [r7, #20]
 80004e0:	1ad3      	subs	r3, r2, r3
 80004e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80004e6:	d202      	bcs.n	80004ee <ProcessRxMsg+0xb2>
						estadoActual = CARACTER_VALIDO_2;
 80004e8:	2302      	movs	r3, #2
 80004ea:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 80004ec:	e07d      	b.n	80005ea <ProcessRxMsg+0x1ae>
						enviarACola(MSG_TIMEOUT,colaTx);
 80004ee:	6839      	ldr	r1, [r7, #0]
 80004f0:	4841      	ldr	r0, [pc, #260]	; (80005f8 <ProcessRxMsg+0x1bc>)
 80004f2:	f000 f885 	bl	8000600 <enviarACola>
						instruccion = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	77fb      	strb	r3, [r7, #31]
						estadoActual = OCIOSO;
 80004fa:	2300      	movs	r3, #0
 80004fc:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 80004fe:	e074      	b.n	80005ea <ProcessRxMsg+0x1ae>
				}else if(dato == 1 || dato == 2 || dato == 3 || dato == 'S' || dato == 'O'){
 8000500:	7cfb      	ldrb	r3, [r7, #19]
 8000502:	2b01      	cmp	r3, #1
 8000504:	d00b      	beq.n	800051e <ProcessRxMsg+0xe2>
 8000506:	7cfb      	ldrb	r3, [r7, #19]
 8000508:	2b02      	cmp	r3, #2
 800050a:	d008      	beq.n	800051e <ProcessRxMsg+0xe2>
 800050c:	7cfb      	ldrb	r3, [r7, #19]
 800050e:	2b03      	cmp	r3, #3
 8000510:	d005      	beq.n	800051e <ProcessRxMsg+0xe2>
 8000512:	7cfb      	ldrb	r3, [r7, #19]
 8000514:	2b53      	cmp	r3, #83	; 0x53
 8000516:	d002      	beq.n	800051e <ProcessRxMsg+0xe2>
 8000518:	7cfb      	ldrb	r3, [r7, #19]
 800051a:	2b4f      	cmp	r3, #79	; 0x4f
 800051c:	d10b      	bne.n	8000536 <ProcessRxMsg+0xfa>
					enviarACola(MSG_ERROR,colaTx);
 800051e:	6839      	ldr	r1, [r7, #0]
 8000520:	4834      	ldr	r0, [pc, #208]	; (80005f4 <ProcessRxMsg+0x1b8>)
 8000522:	f000 f86d 	bl	8000600 <enviarACola>
					tiempoRecepcion0 = HAL_GetTick();
 8000526:	f000 fbdf 	bl	8000ce8 <HAL_GetTick>
 800052a:	6178      	str	r0, [r7, #20]
					instruccion = dato;
 800052c:	7cfb      	ldrb	r3, [r7, #19]
 800052e:	77fb      	strb	r3, [r7, #31]
					estadoActual = CARACTER_VALIDO_1;
 8000530:	2301      	movs	r3, #1
 8000532:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8000534:	e059      	b.n	80005ea <ProcessRxMsg+0x1ae>
					enviarACola(MSG_ERROR,colaTx);
 8000536:	6839      	ldr	r1, [r7, #0]
 8000538:	482e      	ldr	r0, [pc, #184]	; (80005f4 <ProcessRxMsg+0x1b8>)
 800053a:	f000 f861 	bl	8000600 <enviarACola>
					instruccion = 0;
 800053e:	2300      	movs	r3, #0
 8000540:	77fb      	strb	r3, [r7, #31]
					estadoActual = OCIOSO;
 8000542:	2300      	movs	r3, #0
 8000544:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8000546:	e050      	b.n	80005ea <ProcessRxMsg+0x1ae>
			if (Cola_RetirarDatoCola (colaRx, &dato) != 0x00){
 8000548:	f107 0313 	add.w	r3, r7, #19
 800054c:	4619      	mov	r1, r3
 800054e:	6878      	ldr	r0, [r7, #4]
 8000550:	f000 f910 	bl	8000774 <Cola_RetirarDatoCola>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d041      	beq.n	80005de <ProcessRxMsg+0x1a2>
				tiempoRecepcionActual = HAL_GetTick();
 800055a:	f000 fbc5 	bl	8000ce8 <HAL_GetTick>
 800055e:	6238      	str	r0, [r7, #32]
				if (dato == 0x0A){
 8000560:	7cfb      	ldrb	r3, [r7, #19]
 8000562:	2b0a      	cmp	r3, #10
 8000564:	d118      	bne.n	8000598 <ProcessRxMsg+0x15c>
					if(tiempoRecepcionActual - tiempoRecepcion0 < TMAX){
 8000566:	6a3a      	ldr	r2, [r7, #32]
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	1ad3      	subs	r3, r2, r3
 800056c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000570:	d209      	bcs.n	8000586 <ProcessRxMsg+0x14a>
						enviarACola(MSG_OK,colaTx);
 8000572:	6839      	ldr	r1, [r7, #0]
 8000574:	4821      	ldr	r0, [pc, #132]	; (80005fc <ProcessRxMsg+0x1c0>)
 8000576:	f000 f843 	bl	8000600 <enviarACola>
						*instruccion_ack = instruccion;
 800057a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800057c:	7ffa      	ldrb	r2, [r7, #31]
 800057e:	701a      	strb	r2, [r3, #0]
						estadoActual = OCIOSO;
 8000580:	2300      	movs	r3, #0
 8000582:	627b      	str	r3, [r7, #36]	; 0x24
 8000584:	e02b      	b.n	80005de <ProcessRxMsg+0x1a2>
						enviarACola(MSG_TIMEOUT,colaTx);
 8000586:	6839      	ldr	r1, [r7, #0]
 8000588:	481b      	ldr	r0, [pc, #108]	; (80005f8 <ProcessRxMsg+0x1bc>)
 800058a:	f000 f839 	bl	8000600 <enviarACola>
						instruccion = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	77fb      	strb	r3, [r7, #31]
						estadoActual = OCIOSO;
 8000592:	2300      	movs	r3, #0
 8000594:	627b      	str	r3, [r7, #36]	; 0x24
 8000596:	e022      	b.n	80005de <ProcessRxMsg+0x1a2>
				}else if(dato == 1 || dato == 2 || dato == 3 || dato == 'S' || dato == 'O'){
 8000598:	7cfb      	ldrb	r3, [r7, #19]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d00b      	beq.n	80005b6 <ProcessRxMsg+0x17a>
 800059e:	7cfb      	ldrb	r3, [r7, #19]
 80005a0:	2b02      	cmp	r3, #2
 80005a2:	d008      	beq.n	80005b6 <ProcessRxMsg+0x17a>
 80005a4:	7cfb      	ldrb	r3, [r7, #19]
 80005a6:	2b03      	cmp	r3, #3
 80005a8:	d005      	beq.n	80005b6 <ProcessRxMsg+0x17a>
 80005aa:	7cfb      	ldrb	r3, [r7, #19]
 80005ac:	2b53      	cmp	r3, #83	; 0x53
 80005ae:	d002      	beq.n	80005b6 <ProcessRxMsg+0x17a>
 80005b0:	7cfb      	ldrb	r3, [r7, #19]
 80005b2:	2b4f      	cmp	r3, #79	; 0x4f
 80005b4:	d10b      	bne.n	80005ce <ProcessRxMsg+0x192>
					enviarACola(MSG_ERROR,colaTx);
 80005b6:	6839      	ldr	r1, [r7, #0]
 80005b8:	480e      	ldr	r0, [pc, #56]	; (80005f4 <ProcessRxMsg+0x1b8>)
 80005ba:	f000 f821 	bl	8000600 <enviarACola>
					tiempoRecepcion1 = HAL_GetTick();
 80005be:	f000 fb93 	bl	8000ce8 <HAL_GetTick>
 80005c2:	61b8      	str	r0, [r7, #24]
					instruccion = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	77fb      	strb	r3, [r7, #31]
					estadoActual = CARACTER_VALIDO_1;
 80005c8:	2301      	movs	r3, #1
 80005ca:	627b      	str	r3, [r7, #36]	; 0x24
 80005cc:	e007      	b.n	80005de <ProcessRxMsg+0x1a2>
					enviarACola(MSG_ERROR,colaTx);
 80005ce:	6839      	ldr	r1, [r7, #0]
 80005d0:	4808      	ldr	r0, [pc, #32]	; (80005f4 <ProcessRxMsg+0x1b8>)
 80005d2:	f000 f815 	bl	8000600 <enviarACola>
					instruccion = 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	77fb      	strb	r3, [r7, #31]
					estadoActual = OCIOSO;
 80005da:	2300      	movs	r3, #0
 80005dc:	627b      	str	r3, [r7, #36]	; 0x24
			*pEstadoActual = estadoActual;
 80005de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005e2:	601a      	str	r2, [r3, #0]
}
 80005e4:	e002      	b.n	80005ec <ProcessRxMsg+0x1b0>
				break;
 80005e6:	bf00      	nop
 80005e8:	e000      	b.n	80005ec <ProcessRxMsg+0x1b0>
			break;
 80005ea:	bf00      	nop
}
 80005ec:	bf00      	nop
 80005ee:	3728      	adds	r7, #40	; 0x28
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	08002720 	.word	0x08002720
 80005f8:	08002728 	.word	0x08002728
 80005fc:	08002734 	.word	0x08002734

08000600 <enviarACola>:

void enviarACola(char* cadena, Cola_BaseStructTypedef* colaTx){
 8000600:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000604:	b087      	sub	sp, #28
 8000606:	af00      	add	r7, sp, #0
 8000608:	6078      	str	r0, [r7, #4]
 800060a:	6039      	str	r1, [r7, #0]
 800060c:	466b      	mov	r3, sp
 800060e:	461e      	mov	r6, r3
//encapsular en enviarACola(MSG_ERROR,cola_tx);
//tal vez que sea bloqueante (que no lo pueda interrumpir otro proceso de llenado de cola)
	int i;
	int longitud = strlen(cadena);
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f7ff fd9b 	bl	800014c <strlen>
 8000616:	4603      	mov	r3, r0
 8000618:	613b      	str	r3, [r7, #16]
	unsigned char bytes[longitud]; // Arreglo de bytes (8 bits cada uno)
 800061a:	6939      	ldr	r1, [r7, #16]
 800061c:	1e4b      	subs	r3, r1, #1
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	460a      	mov	r2, r1
 8000622:	2300      	movs	r3, #0
 8000624:	4690      	mov	r8, r2
 8000626:	4699      	mov	r9, r3
 8000628:	f04f 0200 	mov.w	r2, #0
 800062c:	f04f 0300 	mov.w	r3, #0
 8000630:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000634:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000638:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800063c:	460a      	mov	r2, r1
 800063e:	2300      	movs	r3, #0
 8000640:	4614      	mov	r4, r2
 8000642:	461d      	mov	r5, r3
 8000644:	f04f 0200 	mov.w	r2, #0
 8000648:	f04f 0300 	mov.w	r3, #0
 800064c:	00eb      	lsls	r3, r5, #3
 800064e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000652:	00e2      	lsls	r2, r4, #3
 8000654:	460b      	mov	r3, r1
 8000656:	3307      	adds	r3, #7
 8000658:	08db      	lsrs	r3, r3, #3
 800065a:	00db      	lsls	r3, r3, #3
 800065c:	ebad 0d03 	sub.w	sp, sp, r3
 8000660:	466b      	mov	r3, sp
 8000662:	3300      	adds	r3, #0
 8000664:	60bb      	str	r3, [r7, #8]
	strncpy((char *)bytes, cadena, longitud);	// la cadena es descompuesta en bytes
 8000666:	693b      	ldr	r3, [r7, #16]
 8000668:	461a      	mov	r2, r3
 800066a:	6879      	ldr	r1, [r7, #4]
 800066c:	68b8      	ldr	r0, [r7, #8]
 800066e:	f002 f813 	bl	8002698 <strncpy>
												// y metida al array "bytes"
	for (i = 0; i<longitud; i++){
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
 8000676:	e00a      	b.n	800068e <enviarACola+0x8e>
		Cola_AgregarDatoCola (colaTx, bytes[i]);
 8000678:	68ba      	ldr	r2, [r7, #8]
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	4413      	add	r3, r2
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	4619      	mov	r1, r3
 8000682:	6838      	ldr	r0, [r7, #0]
 8000684:	f000 f846 	bl	8000714 <Cola_AgregarDatoCola>
	for (i = 0; i<longitud; i++){
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	3301      	adds	r3, #1
 800068c:	617b      	str	r3, [r7, #20]
 800068e:	697a      	ldr	r2, [r7, #20]
 8000690:	693b      	ldr	r3, [r7, #16]
 8000692:	429a      	cmp	r2, r3
 8000694:	dbf0      	blt.n	8000678 <enviarACola+0x78>
 8000696:	46b5      	mov	sp, r6
	}
}
 8000698:	bf00      	nop
 800069a:	371c      	adds	r7, #28
 800069c:	46bd      	mov	sp, r7
 800069e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080006a2 <SendData>:

#include "main.h"
#include "SendData.h"


void SendData(UART_HandleTypeDef * huart, Cola_BaseStructTypedef * colaTx){
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b084      	sub	sp, #16
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	6078      	str	r0, [r7, #4]
 80006aa:	6039      	str	r1, [r7, #0]

	uint8_t dato;

	while ( Cola_RetirarDatoCola(colaTx, &dato) != 0x00){
 80006ac:	e007      	b.n	80006be <SendData+0x1c>
		HAL_UART_Transmit(huart, &dato, 1, 1000);
 80006ae:	f107 010f 	add.w	r1, r7, #15
 80006b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b6:	2201      	movs	r2, #1
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f001 fafa 	bl	8001cb2 <HAL_UART_Transmit>
	while ( Cola_RetirarDatoCola(colaTx, &dato) != 0x00){
 80006be:	f107 030f 	add.w	r3, r7, #15
 80006c2:	4619      	mov	r1, r3
 80006c4:	6838      	ldr	r0, [r7, #0]
 80006c6:	f000 f855 	bl	8000774 <Cola_RetirarDatoCola>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d1ee      	bne.n	80006ae <SendData+0xc>
	}
}
 80006d0:	bf00      	nop
 80006d2:	bf00      	nop
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <Cola_InicializarCola>:
 * \details Se inicializa la estructura apuntada por s del tipo @ref Cola_BaseStructTypedef,
 * en particular se carga el puntero al buffer y la longitud de la cola.
 *
 */
void Cola_InicializarCola (Cola_BaseStructTypedef *s,TColaDato_Typedef *buf ,uint16_t Long)
{
 80006da:	b480      	push	{r7}
 80006dc:	b085      	sub	sp, #20
 80006de:	af00      	add	r7, sp, #0
 80006e0:	60f8      	str	r0, [r7, #12]
 80006e2:	60b9      	str	r1, [r7, #8]
 80006e4:	4613      	mov	r3, r2
 80006e6:	80fb      	strh	r3, [r7, #6]
	s -> LongitudCola 	= Long;
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	88fa      	ldrh	r2, [r7, #6]
 80006ec:	81da      	strh	r2, [r3, #14]
	s->CantidadCola 	= 0;
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	2200      	movs	r2, #0
 80006f2:	819a      	strh	r2, [r3, #12]
	s->InicioCola		= buf;
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	68ba      	ldr	r2, [r7, #8]
 80006f8:	601a      	str	r2, [r3, #0]
	s->EntradaCola 		= s->InicioCola;
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	605a      	str	r2, [r3, #4]
	s->SalidaCola 		= s->InicioCola;
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	609a      	str	r2, [r3, #8]
	return;
 800070a:	bf00      	nop
}
 800070c:	3714      	adds	r7, #20
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr

08000714 <Cola_AgregarDatoCola>:
  * 	- COLA_COLA_LLENA: Si la cola estï¿½ llena y no fue posible agregar el dato.
  * 	- COLA_COLA_OK: La operaciï¿½n fue satisfactoria, el dato se agregï¿½ a la cola.
  */

TColaStatus_Typedef	Cola_AgregarDatoCola (Cola_BaseStructTypedef *s,TColaDato_Typedef dato)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	460b      	mov	r3, r1
 800071e:	70fb      	strb	r3, [r7, #3]
	if( s->CantidadCola == s->LongitudCola)	// Condiciï¿½n de cola llena
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	899a      	ldrh	r2, [r3, #12]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	89db      	ldrh	r3, [r3, #14]
 8000728:	429a      	cmp	r2, r3
 800072a:	d101      	bne.n	8000730 <Cola_AgregarDatoCola+0x1c>
	{
		return COLA_COLA_LLENA;
 800072c:	2301      	movs	r3, #1
 800072e:	e01c      	b.n	800076a <Cola_AgregarDatoCola+0x56>
	}
	else
	{
		*(s->EntradaCola) = dato;			// Agrego el dato a la cola en la ubicacion del puntero EntradaCola
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	78fa      	ldrb	r2, [r7, #3]
 8000736:	701a      	strb	r2, [r3, #0]
		(s->EntradaCola)++;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	1c5a      	adds	r2, r3, #1
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	605a      	str	r2, [r3, #4]


		if ((s->EntradaCola) == (s->InicioCola + s->LongitudCola))	// Se incrementa el puntero de entrada y se pregunta si llegï¿½ a la ï¿½ltima posiciï¿½n reservada de memoria
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	685a      	ldr	r2, [r3, #4]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	6879      	ldr	r1, [r7, #4]
 800074c:	89c9      	ldrh	r1, [r1, #14]
 800074e:	440b      	add	r3, r1
 8000750:	429a      	cmp	r2, r3
 8000752:	d103      	bne.n	800075c <Cola_AgregarDatoCola+0x48>
		{
			s->EntradaCola = s->InicioCola;								// Si llegï¿½ al final de la memoria reservada, comienza desde el principio (cola circular)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	605a      	str	r2, [r3, #4]
		}
		s->CantidadCola ++;				// Incremento el contador de datos en la cola
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	899b      	ldrh	r3, [r3, #12]
 8000760:	3301      	adds	r3, #1
 8000762:	b29a      	uxth	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	819a      	strh	r2, [r3, #12]
		return COLA_OK;
 8000768:	2302      	movs	r3, #2
	}
}
 800076a:	4618      	mov	r0, r3
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr

08000774 <Cola_RetirarDatoCola>:
  *  - COLA_OK: Si fue factible retirar el dato.
  *  - COLA_VACIA: Si el no hay datos a retirar.
  */

TColaStatus_Typedef	Cola_RetirarDatoCola (Cola_BaseStructTypedef *s,TColaDato_Typedef *dato)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
	if(s->CantidadCola)													// Ingresa si hay datos en la cola
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	899b      	ldrh	r3, [r3, #12]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d01e      	beq.n	80007c4 <Cola_RetirarDatoCola+0x50>
	{
		*dato = *(s->SalidaCola);											// Retiro el dato correspondiente a la ubicacion de salidaCola
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	689b      	ldr	r3, [r3, #8]
 800078a:	781a      	ldrb	r2, [r3, #0]
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	701a      	strb	r2, [r3, #0]
		(s->SalidaCola)++;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	689b      	ldr	r3, [r3, #8]
 8000794:	1c5a      	adds	r2, r3, #1
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	609a      	str	r2, [r3, #8]

		if ((s->SalidaCola) == (s->InicioCola + s->LongitudCola))	// Verifica que el puntero no estï¿½ al final de la cola
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	689a      	ldr	r2, [r3, #8]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	6879      	ldr	r1, [r7, #4]
 80007a4:	89c9      	ldrh	r1, [r1, #14]
 80007a6:	440b      	add	r3, r1
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d103      	bne.n	80007b4 <Cola_RetirarDatoCola+0x40>
		{
			s->SalidaCola = s->InicioCola;								// Si es asi, la inicializa al principio (Cola circular)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	609a      	str	r2, [r3, #8]
		}
		s->CantidadCola --;												// Decremento la cantidad de datos en la cola
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	899b      	ldrh	r3, [r3, #12]
 80007b8:	3b01      	subs	r3, #1
 80007ba:	b29a      	uxth	r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	819a      	strh	r2, [r3, #12]
		return COLA_OK;
 80007c0:	2302      	movs	r3, #2
 80007c2:	e000      	b.n	80007c6 <Cola_RetirarDatoCola+0x52>
	}
	else
	{
		return COLA_COLA_VACIA;
 80007c4:	2300      	movs	r3, #0
	}
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr

080007d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint16_t contador = 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007da:	f000 fa2d 	bl	8000c38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007de:	f000 f859 	bl	8000894 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  Cola_InicializarCola(&cola_rx, buffer_rx, MAX_BUFFER);
 80007e2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80007e6:	491e      	ldr	r1, [pc, #120]	; (8000860 <main+0x90>)
 80007e8:	481e      	ldr	r0, [pc, #120]	; (8000864 <main+0x94>)
 80007ea:	f7ff ff76 	bl	80006da <Cola_InicializarCola>
  Cola_InicializarCola(&cola_tx, buffer_tx, MAX_BUFFER);
 80007ee:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80007f2:	491d      	ldr	r1, [pc, #116]	; (8000868 <main+0x98>)
 80007f4:	481d      	ldr	r0, [pc, #116]	; (800086c <main+0x9c>)
 80007f6:	f7ff ff70 	bl	80006da <Cola_InicializarCola>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fa:	f000 f8b1 	bl	8000960 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007fe:	f000 f885 	bl	800090c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8000802:	2201      	movs	r2, #1
 8000804:	491a      	ldr	r1, [pc, #104]	; (8000870 <main+0xa0>)
 8000806:	481b      	ldr	r0, [pc, #108]	; (8000874 <main+0xa4>)
 8000808:	f001 fae5 	bl	8001dd6 <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart1, (uint8_t *)MENSAJE_BIENVENIDA, strlen(MENSAJE_BIENVENIDA), 1000);
 800080c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000810:	2219      	movs	r2, #25
 8000812:	4919      	ldr	r1, [pc, #100]	; (8000878 <main+0xa8>)
 8000814:	4817      	ldr	r0, [pc, #92]	; (8000874 <main+0xa4>)
 8000816:	f001 fa4c 	bl	8001cb2 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ProcessRxMsg(&huart1, &rx_data, &cola_rx, &cola_tx, &instruccion_ack, &estadoActual);
 800081a:	4b18      	ldr	r3, [pc, #96]	; (800087c <main+0xac>)
 800081c:	9301      	str	r3, [sp, #4]
 800081e:	4b18      	ldr	r3, [pc, #96]	; (8000880 <main+0xb0>)
 8000820:	9300      	str	r3, [sp, #0]
 8000822:	4b12      	ldr	r3, [pc, #72]	; (800086c <main+0x9c>)
 8000824:	4a0f      	ldr	r2, [pc, #60]	; (8000864 <main+0x94>)
 8000826:	4912      	ldr	r1, [pc, #72]	; (8000870 <main+0xa0>)
 8000828:	4812      	ldr	r0, [pc, #72]	; (8000874 <main+0xa4>)
 800082a:	f7ff fe07 	bl	800043c <ProcessRxMsg>

	  LedHandler(&instruccion_ack, &flagSecuencia, &primeraVez);	//hace falta pasarle & a una bandera global?
 800082e:	4a15      	ldr	r2, [pc, #84]	; (8000884 <main+0xb4>)
 8000830:	4915      	ldr	r1, [pc, #84]	; (8000888 <main+0xb8>)
 8000832:	4813      	ldr	r0, [pc, #76]	; (8000880 <main+0xb0>)
 8000834:	f7ff fcb6 	bl	80001a4 <LedHandler>
	  if (flagSecuencia == 1){
 8000838:	4b13      	ldr	r3, [pc, #76]	; (8000888 <main+0xb8>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d003      	beq.n	8000848 <main+0x78>
		  LedSequence(&estadoLeds, &primeraVez);
 8000840:	4910      	ldr	r1, [pc, #64]	; (8000884 <main+0xb4>)
 8000842:	4812      	ldr	r0, [pc, #72]	; (800088c <main+0xbc>)
 8000844:	f7ff fd5a 	bl	80002fc <LedSequence>
	  }

	  SendData(&huart1, &cola_tx);
 8000848:	4908      	ldr	r1, [pc, #32]	; (800086c <main+0x9c>)
 800084a:	480a      	ldr	r0, [pc, #40]	; (8000874 <main+0xa4>)
 800084c:	f7ff ff29 	bl	80006a2 <SendData>

	  CountingHandler(&pulseCount, &contador, &huart1, &cola_tx);
 8000850:	1db9      	adds	r1, r7, #6
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <main+0x9c>)
 8000854:	4a07      	ldr	r2, [pc, #28]	; (8000874 <main+0xa4>)
 8000856:	480e      	ldr	r0, [pc, #56]	; (8000890 <main+0xc0>)
 8000858:	f7ff fc80 	bl	800015c <CountingHandler>
	  ProcessRxMsg(&huart1, &rx_data, &cola_rx, &cola_tx, &instruccion_ack, &estadoActual);
 800085c:	e7dd      	b.n	800081a <main+0x4a>
 800085e:	bf00      	nop
 8000860:	20000078 	.word	0x20000078
 8000864:	20000848 	.word	0x20000848
 8000868:	20000858 	.word	0x20000858
 800086c:	20001028 	.word	0x20001028
 8000870:	20000074 	.word	0x20000074
 8000874:	20000030 	.word	0x20000030
 8000878:	08002738 	.word	0x08002738
 800087c:	20001038 	.word	0x20001038
 8000880:	20000075 	.word	0x20000075
 8000884:	20000000 	.word	0x20000000
 8000888:	20000076 	.word	0x20000076
 800088c:	2000103c 	.word	0x2000103c
 8000890:	20001040 	.word	0x20001040

08000894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b090      	sub	sp, #64	; 0x40
 8000898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089a:	f107 0318 	add.w	r3, r7, #24
 800089e:	2228      	movs	r2, #40	; 0x28
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f001 fef0 	bl	8002688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b6:	2302      	movs	r3, #2
 80008b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ba:	2301      	movs	r3, #1
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008be:	2310      	movs	r3, #16
 80008c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c6:	f107 0318 	add.w	r3, r7, #24
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 fd8a 	bl	80013e4 <HAL_RCC_OscConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0x46>
  {
    Error_Handler();
 80008d6:	f000 f89b 	bl	8000a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008da:	230f      	movs	r3, #15
 80008dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008de:	2300      	movs	r3, #0
 80008e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ea:	2300      	movs	r3, #0
 80008ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	2100      	movs	r1, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 fff8 	bl	80018e8 <HAL_RCC_ClockConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80008fe:	f000 f887 	bl	8000a10 <Error_Handler>
  }
}
 8000902:	bf00      	nop
 8000904:	3740      	adds	r7, #64	; 0x40
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
	...

0800090c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_USART1_UART_Init+0x4c>)
 8000912:	4a12      	ldr	r2, [pc, #72]	; (800095c <MX_USART1_UART_Init+0x50>)
 8000914:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <MX_USART1_UART_Init+0x4c>)
 8000918:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800091c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_USART1_UART_Init+0x4c>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <MX_USART1_UART_Init+0x4c>)
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <MX_USART1_UART_Init+0x4c>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_USART1_UART_Init+0x4c>)
 8000932:	220c      	movs	r2, #12
 8000934:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <MX_USART1_UART_Init+0x4c>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_USART1_UART_Init+0x4c>)
 800093e:	2200      	movs	r2, #0
 8000940:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_USART1_UART_Init+0x4c>)
 8000944:	f001 f968 	bl	8001c18 <HAL_UART_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800094e:	f000 f85f 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000030 	.word	0x20000030
 800095c:	40013800 	.word	0x40013800

08000960 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000966:	f107 0310 	add.w	r3, r7, #16
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000974:	4b24      	ldr	r3, [pc, #144]	; (8000a08 <MX_GPIO_Init+0xa8>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	4a23      	ldr	r2, [pc, #140]	; (8000a08 <MX_GPIO_Init+0xa8>)
 800097a:	f043 0320 	orr.w	r3, r3, #32
 800097e:	6193      	str	r3, [r2, #24]
 8000980:	4b21      	ldr	r3, [pc, #132]	; (8000a08 <MX_GPIO_Init+0xa8>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	f003 0320 	and.w	r3, r3, #32
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098c:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <MX_GPIO_Init+0xa8>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	4a1d      	ldr	r2, [pc, #116]	; (8000a08 <MX_GPIO_Init+0xa8>)
 8000992:	f043 0308 	orr.w	r3, r3, #8
 8000996:	6193      	str	r3, [r2, #24]
 8000998:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <MX_GPIO_Init+0xa8>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	f003 0308 	and.w	r3, r3, #8
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a4:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <MX_GPIO_Init+0xa8>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	4a17      	ldr	r2, [pc, #92]	; (8000a08 <MX_GPIO_Init+0xa8>)
 80009aa:	f043 0304 	orr.w	r3, r3, #4
 80009ae:	6193      	str	r3, [r2, #24]
 80009b0:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <MX_GPIO_Init+0xa8>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f003 0304 	and.w	r3, r3, #4
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80009c2:	4812      	ldr	r0, [pc, #72]	; (8000a0c <MX_GPIO_Init+0xac>)
 80009c4:	f000 fcdc 	bl	8001380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009c8:	2302      	movs	r3, #2
 80009ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d4:	f107 0310 	add.w	r3, r7, #16
 80009d8:	4619      	mov	r1, r3
 80009da:	480c      	ldr	r0, [pc, #48]	; (8000a0c <MX_GPIO_Init+0xac>)
 80009dc:	f000 fb4c 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80009e0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80009e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e6:	2301      	movs	r3, #1
 80009e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2302      	movs	r3, #2
 80009f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f2:	f107 0310 	add.w	r3, r7, #16
 80009f6:	4619      	mov	r1, r3
 80009f8:	4804      	ldr	r0, [pc, #16]	; (8000a0c <MX_GPIO_Init+0xac>)
 80009fa:	f000 fb3d 	bl	8001078 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009fe:	bf00      	nop
 8000a00:	3720      	adds	r7, #32
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	40010c00 	.word	0x40010c00

08000a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a14:	b672      	cpsid	i
}
 8000a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <Error_Handler+0x8>
	...

08000a1c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
	TColaDato_Typedef dato;
	dato = rx_data;
 8000a24:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <HAL_UART_RxCpltCallback+0x2c>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	73fb      	strb	r3, [r7, #15]
	Cola_AgregarDatoCola (&cola_rx, dato);
 8000a2a:	7bfb      	ldrb	r3, [r7, #15]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4807      	ldr	r0, [pc, #28]	; (8000a4c <HAL_UART_RxCpltCallback+0x30>)
 8000a30:	f7ff fe70 	bl	8000714 <Cola_AgregarDatoCola>
	HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8000a34:	2201      	movs	r2, #1
 8000a36:	4904      	ldr	r1, [pc, #16]	; (8000a48 <HAL_UART_RxCpltCallback+0x2c>)
 8000a38:	4805      	ldr	r0, [pc, #20]	; (8000a50 <HAL_UART_RxCpltCallback+0x34>)
 8000a3a:	f001 f9cc 	bl	8001dd6 <HAL_UART_Receive_IT>
}
 8000a3e:	bf00      	nop
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000074 	.word	0x20000074
 8000a4c:	20000848 	.word	0x20000848
 8000a50:	20000030 	.word	0x20000030

08000a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a5a:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <HAL_MspInit+0x6c>)
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	4a18      	ldr	r2, [pc, #96]	; (8000ac0 <HAL_MspInit+0x6c>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6193      	str	r3, [r2, #24]
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <HAL_MspInit+0x6c>)
 8000a68:	699b      	ldr	r3, [r3, #24]
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a72:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <HAL_MspInit+0x6c>)
 8000a74:	69db      	ldr	r3, [r3, #28]
 8000a76:	4a12      	ldr	r2, [pc, #72]	; (8000ac0 <HAL_MspInit+0x6c>)
 8000a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a7c:	61d3      	str	r3, [r2, #28]
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <HAL_MspInit+0x6c>)
 8000a80:	69db      	ldr	r3, [r3, #28]
 8000a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	2005      	movs	r0, #5
 8000a90:	f000 fa0b 	bl	8000eaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000a94:	2005      	movs	r0, #5
 8000a96:	f000 fa24 	bl	8000ee2 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <HAL_MspInit+0x70>)
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	4a04      	ldr	r2, [pc, #16]	; (8000ac4 <HAL_MspInit+0x70>)
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	3710      	adds	r7, #16
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	40010000 	.word	0x40010000

08000ac8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b088      	sub	sp, #32
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0310 	add.w	r3, r7, #16
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a20      	ldr	r2, [pc, #128]	; (8000b64 <HAL_UART_MspInit+0x9c>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d139      	bne.n	8000b5c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ae8:	4b1f      	ldr	r3, [pc, #124]	; (8000b68 <HAL_UART_MspInit+0xa0>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	4a1e      	ldr	r2, [pc, #120]	; (8000b68 <HAL_UART_MspInit+0xa0>)
 8000aee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af2:	6193      	str	r3, [r2, #24]
 8000af4:	4b1c      	ldr	r3, [pc, #112]	; (8000b68 <HAL_UART_MspInit+0xa0>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b00:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <HAL_UART_MspInit+0xa0>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	4a18      	ldr	r2, [pc, #96]	; (8000b68 <HAL_UART_MspInit+0xa0>)
 8000b06:	f043 0304 	orr.w	r3, r3, #4
 8000b0a:	6193      	str	r3, [r2, #24]
 8000b0c:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <HAL_UART_MspInit+0xa0>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	f003 0304 	and.w	r3, r3, #4
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b22:	2303      	movs	r3, #3
 8000b24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b26:	f107 0310 	add.w	r3, r7, #16
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	480f      	ldr	r0, [pc, #60]	; (8000b6c <HAL_UART_MspInit+0xa4>)
 8000b2e:	f000 faa3 	bl	8001078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b40:	f107 0310 	add.w	r3, r7, #16
 8000b44:	4619      	mov	r1, r3
 8000b46:	4809      	ldr	r0, [pc, #36]	; (8000b6c <HAL_UART_MspInit+0xa4>)
 8000b48:	f000 fa96 	bl	8001078 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2100      	movs	r1, #0
 8000b50:	2025      	movs	r0, #37	; 0x25
 8000b52:	f000 f9aa 	bl	8000eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b56:	2025      	movs	r0, #37	; 0x25
 8000b58:	f000 f9c3 	bl	8000ee2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b5c:	bf00      	nop
 8000b5e:	3720      	adds	r7, #32
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40013800 	.word	0x40013800
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	40010800 	.word	0x40010800

08000b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <NMI_Handler+0x4>

08000b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <HardFault_Handler+0x4>

08000b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <MemManage_Handler+0x4>

08000b82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <BusFault_Handler+0x4>

08000b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <UsageFault_Handler+0x4>

08000b8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr

08000b9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr

08000ba6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr

08000bb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb6:	f000 f885 	bl	8000cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr
	...

08000bcc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bd0:	4802      	ldr	r0, [pc, #8]	; (8000bdc <USART1_IRQHandler+0x10>)
 8000bd2:	f001 f931 	bl	8001e38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000030 	.word	0x20000030

08000be0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr

08000bec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bec:	480c      	ldr	r0, [pc, #48]	; (8000c20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bee:	490d      	ldr	r1, [pc, #52]	; (8000c24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bf0:	4a0d      	ldr	r2, [pc, #52]	; (8000c28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf4:	e002      	b.n	8000bfc <LoopCopyDataInit>

08000bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bfa:	3304      	adds	r3, #4

08000bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c00:	d3f9      	bcc.n	8000bf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c02:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c04:	4c0a      	ldr	r4, [pc, #40]	; (8000c30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c08:	e001      	b.n	8000c0e <LoopFillZerobss>

08000c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c0c:	3204      	adds	r2, #4

08000c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c10:	d3fb      	bcc.n	8000c0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c12:	f7ff ffe5 	bl	8000be0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c16:	f001 fd53 	bl	80026c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c1a:	f7ff fdd9 	bl	80007d0 <main>
  bx lr
 8000c1e:	4770      	bx	lr
  ldr r0, =_sdata
 8000c20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c24:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c28:	08002784 	.word	0x08002784
  ldr r2, =_sbss
 8000c2c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c30:	20001048 	.word	0x20001048

08000c34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c34:	e7fe      	b.n	8000c34 <ADC1_2_IRQHandler>
	...

08000c38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c3c:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <HAL_Init+0x28>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a07      	ldr	r2, [pc, #28]	; (8000c60 <HAL_Init+0x28>)
 8000c42:	f043 0310 	orr.w	r3, r3, #16
 8000c46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c48:	2003      	movs	r0, #3
 8000c4a:	f000 f923 	bl	8000e94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c4e:	200f      	movs	r0, #15
 8000c50:	f000 f808 	bl	8000c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c54:	f7ff fefe 	bl	8000a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40022000 	.word	0x40022000

08000c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <HAL_InitTick+0x54>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <HAL_InitTick+0x58>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	4619      	mov	r1, r3
 8000c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 f93b 	bl	8000efe <HAL_SYSTICK_Config>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e00e      	b.n	8000cb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2b0f      	cmp	r3, #15
 8000c96:	d80a      	bhi.n	8000cae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	6879      	ldr	r1, [r7, #4]
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca0:	f000 f903 	bl	8000eaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca4:	4a06      	ldr	r2, [pc, #24]	; (8000cc0 <HAL_InitTick+0x5c>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000caa:	2300      	movs	r3, #0
 8000cac:	e000      	b.n	8000cb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000004 	.word	0x20000004
 8000cbc:	2000000c 	.word	0x2000000c
 8000cc0:	20000008 	.word	0x20000008

08000cc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <HAL_IncTick+0x1c>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <HAL_IncTick+0x20>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	4a03      	ldr	r2, [pc, #12]	; (8000ce4 <HAL_IncTick+0x20>)
 8000cd6:	6013      	str	r3, [r2, #0]
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr
 8000ce0:	2000000c 	.word	0x2000000c
 8000ce4:	20001044 	.word	0x20001044

08000ce8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return uwTick;
 8000cec:	4b02      	ldr	r3, [pc, #8]	; (8000cf8 <HAL_GetTick+0x10>)
 8000cee:	681b      	ldr	r3, [r3, #0]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr
 8000cf8:	20001044 	.word	0x20001044

08000cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <__NVIC_SetPriorityGrouping+0x44>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d12:	68ba      	ldr	r2, [r7, #8]
 8000d14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d2e:	4a04      	ldr	r2, [pc, #16]	; (8000d40 <__NVIC_SetPriorityGrouping+0x44>)
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	60d3      	str	r3, [r2, #12]
}
 8000d34:	bf00      	nop
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bc80      	pop	{r7}
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <__NVIC_GetPriorityGrouping+0x18>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	0a1b      	lsrs	r3, r3, #8
 8000d4e:	f003 0307 	and.w	r3, r3, #7
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bc80      	pop	{r7}
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	db0b      	blt.n	8000d8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	f003 021f 	and.w	r2, r3, #31
 8000d78:	4906      	ldr	r1, [pc, #24]	; (8000d94 <__NVIC_EnableIRQ+0x34>)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	095b      	lsrs	r3, r3, #5
 8000d80:	2001      	movs	r0, #1
 8000d82:	fa00 f202 	lsl.w	r2, r0, r2
 8000d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bc80      	pop	{r7}
 8000d92:	4770      	bx	lr
 8000d94:	e000e100 	.word	0xe000e100

08000d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	6039      	str	r1, [r7, #0]
 8000da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	db0a      	blt.n	8000dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	490c      	ldr	r1, [pc, #48]	; (8000de4 <__NVIC_SetPriority+0x4c>)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	0112      	lsls	r2, r2, #4
 8000db8:	b2d2      	uxtb	r2, r2
 8000dba:	440b      	add	r3, r1
 8000dbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc0:	e00a      	b.n	8000dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4908      	ldr	r1, [pc, #32]	; (8000de8 <__NVIC_SetPriority+0x50>)
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	f003 030f 	and.w	r3, r3, #15
 8000dce:	3b04      	subs	r3, #4
 8000dd0:	0112      	lsls	r2, r2, #4
 8000dd2:	b2d2      	uxtb	r2, r2
 8000dd4:	440b      	add	r3, r1
 8000dd6:	761a      	strb	r2, [r3, #24]
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000e100 	.word	0xe000e100
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b089      	sub	sp, #36	; 0x24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	f1c3 0307 	rsb	r3, r3, #7
 8000e06:	2b04      	cmp	r3, #4
 8000e08:	bf28      	it	cs
 8000e0a:	2304      	movcs	r3, #4
 8000e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3304      	adds	r3, #4
 8000e12:	2b06      	cmp	r3, #6
 8000e14:	d902      	bls.n	8000e1c <NVIC_EncodePriority+0x30>
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	3b03      	subs	r3, #3
 8000e1a:	e000      	b.n	8000e1e <NVIC_EncodePriority+0x32>
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	f04f 32ff 	mov.w	r2, #4294967295
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43da      	mvns	r2, r3
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	401a      	ands	r2, r3
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e34:	f04f 31ff 	mov.w	r1, #4294967295
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3e:	43d9      	mvns	r1, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	4313      	orrs	r3, r2
         );
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3724      	adds	r7, #36	; 0x24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr

08000e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e60:	d301      	bcc.n	8000e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e62:	2301      	movs	r3, #1
 8000e64:	e00f      	b.n	8000e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e66:	4a0a      	ldr	r2, [pc, #40]	; (8000e90 <SysTick_Config+0x40>)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e6e:	210f      	movs	r1, #15
 8000e70:	f04f 30ff 	mov.w	r0, #4294967295
 8000e74:	f7ff ff90 	bl	8000d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e78:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <SysTick_Config+0x40>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e7e:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <SysTick_Config+0x40>)
 8000e80:	2207      	movs	r2, #7
 8000e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	e000e010 	.word	0xe000e010

08000e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff ff2d 	bl	8000cfc <__NVIC_SetPriorityGrouping>
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b086      	sub	sp, #24
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	60b9      	str	r1, [r7, #8]
 8000eb4:	607a      	str	r2, [r7, #4]
 8000eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ebc:	f7ff ff42 	bl	8000d44 <__NVIC_GetPriorityGrouping>
 8000ec0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	68b9      	ldr	r1, [r7, #8]
 8000ec6:	6978      	ldr	r0, [r7, #20]
 8000ec8:	f7ff ff90 	bl	8000dec <NVIC_EncodePriority>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff ff5f 	bl	8000d98 <__NVIC_SetPriority>
}
 8000eda:	bf00      	nop
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	4603      	mov	r3, r0
 8000eea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ff35 	bl	8000d60 <__NVIC_EnableIRQ>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff ffa2 	bl	8000e50 <SysTick_Config>
 8000f0c:	4603      	mov	r3, r0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f16:	b480      	push	{r7}
 8000f18:	b085      	sub	sp, #20
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d008      	beq.n	8000f3e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2204      	movs	r2, #4
 8000f30:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e020      	b.n	8000f80 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f022 020e 	bic.w	r2, r2, #14
 8000f4c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f022 0201 	bic.w	r2, r2, #1
 8000f5c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f66:	2101      	movs	r1, #1
 8000f68:	fa01 f202 	lsl.w	r2, r1, r2
 8000f6c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2201      	movs	r2, #1
 8000f72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc80      	pop	{r7}
 8000f88:	4770      	bx	lr
	...

08000f8c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f94:	2300      	movs	r3, #0
 8000f96:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d005      	beq.n	8000fae <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2204      	movs	r2, #4
 8000fa6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	73fb      	strb	r3, [r7, #15]
 8000fac:	e051      	b.n	8001052 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f022 020e 	bic.w	r2, r2, #14
 8000fbc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f022 0201 	bic.w	r2, r2, #1
 8000fcc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a22      	ldr	r2, [pc, #136]	; (800105c <HAL_DMA_Abort_IT+0xd0>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d029      	beq.n	800102c <HAL_DMA_Abort_IT+0xa0>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a20      	ldr	r2, [pc, #128]	; (8001060 <HAL_DMA_Abort_IT+0xd4>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d022      	beq.n	8001028 <HAL_DMA_Abort_IT+0x9c>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a1f      	ldr	r2, [pc, #124]	; (8001064 <HAL_DMA_Abort_IT+0xd8>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d01a      	beq.n	8001022 <HAL_DMA_Abort_IT+0x96>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a1d      	ldr	r2, [pc, #116]	; (8001068 <HAL_DMA_Abort_IT+0xdc>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d012      	beq.n	800101c <HAL_DMA_Abort_IT+0x90>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a1c      	ldr	r2, [pc, #112]	; (800106c <HAL_DMA_Abort_IT+0xe0>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d00a      	beq.n	8001016 <HAL_DMA_Abort_IT+0x8a>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a1a      	ldr	r2, [pc, #104]	; (8001070 <HAL_DMA_Abort_IT+0xe4>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d102      	bne.n	8001010 <HAL_DMA_Abort_IT+0x84>
 800100a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800100e:	e00e      	b.n	800102e <HAL_DMA_Abort_IT+0xa2>
 8001010:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001014:	e00b      	b.n	800102e <HAL_DMA_Abort_IT+0xa2>
 8001016:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800101a:	e008      	b.n	800102e <HAL_DMA_Abort_IT+0xa2>
 800101c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001020:	e005      	b.n	800102e <HAL_DMA_Abort_IT+0xa2>
 8001022:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001026:	e002      	b.n	800102e <HAL_DMA_Abort_IT+0xa2>
 8001028:	2310      	movs	r3, #16
 800102a:	e000      	b.n	800102e <HAL_DMA_Abort_IT+0xa2>
 800102c:	2301      	movs	r3, #1
 800102e:	4a11      	ldr	r2, [pc, #68]	; (8001074 <HAL_DMA_Abort_IT+0xe8>)
 8001030:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2201      	movs	r2, #1
 8001036:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	4798      	blx	r3
    } 
  }
  return status;
 8001052:	7bfb      	ldrb	r3, [r7, #15]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40020008 	.word	0x40020008
 8001060:	4002001c 	.word	0x4002001c
 8001064:	40020030 	.word	0x40020030
 8001068:	40020044 	.word	0x40020044
 800106c:	40020058 	.word	0x40020058
 8001070:	4002006c 	.word	0x4002006c
 8001074:	40020000 	.word	0x40020000

08001078 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001078:	b480      	push	{r7}
 800107a:	b08b      	sub	sp, #44	; 0x2c
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001082:	2300      	movs	r3, #0
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001086:	2300      	movs	r3, #0
 8001088:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800108a:	e169      	b.n	8001360 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800108c:	2201      	movs	r2, #1
 800108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	69fa      	ldr	r2, [r7, #28]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	f040 8158 	bne.w	800135a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	4a9a      	ldr	r2, [pc, #616]	; (8001318 <HAL_GPIO_Init+0x2a0>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d05e      	beq.n	8001172 <HAL_GPIO_Init+0xfa>
 80010b4:	4a98      	ldr	r2, [pc, #608]	; (8001318 <HAL_GPIO_Init+0x2a0>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d875      	bhi.n	80011a6 <HAL_GPIO_Init+0x12e>
 80010ba:	4a98      	ldr	r2, [pc, #608]	; (800131c <HAL_GPIO_Init+0x2a4>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d058      	beq.n	8001172 <HAL_GPIO_Init+0xfa>
 80010c0:	4a96      	ldr	r2, [pc, #600]	; (800131c <HAL_GPIO_Init+0x2a4>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d86f      	bhi.n	80011a6 <HAL_GPIO_Init+0x12e>
 80010c6:	4a96      	ldr	r2, [pc, #600]	; (8001320 <HAL_GPIO_Init+0x2a8>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d052      	beq.n	8001172 <HAL_GPIO_Init+0xfa>
 80010cc:	4a94      	ldr	r2, [pc, #592]	; (8001320 <HAL_GPIO_Init+0x2a8>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d869      	bhi.n	80011a6 <HAL_GPIO_Init+0x12e>
 80010d2:	4a94      	ldr	r2, [pc, #592]	; (8001324 <HAL_GPIO_Init+0x2ac>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d04c      	beq.n	8001172 <HAL_GPIO_Init+0xfa>
 80010d8:	4a92      	ldr	r2, [pc, #584]	; (8001324 <HAL_GPIO_Init+0x2ac>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d863      	bhi.n	80011a6 <HAL_GPIO_Init+0x12e>
 80010de:	4a92      	ldr	r2, [pc, #584]	; (8001328 <HAL_GPIO_Init+0x2b0>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d046      	beq.n	8001172 <HAL_GPIO_Init+0xfa>
 80010e4:	4a90      	ldr	r2, [pc, #576]	; (8001328 <HAL_GPIO_Init+0x2b0>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d85d      	bhi.n	80011a6 <HAL_GPIO_Init+0x12e>
 80010ea:	2b12      	cmp	r3, #18
 80010ec:	d82a      	bhi.n	8001144 <HAL_GPIO_Init+0xcc>
 80010ee:	2b12      	cmp	r3, #18
 80010f0:	d859      	bhi.n	80011a6 <HAL_GPIO_Init+0x12e>
 80010f2:	a201      	add	r2, pc, #4	; (adr r2, 80010f8 <HAL_GPIO_Init+0x80>)
 80010f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f8:	08001173 	.word	0x08001173
 80010fc:	0800114d 	.word	0x0800114d
 8001100:	0800115f 	.word	0x0800115f
 8001104:	080011a1 	.word	0x080011a1
 8001108:	080011a7 	.word	0x080011a7
 800110c:	080011a7 	.word	0x080011a7
 8001110:	080011a7 	.word	0x080011a7
 8001114:	080011a7 	.word	0x080011a7
 8001118:	080011a7 	.word	0x080011a7
 800111c:	080011a7 	.word	0x080011a7
 8001120:	080011a7 	.word	0x080011a7
 8001124:	080011a7 	.word	0x080011a7
 8001128:	080011a7 	.word	0x080011a7
 800112c:	080011a7 	.word	0x080011a7
 8001130:	080011a7 	.word	0x080011a7
 8001134:	080011a7 	.word	0x080011a7
 8001138:	080011a7 	.word	0x080011a7
 800113c:	08001155 	.word	0x08001155
 8001140:	08001169 	.word	0x08001169
 8001144:	4a79      	ldr	r2, [pc, #484]	; (800132c <HAL_GPIO_Init+0x2b4>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d013      	beq.n	8001172 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800114a:	e02c      	b.n	80011a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	623b      	str	r3, [r7, #32]
          break;
 8001152:	e029      	b.n	80011a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	3304      	adds	r3, #4
 800115a:	623b      	str	r3, [r7, #32]
          break;
 800115c:	e024      	b.n	80011a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	3308      	adds	r3, #8
 8001164:	623b      	str	r3, [r7, #32]
          break;
 8001166:	e01f      	b.n	80011a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	330c      	adds	r3, #12
 800116e:	623b      	str	r3, [r7, #32]
          break;
 8001170:	e01a      	b.n	80011a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d102      	bne.n	8001180 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800117a:	2304      	movs	r3, #4
 800117c:	623b      	str	r3, [r7, #32]
          break;
 800117e:	e013      	b.n	80011a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d105      	bne.n	8001194 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001188:	2308      	movs	r3, #8
 800118a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	69fa      	ldr	r2, [r7, #28]
 8001190:	611a      	str	r2, [r3, #16]
          break;
 8001192:	e009      	b.n	80011a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001194:	2308      	movs	r3, #8
 8001196:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	69fa      	ldr	r2, [r7, #28]
 800119c:	615a      	str	r2, [r3, #20]
          break;
 800119e:	e003      	b.n	80011a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011a0:	2300      	movs	r3, #0
 80011a2:	623b      	str	r3, [r7, #32]
          break;
 80011a4:	e000      	b.n	80011a8 <HAL_GPIO_Init+0x130>
          break;
 80011a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	2bff      	cmp	r3, #255	; 0xff
 80011ac:	d801      	bhi.n	80011b2 <HAL_GPIO_Init+0x13a>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	e001      	b.n	80011b6 <HAL_GPIO_Init+0x13e>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	3304      	adds	r3, #4
 80011b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	2bff      	cmp	r3, #255	; 0xff
 80011bc:	d802      	bhi.n	80011c4 <HAL_GPIO_Init+0x14c>
 80011be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	e002      	b.n	80011ca <HAL_GPIO_Init+0x152>
 80011c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c6:	3b08      	subs	r3, #8
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	210f      	movs	r1, #15
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	fa01 f303 	lsl.w	r3, r1, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	401a      	ands	r2, r3
 80011dc:	6a39      	ldr	r1, [r7, #32]
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	fa01 f303 	lsl.w	r3, r1, r3
 80011e4:	431a      	orrs	r2, r3
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 80b1 	beq.w	800135a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011f8:	4b4d      	ldr	r3, [pc, #308]	; (8001330 <HAL_GPIO_Init+0x2b8>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	4a4c      	ldr	r2, [pc, #304]	; (8001330 <HAL_GPIO_Init+0x2b8>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	6193      	str	r3, [r2, #24]
 8001204:	4b4a      	ldr	r3, [pc, #296]	; (8001330 <HAL_GPIO_Init+0x2b8>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001210:	4a48      	ldr	r2, [pc, #288]	; (8001334 <HAL_GPIO_Init+0x2bc>)
 8001212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001214:	089b      	lsrs	r3, r3, #2
 8001216:	3302      	adds	r3, #2
 8001218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	220f      	movs	r2, #15
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	68fa      	ldr	r2, [r7, #12]
 8001230:	4013      	ands	r3, r2
 8001232:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a40      	ldr	r2, [pc, #256]	; (8001338 <HAL_GPIO_Init+0x2c0>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d013      	beq.n	8001264 <HAL_GPIO_Init+0x1ec>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a3f      	ldr	r2, [pc, #252]	; (800133c <HAL_GPIO_Init+0x2c4>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d00d      	beq.n	8001260 <HAL_GPIO_Init+0x1e8>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a3e      	ldr	r2, [pc, #248]	; (8001340 <HAL_GPIO_Init+0x2c8>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d007      	beq.n	800125c <HAL_GPIO_Init+0x1e4>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a3d      	ldr	r2, [pc, #244]	; (8001344 <HAL_GPIO_Init+0x2cc>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d101      	bne.n	8001258 <HAL_GPIO_Init+0x1e0>
 8001254:	2303      	movs	r3, #3
 8001256:	e006      	b.n	8001266 <HAL_GPIO_Init+0x1ee>
 8001258:	2304      	movs	r3, #4
 800125a:	e004      	b.n	8001266 <HAL_GPIO_Init+0x1ee>
 800125c:	2302      	movs	r3, #2
 800125e:	e002      	b.n	8001266 <HAL_GPIO_Init+0x1ee>
 8001260:	2301      	movs	r3, #1
 8001262:	e000      	b.n	8001266 <HAL_GPIO_Init+0x1ee>
 8001264:	2300      	movs	r3, #0
 8001266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001268:	f002 0203 	and.w	r2, r2, #3
 800126c:	0092      	lsls	r2, r2, #2
 800126e:	4093      	lsls	r3, r2
 8001270:	68fa      	ldr	r2, [r7, #12]
 8001272:	4313      	orrs	r3, r2
 8001274:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001276:	492f      	ldr	r1, [pc, #188]	; (8001334 <HAL_GPIO_Init+0x2bc>)
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	089b      	lsrs	r3, r3, #2
 800127c:	3302      	adds	r3, #2
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d006      	beq.n	800129e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001290:	4b2d      	ldr	r3, [pc, #180]	; (8001348 <HAL_GPIO_Init+0x2d0>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	492c      	ldr	r1, [pc, #176]	; (8001348 <HAL_GPIO_Init+0x2d0>)
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	4313      	orrs	r3, r2
 800129a:	600b      	str	r3, [r1, #0]
 800129c:	e006      	b.n	80012ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800129e:	4b2a      	ldr	r3, [pc, #168]	; (8001348 <HAL_GPIO_Init+0x2d0>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	43db      	mvns	r3, r3
 80012a6:	4928      	ldr	r1, [pc, #160]	; (8001348 <HAL_GPIO_Init+0x2d0>)
 80012a8:	4013      	ands	r3, r2
 80012aa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d006      	beq.n	80012c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012b8:	4b23      	ldr	r3, [pc, #140]	; (8001348 <HAL_GPIO_Init+0x2d0>)
 80012ba:	685a      	ldr	r2, [r3, #4]
 80012bc:	4922      	ldr	r1, [pc, #136]	; (8001348 <HAL_GPIO_Init+0x2d0>)
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	604b      	str	r3, [r1, #4]
 80012c4:	e006      	b.n	80012d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012c6:	4b20      	ldr	r3, [pc, #128]	; (8001348 <HAL_GPIO_Init+0x2d0>)
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	43db      	mvns	r3, r3
 80012ce:	491e      	ldr	r1, [pc, #120]	; (8001348 <HAL_GPIO_Init+0x2d0>)
 80012d0:	4013      	ands	r3, r2
 80012d2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d006      	beq.n	80012ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012e0:	4b19      	ldr	r3, [pc, #100]	; (8001348 <HAL_GPIO_Init+0x2d0>)
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	4918      	ldr	r1, [pc, #96]	; (8001348 <HAL_GPIO_Init+0x2d0>)
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	608b      	str	r3, [r1, #8]
 80012ec:	e006      	b.n	80012fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012ee:	4b16      	ldr	r3, [pc, #88]	; (8001348 <HAL_GPIO_Init+0x2d0>)
 80012f0:	689a      	ldr	r2, [r3, #8]
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	43db      	mvns	r3, r3
 80012f6:	4914      	ldr	r1, [pc, #80]	; (8001348 <HAL_GPIO_Init+0x2d0>)
 80012f8:	4013      	ands	r3, r2
 80012fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d021      	beq.n	800134c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001308:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <HAL_GPIO_Init+0x2d0>)
 800130a:	68da      	ldr	r2, [r3, #12]
 800130c:	490e      	ldr	r1, [pc, #56]	; (8001348 <HAL_GPIO_Init+0x2d0>)
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	4313      	orrs	r3, r2
 8001312:	60cb      	str	r3, [r1, #12]
 8001314:	e021      	b.n	800135a <HAL_GPIO_Init+0x2e2>
 8001316:	bf00      	nop
 8001318:	10320000 	.word	0x10320000
 800131c:	10310000 	.word	0x10310000
 8001320:	10220000 	.word	0x10220000
 8001324:	10210000 	.word	0x10210000
 8001328:	10120000 	.word	0x10120000
 800132c:	10110000 	.word	0x10110000
 8001330:	40021000 	.word	0x40021000
 8001334:	40010000 	.word	0x40010000
 8001338:	40010800 	.word	0x40010800
 800133c:	40010c00 	.word	0x40010c00
 8001340:	40011000 	.word	0x40011000
 8001344:	40011400 	.word	0x40011400
 8001348:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800134c:	4b0b      	ldr	r3, [pc, #44]	; (800137c <HAL_GPIO_Init+0x304>)
 800134e:	68da      	ldr	r2, [r3, #12]
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	43db      	mvns	r3, r3
 8001354:	4909      	ldr	r1, [pc, #36]	; (800137c <HAL_GPIO_Init+0x304>)
 8001356:	4013      	ands	r3, r2
 8001358:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	3301      	adds	r3, #1
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001366:	fa22 f303 	lsr.w	r3, r2, r3
 800136a:	2b00      	cmp	r3, #0
 800136c:	f47f ae8e 	bne.w	800108c <HAL_GPIO_Init+0x14>
  }
}
 8001370:	bf00      	nop
 8001372:	bf00      	nop
 8001374:	372c      	adds	r7, #44	; 0x2c
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr
 800137c:	40010400 	.word	0x40010400

08001380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	807b      	strh	r3, [r7, #2]
 800138c:	4613      	mov	r3, r2
 800138e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001390:	787b      	ldrb	r3, [r7, #1]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001396:	887a      	ldrh	r2, [r7, #2]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800139c:	e003      	b.n	80013a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800139e:	887b      	ldrh	r3, [r7, #2]
 80013a0:	041a      	lsls	r2, r3, #16
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	611a      	str	r2, [r3, #16]
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr

080013b0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013c2:	887a      	ldrh	r2, [r7, #2]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4013      	ands	r3, r2
 80013c8:	041a      	lsls	r2, r3, #16
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	43d9      	mvns	r1, r3
 80013ce:	887b      	ldrh	r3, [r7, #2]
 80013d0:	400b      	ands	r3, r1
 80013d2:	431a      	orrs	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	611a      	str	r2, [r3, #16]
}
 80013d8:	bf00      	nop
 80013da:	3714      	adds	r7, #20
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr
	...

080013e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d101      	bne.n	80013f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e272      	b.n	80018dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f000 8087 	beq.w	8001512 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001404:	4b92      	ldr	r3, [pc, #584]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f003 030c 	and.w	r3, r3, #12
 800140c:	2b04      	cmp	r3, #4
 800140e:	d00c      	beq.n	800142a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001410:	4b8f      	ldr	r3, [pc, #572]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f003 030c 	and.w	r3, r3, #12
 8001418:	2b08      	cmp	r3, #8
 800141a:	d112      	bne.n	8001442 <HAL_RCC_OscConfig+0x5e>
 800141c:	4b8c      	ldr	r3, [pc, #560]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001428:	d10b      	bne.n	8001442 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800142a:	4b89      	ldr	r3, [pc, #548]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d06c      	beq.n	8001510 <HAL_RCC_OscConfig+0x12c>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d168      	bne.n	8001510 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e24c      	b.n	80018dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800144a:	d106      	bne.n	800145a <HAL_RCC_OscConfig+0x76>
 800144c:	4b80      	ldr	r3, [pc, #512]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a7f      	ldr	r2, [pc, #508]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 8001452:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001456:	6013      	str	r3, [r2, #0]
 8001458:	e02e      	b.n	80014b8 <HAL_RCC_OscConfig+0xd4>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d10c      	bne.n	800147c <HAL_RCC_OscConfig+0x98>
 8001462:	4b7b      	ldr	r3, [pc, #492]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a7a      	ldr	r2, [pc, #488]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 8001468:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	4b78      	ldr	r3, [pc, #480]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a77      	ldr	r2, [pc, #476]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 8001474:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	e01d      	b.n	80014b8 <HAL_RCC_OscConfig+0xd4>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001484:	d10c      	bne.n	80014a0 <HAL_RCC_OscConfig+0xbc>
 8001486:	4b72      	ldr	r3, [pc, #456]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a71      	ldr	r2, [pc, #452]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 800148c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	4b6f      	ldr	r3, [pc, #444]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a6e      	ldr	r2, [pc, #440]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 8001498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	e00b      	b.n	80014b8 <HAL_RCC_OscConfig+0xd4>
 80014a0:	4b6b      	ldr	r3, [pc, #428]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a6a      	ldr	r2, [pc, #424]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 80014a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014aa:	6013      	str	r3, [r2, #0]
 80014ac:	4b68      	ldr	r3, [pc, #416]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a67      	ldr	r2, [pc, #412]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 80014b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d013      	beq.n	80014e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c0:	f7ff fc12 	bl	8000ce8 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c8:	f7ff fc0e 	bl	8000ce8 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b64      	cmp	r3, #100	; 0x64
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e200      	b.n	80018dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014da:	4b5d      	ldr	r3, [pc, #372]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f0      	beq.n	80014c8 <HAL_RCC_OscConfig+0xe4>
 80014e6:	e014      	b.n	8001512 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e8:	f7ff fbfe 	bl	8000ce8 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f0:	f7ff fbfa 	bl	8000ce8 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b64      	cmp	r3, #100	; 0x64
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e1ec      	b.n	80018dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001502:	4b53      	ldr	r3, [pc, #332]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f0      	bne.n	80014f0 <HAL_RCC_OscConfig+0x10c>
 800150e:	e000      	b.n	8001512 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001510:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d063      	beq.n	80015e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800151e:	4b4c      	ldr	r3, [pc, #304]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f003 030c 	and.w	r3, r3, #12
 8001526:	2b00      	cmp	r3, #0
 8001528:	d00b      	beq.n	8001542 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800152a:	4b49      	ldr	r3, [pc, #292]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f003 030c 	and.w	r3, r3, #12
 8001532:	2b08      	cmp	r3, #8
 8001534:	d11c      	bne.n	8001570 <HAL_RCC_OscConfig+0x18c>
 8001536:	4b46      	ldr	r3, [pc, #280]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d116      	bne.n	8001570 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001542:	4b43      	ldr	r3, [pc, #268]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d005      	beq.n	800155a <HAL_RCC_OscConfig+0x176>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d001      	beq.n	800155a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e1c0      	b.n	80018dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155a:	4b3d      	ldr	r3, [pc, #244]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	4939      	ldr	r1, [pc, #228]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 800156a:	4313      	orrs	r3, r2
 800156c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800156e:	e03a      	b.n	80015e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	691b      	ldr	r3, [r3, #16]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d020      	beq.n	80015ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001578:	4b36      	ldr	r3, [pc, #216]	; (8001654 <HAL_RCC_OscConfig+0x270>)
 800157a:	2201      	movs	r2, #1
 800157c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157e:	f7ff fbb3 	bl	8000ce8 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001586:	f7ff fbaf 	bl	8000ce8 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e1a1      	b.n	80018dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001598:	4b2d      	ldr	r3, [pc, #180]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0f0      	beq.n	8001586 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a4:	4b2a      	ldr	r3, [pc, #168]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	695b      	ldr	r3, [r3, #20]
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	4927      	ldr	r1, [pc, #156]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 80015b4:	4313      	orrs	r3, r2
 80015b6:	600b      	str	r3, [r1, #0]
 80015b8:	e015      	b.n	80015e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ba:	4b26      	ldr	r3, [pc, #152]	; (8001654 <HAL_RCC_OscConfig+0x270>)
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c0:	f7ff fb92 	bl	8000ce8 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015c8:	f7ff fb8e 	bl	8000ce8 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e180      	b.n	80018dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015da:	4b1d      	ldr	r3, [pc, #116]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f0      	bne.n	80015c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0308 	and.w	r3, r3, #8
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d03a      	beq.n	8001668 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d019      	beq.n	800162e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015fa:	4b17      	ldr	r3, [pc, #92]	; (8001658 <HAL_RCC_OscConfig+0x274>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001600:	f7ff fb72 	bl	8000ce8 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001608:	f7ff fb6e 	bl	8000ce8 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e160      	b.n	80018dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800161a:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 800161c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0f0      	beq.n	8001608 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001626:	2001      	movs	r0, #1
 8001628:	f000 fad8 	bl	8001bdc <RCC_Delay>
 800162c:	e01c      	b.n	8001668 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800162e:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <HAL_RCC_OscConfig+0x274>)
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001634:	f7ff fb58 	bl	8000ce8 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800163a:	e00f      	b.n	800165c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800163c:	f7ff fb54 	bl	8000ce8 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d908      	bls.n	800165c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e146      	b.n	80018dc <HAL_RCC_OscConfig+0x4f8>
 800164e:	bf00      	nop
 8001650:	40021000 	.word	0x40021000
 8001654:	42420000 	.word	0x42420000
 8001658:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800165c:	4b92      	ldr	r3, [pc, #584]	; (80018a8 <HAL_RCC_OscConfig+0x4c4>)
 800165e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d1e9      	bne.n	800163c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0304 	and.w	r3, r3, #4
 8001670:	2b00      	cmp	r3, #0
 8001672:	f000 80a6 	beq.w	80017c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001676:	2300      	movs	r3, #0
 8001678:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800167a:	4b8b      	ldr	r3, [pc, #556]	; (80018a8 <HAL_RCC_OscConfig+0x4c4>)
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d10d      	bne.n	80016a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001686:	4b88      	ldr	r3, [pc, #544]	; (80018a8 <HAL_RCC_OscConfig+0x4c4>)
 8001688:	69db      	ldr	r3, [r3, #28]
 800168a:	4a87      	ldr	r2, [pc, #540]	; (80018a8 <HAL_RCC_OscConfig+0x4c4>)
 800168c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001690:	61d3      	str	r3, [r2, #28]
 8001692:	4b85      	ldr	r3, [pc, #532]	; (80018a8 <HAL_RCC_OscConfig+0x4c4>)
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800169e:	2301      	movs	r3, #1
 80016a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a2:	4b82      	ldr	r3, [pc, #520]	; (80018ac <HAL_RCC_OscConfig+0x4c8>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d118      	bne.n	80016e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ae:	4b7f      	ldr	r3, [pc, #508]	; (80018ac <HAL_RCC_OscConfig+0x4c8>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a7e      	ldr	r2, [pc, #504]	; (80018ac <HAL_RCC_OscConfig+0x4c8>)
 80016b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ba:	f7ff fb15 	bl	8000ce8 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016c2:	f7ff fb11 	bl	8000ce8 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b64      	cmp	r3, #100	; 0x64
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e103      	b.n	80018dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d4:	4b75      	ldr	r3, [pc, #468]	; (80018ac <HAL_RCC_OscConfig+0x4c8>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0f0      	beq.n	80016c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d106      	bne.n	80016f6 <HAL_RCC_OscConfig+0x312>
 80016e8:	4b6f      	ldr	r3, [pc, #444]	; (80018a8 <HAL_RCC_OscConfig+0x4c4>)
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	4a6e      	ldr	r2, [pc, #440]	; (80018a8 <HAL_RCC_OscConfig+0x4c4>)
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	6213      	str	r3, [r2, #32]
 80016f4:	e02d      	b.n	8001752 <HAL_RCC_OscConfig+0x36e>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10c      	bne.n	8001718 <HAL_RCC_OscConfig+0x334>
 80016fe:	4b6a      	ldr	r3, [pc, #424]	; (80018a8 <HAL_RCC_OscConfig+0x4c4>)
 8001700:	6a1b      	ldr	r3, [r3, #32]
 8001702:	4a69      	ldr	r2, [pc, #420]	; (80018a8 <HAL_RCC_OscConfig+0x4c4>)
 8001704:	f023 0301 	bic.w	r3, r3, #1
 8001708:	6213      	str	r3, [r2, #32]
 800170a:	4b67      	ldr	r3, [pc, #412]	; (80018a8 <HAL_RCC_OscConfig+0x4c4>)
 800170c:	6a1b      	ldr	r3, [r3, #32]
 800170e:	4a66      	ldr	r2, [pc, #408]	; (80018a8 <HAL_RCC_OscConfig+0x4c4>)
 8001710:	f023 0304 	bic.w	r3, r3, #4
 8001714:	6213      	str	r3, [r2, #32]
 8001716:	e01c      	b.n	8001752 <HAL_RCC_OscConfig+0x36e>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	2b05      	cmp	r3, #5
 800171e:	d10c      	bne.n	800173a <HAL_RCC_OscConfig+0x356>
 8001720:	4b61      	ldr	r3, [pc, #388]	; (80018a8 <HAL_RCC_OscConfig+0x4c4>)
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	4a60      	ldr	r2, [pc, #384]	; (80018a8 <HAL_RCC_OscConfig+0x4c4>)
 8001726:	f043 0304 	orr.w	r3, r3, #4
 800172a:	6213      	str	r3, [r2, #32]
 800172c:	4b5e      	ldr	r3, [pc, #376]	; (80018a8 <HAL_RCC_OscConfig+0x4c4>)
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	4a5d      	ldr	r2, [pc, #372]	; (80018a8 <HAL_RCC_OscConfig+0x4c4>)
 8001732:	f043 0301 	orr.w	r3, r3, #1
 8001736:	6213      	str	r3, [r2, #32]
 8001738:	e00b      	b.n	8001752 <HAL_RCC_OscConfig+0x36e>
 800173a:	4b5b      	ldr	r3, [pc, #364]	; (80018a8 <HAL_RCC_OscConfig+0x4c4>)
 800173c:	6a1b      	ldr	r3, [r3, #32]
 800173e:	4a5a      	ldr	r2, [pc, #360]	; (80018a8 <HAL_RCC_OscConfig+0x4c4>)
 8001740:	f023 0301 	bic.w	r3, r3, #1
 8001744:	6213      	str	r3, [r2, #32]
 8001746:	4b58      	ldr	r3, [pc, #352]	; (80018a8 <HAL_RCC_OscConfig+0x4c4>)
 8001748:	6a1b      	ldr	r3, [r3, #32]
 800174a:	4a57      	ldr	r2, [pc, #348]	; (80018a8 <HAL_RCC_OscConfig+0x4c4>)
 800174c:	f023 0304 	bic.w	r3, r3, #4
 8001750:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d015      	beq.n	8001786 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800175a:	f7ff fac5 	bl	8000ce8 <HAL_GetTick>
 800175e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001760:	e00a      	b.n	8001778 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001762:	f7ff fac1 	bl	8000ce8 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001770:	4293      	cmp	r3, r2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e0b1      	b.n	80018dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001778:	4b4b      	ldr	r3, [pc, #300]	; (80018a8 <HAL_RCC_OscConfig+0x4c4>)
 800177a:	6a1b      	ldr	r3, [r3, #32]
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0ee      	beq.n	8001762 <HAL_RCC_OscConfig+0x37e>
 8001784:	e014      	b.n	80017b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001786:	f7ff faaf 	bl	8000ce8 <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800178c:	e00a      	b.n	80017a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800178e:	f7ff faab 	bl	8000ce8 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	f241 3288 	movw	r2, #5000	; 0x1388
 800179c:	4293      	cmp	r3, r2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e09b      	b.n	80018dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a4:	4b40      	ldr	r3, [pc, #256]	; (80018a8 <HAL_RCC_OscConfig+0x4c4>)
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1ee      	bne.n	800178e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017b0:	7dfb      	ldrb	r3, [r7, #23]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d105      	bne.n	80017c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017b6:	4b3c      	ldr	r3, [pc, #240]	; (80018a8 <HAL_RCC_OscConfig+0x4c4>)
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	4a3b      	ldr	r2, [pc, #236]	; (80018a8 <HAL_RCC_OscConfig+0x4c4>)
 80017bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f000 8087 	beq.w	80018da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017cc:	4b36      	ldr	r3, [pc, #216]	; (80018a8 <HAL_RCC_OscConfig+0x4c4>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 030c 	and.w	r3, r3, #12
 80017d4:	2b08      	cmp	r3, #8
 80017d6:	d061      	beq.n	800189c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	69db      	ldr	r3, [r3, #28]
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d146      	bne.n	800186e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e0:	4b33      	ldr	r3, [pc, #204]	; (80018b0 <HAL_RCC_OscConfig+0x4cc>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e6:	f7ff fa7f 	bl	8000ce8 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ee:	f7ff fa7b 	bl	8000ce8 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e06d      	b.n	80018dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001800:	4b29      	ldr	r3, [pc, #164]	; (80018a8 <HAL_RCC_OscConfig+0x4c4>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1f0      	bne.n	80017ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a1b      	ldr	r3, [r3, #32]
 8001810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001814:	d108      	bne.n	8001828 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001816:	4b24      	ldr	r3, [pc, #144]	; (80018a8 <HAL_RCC_OscConfig+0x4c4>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	4921      	ldr	r1, [pc, #132]	; (80018a8 <HAL_RCC_OscConfig+0x4c4>)
 8001824:	4313      	orrs	r3, r2
 8001826:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001828:	4b1f      	ldr	r3, [pc, #124]	; (80018a8 <HAL_RCC_OscConfig+0x4c4>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a19      	ldr	r1, [r3, #32]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001838:	430b      	orrs	r3, r1
 800183a:	491b      	ldr	r1, [pc, #108]	; (80018a8 <HAL_RCC_OscConfig+0x4c4>)
 800183c:	4313      	orrs	r3, r2
 800183e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001840:	4b1b      	ldr	r3, [pc, #108]	; (80018b0 <HAL_RCC_OscConfig+0x4cc>)
 8001842:	2201      	movs	r2, #1
 8001844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001846:	f7ff fa4f 	bl	8000ce8 <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800184e:	f7ff fa4b 	bl	8000ce8 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e03d      	b.n	80018dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001860:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <HAL_RCC_OscConfig+0x4c4>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0f0      	beq.n	800184e <HAL_RCC_OscConfig+0x46a>
 800186c:	e035      	b.n	80018da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186e:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <HAL_RCC_OscConfig+0x4cc>)
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001874:	f7ff fa38 	bl	8000ce8 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800187c:	f7ff fa34 	bl	8000ce8 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e026      	b.n	80018dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800188e:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_RCC_OscConfig+0x4c4>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1f0      	bne.n	800187c <HAL_RCC_OscConfig+0x498>
 800189a:	e01e      	b.n	80018da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69db      	ldr	r3, [r3, #28]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d107      	bne.n	80018b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e019      	b.n	80018dc <HAL_RCC_OscConfig+0x4f8>
 80018a8:	40021000 	.word	0x40021000
 80018ac:	40007000 	.word	0x40007000
 80018b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018b4:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <HAL_RCC_OscConfig+0x500>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a1b      	ldr	r3, [r3, #32]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d106      	bne.n	80018d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d001      	beq.n	80018da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e000      	b.n	80018dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40021000 	.word	0x40021000

080018e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e0d0      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018fc:	4b6a      	ldr	r3, [pc, #424]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c0>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0307 	and.w	r3, r3, #7
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	429a      	cmp	r2, r3
 8001908:	d910      	bls.n	800192c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800190a:	4b67      	ldr	r3, [pc, #412]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f023 0207 	bic.w	r2, r3, #7
 8001912:	4965      	ldr	r1, [pc, #404]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	4313      	orrs	r3, r2
 8001918:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800191a:	4b63      	ldr	r3, [pc, #396]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	429a      	cmp	r2, r3
 8001926:	d001      	beq.n	800192c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e0b8      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d020      	beq.n	800197a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0304 	and.w	r3, r3, #4
 8001940:	2b00      	cmp	r3, #0
 8001942:	d005      	beq.n	8001950 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001944:	4b59      	ldr	r3, [pc, #356]	; (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	4a58      	ldr	r2, [pc, #352]	; (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 800194a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800194e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0308 	and.w	r3, r3, #8
 8001958:	2b00      	cmp	r3, #0
 800195a:	d005      	beq.n	8001968 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800195c:	4b53      	ldr	r3, [pc, #332]	; (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	4a52      	ldr	r2, [pc, #328]	; (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 8001962:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001966:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001968:	4b50      	ldr	r3, [pc, #320]	; (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	494d      	ldr	r1, [pc, #308]	; (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 8001976:	4313      	orrs	r3, r2
 8001978:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b00      	cmp	r3, #0
 8001984:	d040      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d107      	bne.n	800199e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198e:	4b47      	ldr	r3, [pc, #284]	; (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d115      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e07f      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d107      	bne.n	80019b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a6:	4b41      	ldr	r3, [pc, #260]	; (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d109      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e073      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b6:	4b3d      	ldr	r3, [pc, #244]	; (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e06b      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019c6:	4b39      	ldr	r3, [pc, #228]	; (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f023 0203 	bic.w	r2, r3, #3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	4936      	ldr	r1, [pc, #216]	; (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019d8:	f7ff f986 	bl	8000ce8 <HAL_GetTick>
 80019dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019de:	e00a      	b.n	80019f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019e0:	f7ff f982 	bl	8000ce8 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e053      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f6:	4b2d      	ldr	r3, [pc, #180]	; (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f003 020c 	and.w	r2, r3, #12
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d1eb      	bne.n	80019e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a08:	4b27      	ldr	r3, [pc, #156]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d210      	bcs.n	8001a38 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a16:	4b24      	ldr	r3, [pc, #144]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f023 0207 	bic.w	r2, r3, #7
 8001a1e:	4922      	ldr	r1, [pc, #136]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a26:	4b20      	ldr	r3, [pc, #128]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d001      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e032      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d008      	beq.n	8001a56 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a44:	4b19      	ldr	r3, [pc, #100]	; (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	4916      	ldr	r1, [pc, #88]	; (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d009      	beq.n	8001a76 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a62:	4b12      	ldr	r3, [pc, #72]	; (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	490e      	ldr	r1, [pc, #56]	; (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a76:	f000 f821 	bl	8001abc <HAL_RCC_GetSysClockFreq>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	091b      	lsrs	r3, r3, #4
 8001a82:	f003 030f 	and.w	r3, r3, #15
 8001a86:	490a      	ldr	r1, [pc, #40]	; (8001ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a88:	5ccb      	ldrb	r3, [r1, r3]
 8001a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a8e:	4a09      	ldr	r2, [pc, #36]	; (8001ab4 <HAL_RCC_ClockConfig+0x1cc>)
 8001a90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a92:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <HAL_RCC_ClockConfig+0x1d0>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff f8e4 	bl	8000c64 <HAL_InitTick>

  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40022000 	.word	0x40022000
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	08002764 	.word	0x08002764
 8001ab4:	20000004 	.word	0x20000004
 8001ab8:	20000008 	.word	0x20000008

08001abc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001abc:	b490      	push	{r4, r7}
 8001abe:	b08a      	sub	sp, #40	; 0x28
 8001ac0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ac2:	4b29      	ldr	r3, [pc, #164]	; (8001b68 <HAL_RCC_GetSysClockFreq+0xac>)
 8001ac4:	1d3c      	adds	r4, r7, #4
 8001ac6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ac8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001acc:	f240 2301 	movw	r3, #513	; 0x201
 8001ad0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61bb      	str	r3, [r7, #24]
 8001ada:	2300      	movs	r3, #0
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ae6:	4b21      	ldr	r3, [pc, #132]	; (8001b6c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f003 030c 	and.w	r3, r3, #12
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	d002      	beq.n	8001afc <HAL_RCC_GetSysClockFreq+0x40>
 8001af6:	2b08      	cmp	r3, #8
 8001af8:	d003      	beq.n	8001b02 <HAL_RCC_GetSysClockFreq+0x46>
 8001afa:	e02b      	b.n	8001b54 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001afc:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001afe:	623b      	str	r3, [r7, #32]
      break;
 8001b00:	e02b      	b.n	8001b5a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	0c9b      	lsrs	r3, r3, #18
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	3328      	adds	r3, #40	; 0x28
 8001b0c:	443b      	add	r3, r7
 8001b0e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b12:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d012      	beq.n	8001b44 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b1e:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	0c5b      	lsrs	r3, r3, #17
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	3328      	adds	r3, #40	; 0x28
 8001b2a:	443b      	add	r3, r7
 8001b2c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b30:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	4a0e      	ldr	r2, [pc, #56]	; (8001b70 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b36:	fb03 f202 	mul.w	r2, r3, r2
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
 8001b42:	e004      	b.n	8001b4e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	4a0b      	ldr	r2, [pc, #44]	; (8001b74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b48:	fb02 f303 	mul.w	r3, r2, r3
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	623b      	str	r3, [r7, #32]
      break;
 8001b52:	e002      	b.n	8001b5a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b56:	623b      	str	r3, [r7, #32]
      break;
 8001b58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b5a:	6a3b      	ldr	r3, [r7, #32]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3728      	adds	r7, #40	; 0x28
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc90      	pop	{r4, r7}
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	08002754 	.word	0x08002754
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	007a1200 	.word	0x007a1200
 8001b74:	003d0900 	.word	0x003d0900

08001b78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b7c:	4b02      	ldr	r3, [pc, #8]	; (8001b88 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr
 8001b88:	20000004 	.word	0x20000004

08001b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b90:	f7ff fff2 	bl	8001b78 <HAL_RCC_GetHCLKFreq>
 8001b94:	4602      	mov	r2, r0
 8001b96:	4b05      	ldr	r3, [pc, #20]	; (8001bac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	0a1b      	lsrs	r3, r3, #8
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	4903      	ldr	r1, [pc, #12]	; (8001bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ba2:	5ccb      	ldrb	r3, [r1, r3]
 8001ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	08002774 	.word	0x08002774

08001bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bb8:	f7ff ffde 	bl	8001b78 <HAL_RCC_GetHCLKFreq>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	0adb      	lsrs	r3, r3, #11
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	4903      	ldr	r1, [pc, #12]	; (8001bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bca:	5ccb      	ldrb	r3, [r1, r3]
 8001bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	08002774 	.word	0x08002774

08001bdc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001be4:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <RCC_Delay+0x34>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a0a      	ldr	r2, [pc, #40]	; (8001c14 <RCC_Delay+0x38>)
 8001bea:	fba2 2303 	umull	r2, r3, r2, r3
 8001bee:	0a5b      	lsrs	r3, r3, #9
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	fb02 f303 	mul.w	r3, r2, r3
 8001bf6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001bf8:	bf00      	nop
  }
  while (Delay --);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	1e5a      	subs	r2, r3, #1
 8001bfe:	60fa      	str	r2, [r7, #12]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1f9      	bne.n	8001bf8 <RCC_Delay+0x1c>
}
 8001c04:	bf00      	nop
 8001c06:	bf00      	nop
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr
 8001c10:	20000004 	.word	0x20000004
 8001c14:	10624dd3 	.word	0x10624dd3

08001c18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e03f      	b.n	8001caa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d106      	bne.n	8001c44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7fe ff42 	bl	8000ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2224      	movs	r2, #36	; 0x24
 8001c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68da      	ldr	r2, [r3, #12]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 fc85 	bl	800256c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	691a      	ldr	r2, [r3, #16]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	695a      	ldr	r2, [r3, #20]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68da      	ldr	r2, [r3, #12]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2220      	movs	r2, #32
 8001c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b08a      	sub	sp, #40	; 0x28
 8001cb6:	af02      	add	r7, sp, #8
 8001cb8:	60f8      	str	r0, [r7, #12]
 8001cba:	60b9      	str	r1, [r7, #8]
 8001cbc:	603b      	str	r3, [r7, #0]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b20      	cmp	r3, #32
 8001cd0:	d17c      	bne.n	8001dcc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d002      	beq.n	8001cde <HAL_UART_Transmit+0x2c>
 8001cd8:	88fb      	ldrh	r3, [r7, #6]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e075      	b.n	8001dce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d101      	bne.n	8001cf0 <HAL_UART_Transmit+0x3e>
 8001cec:	2302      	movs	r3, #2
 8001cee:	e06e      	b.n	8001dce <HAL_UART_Transmit+0x11c>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2221      	movs	r2, #33	; 0x21
 8001d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d06:	f7fe ffef 	bl	8000ce8 <HAL_GetTick>
 8001d0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	88fa      	ldrh	r2, [r7, #6]
 8001d10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	88fa      	ldrh	r2, [r7, #6]
 8001d16:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d20:	d108      	bne.n	8001d34 <HAL_UART_Transmit+0x82>
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d104      	bne.n	8001d34 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	61bb      	str	r3, [r7, #24]
 8001d32:	e003      	b.n	8001d3c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001d44:	e02a      	b.n	8001d9c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2180      	movs	r1, #128	; 0x80
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f000 fa38 	bl	80021c6 <UART_WaitOnFlagUntilTimeout>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e036      	b.n	8001dce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d10b      	bne.n	8001d7e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	881b      	ldrh	r3, [r3, #0]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	3302      	adds	r3, #2
 8001d7a:	61bb      	str	r3, [r7, #24]
 8001d7c:	e007      	b.n	8001d8e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	781a      	ldrb	r2, [r3, #0]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	3b01      	subs	r3, #1
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1cf      	bne.n	8001d46 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	2200      	movs	r2, #0
 8001dae:	2140      	movs	r1, #64	; 0x40
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f000 fa08 	bl	80021c6 <UART_WaitOnFlagUntilTimeout>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e006      	b.n	8001dce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2220      	movs	r2, #32
 8001dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	e000      	b.n	8001dce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001dcc:	2302      	movs	r3, #2
  }
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3720      	adds	r7, #32
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b084      	sub	sp, #16
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	60f8      	str	r0, [r7, #12]
 8001dde:	60b9      	str	r1, [r7, #8]
 8001de0:	4613      	mov	r3, r2
 8001de2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b20      	cmp	r3, #32
 8001dee:	d11d      	bne.n	8001e2c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d002      	beq.n	8001dfc <HAL_UART_Receive_IT+0x26>
 8001df6:	88fb      	ldrh	r3, [r7, #6]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e016      	b.n	8001e2e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d101      	bne.n	8001e0e <HAL_UART_Receive_IT+0x38>
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	e00f      	b.n	8001e2e <HAL_UART_Receive_IT+0x58>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8001e1c:	88fb      	ldrh	r3, [r7, #6]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	68b9      	ldr	r1, [r7, #8]
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f000 fa19 	bl	800225a <UART_Start_Receive_IT>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	e000      	b.n	8001e2e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001e2c:	2302      	movs	r3, #2
  }
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08a      	sub	sp, #40	; 0x28
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10d      	bne.n	8001e8a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	f003 0320 	and.w	r3, r3, #32
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d008      	beq.n	8001e8a <HAL_UART_IRQHandler+0x52>
 8001e78:	6a3b      	ldr	r3, [r7, #32]
 8001e7a:	f003 0320 	and.w	r3, r3, #32
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 fac9 	bl	800241a <UART_Receive_IT>
      return;
 8001e88:	e17b      	b.n	8002182 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 80b1 	beq.w	8001ff4 <HAL_UART_IRQHandler+0x1bc>
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d105      	bne.n	8001ea8 <HAL_UART_IRQHandler+0x70>
 8001e9c:	6a3b      	ldr	r3, [r7, #32]
 8001e9e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 80a6 	beq.w	8001ff4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00a      	beq.n	8001ec8 <HAL_UART_IRQHandler+0x90>
 8001eb2:	6a3b      	ldr	r3, [r7, #32]
 8001eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d005      	beq.n	8001ec8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	f043 0201 	orr.w	r2, r3, #1
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00a      	beq.n	8001ee8 <HAL_UART_IRQHandler+0xb0>
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d005      	beq.n	8001ee8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee0:	f043 0202 	orr.w	r2, r3, #2
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00a      	beq.n	8001f08 <HAL_UART_IRQHandler+0xd0>
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d005      	beq.n	8001f08 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f00:	f043 0204 	orr.w	r2, r3, #4
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00f      	beq.n	8001f32 <HAL_UART_IRQHandler+0xfa>
 8001f12:	6a3b      	ldr	r3, [r7, #32]
 8001f14:	f003 0320 	and.w	r3, r3, #32
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d104      	bne.n	8001f26 <HAL_UART_IRQHandler+0xee>
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d005      	beq.n	8001f32 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	f043 0208 	orr.w	r2, r3, #8
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f000 811e 	beq.w	8002178 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	f003 0320 	and.w	r3, r3, #32
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d007      	beq.n	8001f56 <HAL_UART_IRQHandler+0x11e>
 8001f46:	6a3b      	ldr	r3, [r7, #32]
 8001f48:	f003 0320 	and.w	r3, r3, #32
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d002      	beq.n	8001f56 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 fa62 	bl	800241a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	695b      	ldr	r3, [r3, #20]
 8001f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	bf14      	ite	ne
 8001f64:	2301      	movne	r3, #1
 8001f66:	2300      	moveq	r3, #0
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	f003 0308 	and.w	r3, r3, #8
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d102      	bne.n	8001f7e <HAL_UART_IRQHandler+0x146>
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d031      	beq.n	8001fe2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f9a4 	bl	80022cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d023      	beq.n	8001fda <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	695a      	ldr	r2, [r3, #20]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fa0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d013      	beq.n	8001fd2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fae:	4a76      	ldr	r2, [pc, #472]	; (8002188 <HAL_UART_IRQHandler+0x350>)
 8001fb0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7fe ffe8 	bl	8000f8c <HAL_DMA_Abort_IT>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d016      	beq.n	8001ff0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001fcc:	4610      	mov	r0, r2
 8001fce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fd0:	e00e      	b.n	8001ff0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f8e3 	bl	800219e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fd8:	e00a      	b.n	8001ff0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f8df 	bl	800219e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fe0:	e006      	b.n	8001ff0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f8db 	bl	800219e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001fee:	e0c3      	b.n	8002178 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ff0:	bf00      	nop
    return;
 8001ff2:	e0c1      	b.n	8002178 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	f040 80a1 	bne.w	8002140 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	f003 0310 	and.w	r3, r3, #16
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 809b 	beq.w	8002140 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800200a:	6a3b      	ldr	r3, [r7, #32]
 800200c:	f003 0310 	and.w	r3, r3, #16
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 8095 	beq.w	8002140 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002036:	2b00      	cmp	r3, #0
 8002038:	d04e      	beq.n	80020d8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002044:	8a3b      	ldrh	r3, [r7, #16]
 8002046:	2b00      	cmp	r3, #0
 8002048:	f000 8098 	beq.w	800217c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002050:	8a3a      	ldrh	r2, [r7, #16]
 8002052:	429a      	cmp	r2, r3
 8002054:	f080 8092 	bcs.w	800217c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	8a3a      	ldrh	r2, [r7, #16]
 800205c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	2b20      	cmp	r3, #32
 8002066:	d02b      	beq.n	80020c0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68da      	ldr	r2, [r3, #12]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002076:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	695a      	ldr	r2, [r3, #20]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 0201 	bic.w	r2, r2, #1
 8002086:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	695a      	ldr	r2, [r3, #20]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002096:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2220      	movs	r2, #32
 800209c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68da      	ldr	r2, [r3, #12]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 0210 	bic.w	r2, r2, #16
 80020b4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe ff2b 	bl	8000f16 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	4619      	mov	r1, r3
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 f86d 	bl	80021b0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80020d6:	e051      	b.n	800217c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d047      	beq.n	8002180 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80020f0:	8a7b      	ldrh	r3, [r7, #18]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d044      	beq.n	8002180 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68da      	ldr	r2, [r3, #12]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002104:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	695a      	ldr	r2, [r3, #20]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 0201 	bic.w	r2, r2, #1
 8002114:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2220      	movs	r2, #32
 800211a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68da      	ldr	r2, [r3, #12]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0210 	bic.w	r2, r2, #16
 8002132:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002134:	8a7b      	ldrh	r3, [r7, #18]
 8002136:	4619      	mov	r1, r3
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 f839 	bl	80021b0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800213e:	e01f      	b.n	8002180 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002146:	2b00      	cmp	r3, #0
 8002148:	d008      	beq.n	800215c <HAL_UART_IRQHandler+0x324>
 800214a:	6a3b      	ldr	r3, [r7, #32]
 800214c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 f8f9 	bl	800234c <UART_Transmit_IT>
    return;
 800215a:	e012      	b.n	8002182 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00d      	beq.n	8002182 <HAL_UART_IRQHandler+0x34a>
 8002166:	6a3b      	ldr	r3, [r7, #32]
 8002168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800216c:	2b00      	cmp	r3, #0
 800216e:	d008      	beq.n	8002182 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 f93a 	bl	80023ea <UART_EndTransmit_IT>
    return;
 8002176:	e004      	b.n	8002182 <HAL_UART_IRQHandler+0x34a>
    return;
 8002178:	bf00      	nop
 800217a:	e002      	b.n	8002182 <HAL_UART_IRQHandler+0x34a>
      return;
 800217c:	bf00      	nop
 800217e:	e000      	b.n	8002182 <HAL_UART_IRQHandler+0x34a>
      return;
 8002180:	bf00      	nop
  }
}
 8002182:	3728      	adds	r7, #40	; 0x28
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	08002325 	.word	0x08002325

0800218c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	bc80      	pop	{r7}
 800219c:	4770      	bx	lr

0800219e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr

080021b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr

080021c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b084      	sub	sp, #16
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	60f8      	str	r0, [r7, #12]
 80021ce:	60b9      	str	r1, [r7, #8]
 80021d0:	603b      	str	r3, [r7, #0]
 80021d2:	4613      	mov	r3, r2
 80021d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021d6:	e02c      	b.n	8002232 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021de:	d028      	beq.n	8002232 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d007      	beq.n	80021f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80021e6:	f7fe fd7f 	bl	8000ce8 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d21d      	bcs.n	8002232 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68da      	ldr	r2, [r3, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002204:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	695a      	ldr	r2, [r3, #20]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 0201 	bic.w	r2, r2, #1
 8002214:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2220      	movs	r2, #32
 800221a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2220      	movs	r2, #32
 8002222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e00f      	b.n	8002252 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	4013      	ands	r3, r2
 800223c:	68ba      	ldr	r2, [r7, #8]
 800223e:	429a      	cmp	r2, r3
 8002240:	bf0c      	ite	eq
 8002242:	2301      	moveq	r3, #1
 8002244:	2300      	movne	r3, #0
 8002246:	b2db      	uxtb	r3, r3
 8002248:	461a      	mov	r2, r3
 800224a:	79fb      	ldrb	r3, [r7, #7]
 800224c:	429a      	cmp	r2, r3
 800224e:	d0c3      	beq.n	80021d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800225a:	b480      	push	{r7}
 800225c:	b085      	sub	sp, #20
 800225e:	af00      	add	r7, sp, #0
 8002260:	60f8      	str	r0, [r7, #12]
 8002262:	60b9      	str	r1, [r7, #8]
 8002264:	4613      	mov	r3, r2
 8002266:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	88fa      	ldrh	r2, [r7, #6]
 8002272:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	88fa      	ldrh	r2, [r7, #6]
 8002278:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2222      	movs	r2, #34	; 0x22
 8002284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68da      	ldr	r2, [r3, #12]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800229e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	695a      	ldr	r2, [r3, #20]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 0201 	orr.w	r2, r2, #1
 80022ae:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68da      	ldr	r2, [r3, #12]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f042 0220 	orr.w	r2, r2, #32
 80022be:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr

080022cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68da      	ldr	r2, [r3, #12]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80022e2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	695a      	ldr	r2, [r3, #20]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f022 0201 	bic.w	r2, r2, #1
 80022f2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d107      	bne.n	800230c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 0210 	bic.w	r2, r2, #16
 800230a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2220      	movs	r2, #32
 8002310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	631a      	str	r2, [r3, #48]	; 0x30
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr

08002324 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f7ff ff2d 	bl	800219e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002344:	bf00      	nop
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b21      	cmp	r3, #33	; 0x21
 800235e:	d13e      	bne.n	80023de <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002368:	d114      	bne.n	8002394 <UART_Transmit_IT+0x48>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d110      	bne.n	8002394 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	881b      	ldrh	r3, [r3, #0]
 800237c:	461a      	mov	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002386:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	1c9a      	adds	r2, r3, #2
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	621a      	str	r2, [r3, #32]
 8002392:	e008      	b.n	80023a6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	1c59      	adds	r1, r3, #1
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6211      	str	r1, [r2, #32]
 800239e:	781a      	ldrb	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	3b01      	subs	r3, #1
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	4619      	mov	r1, r3
 80023b4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10f      	bne.n	80023da <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68da      	ldr	r2, [r3, #12]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80023da:	2300      	movs	r3, #0
 80023dc:	e000      	b.n	80023e0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80023de:	2302      	movs	r3, #2
  }
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bc80      	pop	{r7}
 80023e8:	4770      	bx	lr

080023ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68da      	ldr	r2, [r3, #12]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002400:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2220      	movs	r2, #32
 8002406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff febe 	bl	800218c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b086      	sub	sp, #24
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b22      	cmp	r3, #34	; 0x22
 800242c:	f040 8099 	bne.w	8002562 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002438:	d117      	bne.n	800246a <UART_Receive_IT+0x50>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d113      	bne.n	800246a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	b29b      	uxth	r3, r3
 8002454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002458:	b29a      	uxth	r2, r3
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002462:	1c9a      	adds	r2, r3, #2
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	629a      	str	r2, [r3, #40]	; 0x28
 8002468:	e026      	b.n	80024b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002470:	2300      	movs	r3, #0
 8002472:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800247c:	d007      	beq.n	800248e <UART_Receive_IT+0x74>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10a      	bne.n	800249c <UART_Receive_IT+0x82>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d106      	bne.n	800249c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	b2da      	uxtb	r2, r3
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	701a      	strb	r2, [r3, #0]
 800249a:	e008      	b.n	80024ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b2:	1c5a      	adds	r2, r3, #1
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80024bc:	b29b      	uxth	r3, r3
 80024be:	3b01      	subs	r3, #1
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	4619      	mov	r1, r3
 80024c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d148      	bne.n	800255e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0220 	bic.w	r2, r2, #32
 80024da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68da      	ldr	r2, [r3, #12]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	695a      	ldr	r2, [r3, #20]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0201 	bic.w	r2, r2, #1
 80024fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2220      	movs	r2, #32
 8002500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002508:	2b01      	cmp	r3, #1
 800250a:	d123      	bne.n	8002554 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68da      	ldr	r2, [r3, #12]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0210 	bic.w	r2, r2, #16
 8002520:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0310 	and.w	r3, r3, #16
 800252c:	2b10      	cmp	r3, #16
 800252e:	d10a      	bne.n	8002546 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002530:	2300      	movs	r3, #0
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800254a:	4619      	mov	r1, r3
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f7ff fe2f 	bl	80021b0 <HAL_UARTEx_RxEventCallback>
 8002552:	e002      	b.n	800255a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f7fe fa61 	bl	8000a1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800255a:	2300      	movs	r3, #0
 800255c:	e002      	b.n	8002564 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800255e:	2300      	movs	r3, #0
 8002560:	e000      	b.n	8002564 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002562:	2302      	movs	r3, #2
  }
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68da      	ldr	r2, [r3, #12]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	430a      	orrs	r2, r1
 8002588:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	4313      	orrs	r3, r2
 800259a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80025a6:	f023 030c 	bic.w	r3, r3, #12
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	6812      	ldr	r2, [r2, #0]
 80025ae:	68b9      	ldr	r1, [r7, #8]
 80025b0:	430b      	orrs	r3, r1
 80025b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	699a      	ldr	r2, [r3, #24]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a2c      	ldr	r2, [pc, #176]	; (8002680 <UART_SetConfig+0x114>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d103      	bne.n	80025dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80025d4:	f7ff faee 	bl	8001bb4 <HAL_RCC_GetPCLK2Freq>
 80025d8:	60f8      	str	r0, [r7, #12]
 80025da:	e002      	b.n	80025e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80025dc:	f7ff fad6 	bl	8001b8c <HAL_RCC_GetPCLK1Freq>
 80025e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	4613      	mov	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	009a      	lsls	r2, r3, #2
 80025ec:	441a      	add	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f8:	4a22      	ldr	r2, [pc, #136]	; (8002684 <UART_SetConfig+0x118>)
 80025fa:	fba2 2303 	umull	r2, r3, r2, r3
 80025fe:	095b      	lsrs	r3, r3, #5
 8002600:	0119      	lsls	r1, r3, #4
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	4613      	mov	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	009a      	lsls	r2, r3, #2
 800260c:	441a      	add	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	fbb2 f2f3 	udiv	r2, r2, r3
 8002618:	4b1a      	ldr	r3, [pc, #104]	; (8002684 <UART_SetConfig+0x118>)
 800261a:	fba3 0302 	umull	r0, r3, r3, r2
 800261e:	095b      	lsrs	r3, r3, #5
 8002620:	2064      	movs	r0, #100	; 0x64
 8002622:	fb00 f303 	mul.w	r3, r0, r3
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	3332      	adds	r3, #50	; 0x32
 800262c:	4a15      	ldr	r2, [pc, #84]	; (8002684 <UART_SetConfig+0x118>)
 800262e:	fba2 2303 	umull	r2, r3, r2, r3
 8002632:	095b      	lsrs	r3, r3, #5
 8002634:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002638:	4419      	add	r1, r3
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	4613      	mov	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	009a      	lsls	r2, r3, #2
 8002644:	441a      	add	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002650:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <UART_SetConfig+0x118>)
 8002652:	fba3 0302 	umull	r0, r3, r3, r2
 8002656:	095b      	lsrs	r3, r3, #5
 8002658:	2064      	movs	r0, #100	; 0x64
 800265a:	fb00 f303 	mul.w	r3, r0, r3
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	011b      	lsls	r3, r3, #4
 8002662:	3332      	adds	r3, #50	; 0x32
 8002664:	4a07      	ldr	r2, [pc, #28]	; (8002684 <UART_SetConfig+0x118>)
 8002666:	fba2 2303 	umull	r2, r3, r2, r3
 800266a:	095b      	lsrs	r3, r3, #5
 800266c:	f003 020f 	and.w	r2, r3, #15
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	440a      	add	r2, r1
 8002676:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002678:	bf00      	nop
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40013800 	.word	0x40013800
 8002684:	51eb851f 	.word	0x51eb851f

08002688 <memset>:
 8002688:	4603      	mov	r3, r0
 800268a:	4402      	add	r2, r0
 800268c:	4293      	cmp	r3, r2
 800268e:	d100      	bne.n	8002692 <memset+0xa>
 8002690:	4770      	bx	lr
 8002692:	f803 1b01 	strb.w	r1, [r3], #1
 8002696:	e7f9      	b.n	800268c <memset+0x4>

08002698 <strncpy>:
 8002698:	4603      	mov	r3, r0
 800269a:	b510      	push	{r4, lr}
 800269c:	3901      	subs	r1, #1
 800269e:	b132      	cbz	r2, 80026ae <strncpy+0x16>
 80026a0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80026a4:	3a01      	subs	r2, #1
 80026a6:	f803 4b01 	strb.w	r4, [r3], #1
 80026aa:	2c00      	cmp	r4, #0
 80026ac:	d1f7      	bne.n	800269e <strncpy+0x6>
 80026ae:	2100      	movs	r1, #0
 80026b0:	441a      	add	r2, r3
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d100      	bne.n	80026b8 <strncpy+0x20>
 80026b6:	bd10      	pop	{r4, pc}
 80026b8:	f803 1b01 	strb.w	r1, [r3], #1
 80026bc:	e7f9      	b.n	80026b2 <strncpy+0x1a>
	...

080026c0 <__libc_init_array>:
 80026c0:	b570      	push	{r4, r5, r6, lr}
 80026c2:	2600      	movs	r6, #0
 80026c4:	4d0c      	ldr	r5, [pc, #48]	; (80026f8 <__libc_init_array+0x38>)
 80026c6:	4c0d      	ldr	r4, [pc, #52]	; (80026fc <__libc_init_array+0x3c>)
 80026c8:	1b64      	subs	r4, r4, r5
 80026ca:	10a4      	asrs	r4, r4, #2
 80026cc:	42a6      	cmp	r6, r4
 80026ce:	d109      	bne.n	80026e4 <__libc_init_array+0x24>
 80026d0:	f000 f81a 	bl	8002708 <_init>
 80026d4:	2600      	movs	r6, #0
 80026d6:	4d0a      	ldr	r5, [pc, #40]	; (8002700 <__libc_init_array+0x40>)
 80026d8:	4c0a      	ldr	r4, [pc, #40]	; (8002704 <__libc_init_array+0x44>)
 80026da:	1b64      	subs	r4, r4, r5
 80026dc:	10a4      	asrs	r4, r4, #2
 80026de:	42a6      	cmp	r6, r4
 80026e0:	d105      	bne.n	80026ee <__libc_init_array+0x2e>
 80026e2:	bd70      	pop	{r4, r5, r6, pc}
 80026e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80026e8:	4798      	blx	r3
 80026ea:	3601      	adds	r6, #1
 80026ec:	e7ee      	b.n	80026cc <__libc_init_array+0xc>
 80026ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80026f2:	4798      	blx	r3
 80026f4:	3601      	adds	r6, #1
 80026f6:	e7f2      	b.n	80026de <__libc_init_array+0x1e>
 80026f8:	0800277c 	.word	0x0800277c
 80026fc:	0800277c 	.word	0x0800277c
 8002700:	0800277c 	.word	0x0800277c
 8002704:	08002780 	.word	0x08002780

08002708 <_init>:
 8002708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800270a:	bf00      	nop
 800270c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800270e:	bc08      	pop	{r3}
 8002710:	469e      	mov	lr, r3
 8002712:	4770      	bx	lr

08002714 <_fini>:
 8002714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002716:	bf00      	nop
 8002718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800271a:	bc08      	pop	{r3}
 800271c:	469e      	mov	lr, r3
 800271e:	4770      	bx	lr
